{"pageProps":{"props":{"mdxPath":"guide/content/BasicDynamicProgramming/rolling/rolling.mdx","code":"BasicDynamicProgramming/rolling","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"coming":false},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"coming":false},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter","WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":true,"title":"樹","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":true,"title":"拓撲排序","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 III","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/unintuitive_greedy","BasicDataStructure/set_map","BasicAlgorithm/partial_sum","BasicAlgorithm/binary_search_answer"],"coming":false},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"coming":false},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Structured binding","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased"],"coming":false},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"coming":false},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"]},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicDynamicProgramming/rolling/rolling.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Problem, Refcode} = _components;\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"什麼是滾動 DP？\",\n      children: \"什麼是滾動 DP？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在有些時候，可以「聰明地」實作 DP 來節省記憶體、甚至能獲得常數較小的程式碼。若用直觀的概念解釋的話，就是「適當的丟棄那些再也用不到的狀態」。我們不妨複習一下，DP 本身的意義就是把「算過的東西存起來」，進而用記憶換取時間。同時我們也說過，DP 的能夠加速的理由就在於我們會有「重複子問題」，也就是我們存下來記憶是會被反覆呼叫的，這才能達成加速的效果。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，滾動 DP 的主要概念就是再試圖把那些不再有用、不再會被呼叫的狀態都從記憶中移除，如此一來就能有效的省下大量的記憶體空間。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"以背包問題為例\",\n      children: \"以背包問題為例\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/801\",\n      src: \"NCOJ 801\",\n      name: \"01 背包問題\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/801/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/801/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/801/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/801/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在背包問題中，所謂的 DP 轉移式是長這樣的：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i][j] = \\\\max(dp[i - 1][j], dp[i - 1][j - w_i] + v_i)\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這時候，一般的寫法肯定是先算完第一排（$dp[1][j]$）、再去算第二排（$dp[2][j]$）、……、一路算到第 $N$ 排。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而眼尖的讀者可能馬上就能發現了：在算完第 $i$ 排之後，$i-1$ 排的資訊就不再有用了！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"基於這樣的想法，我們可以用以下兩種方式來實作：\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"以背包問題為例-0/1 寫法\",\n      children: \"0/1 寫法\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"由於每次都只需要兩排的記憶體就好，因此我們把原本會開到 \", _jsx(_components.code, {\n        children: \"dp[MAXN][MAXW]\"\n      }), \" 的陣列開成 \", _jsx(_components.code, {\n        children: \"dp[2][MAXW]\"\n      }), \"，並用 0/1 來互換運算過程，如下：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\nconst int MAXN = 105;\\nconst int MAXW = 100005;\\nconst long long INF = MAXN * 1000000000ll;\\n\\nlong long dp[2][MAXW];\\nint w[MAXN], v[MAXN];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    int n, wmax;\\n    cin >> n >> wmax;\\n    for (int i = 1; i <= n; ++i)\\n        cin >> w[i] >> v[i];\\n\\n    // 初始化\\n    dp[0][0] = 0;\\n    for (int i = 1; i <= wmax; ++i)\\n        dp[0][i] = -INF; // 0 個東西湊不出重量 i > 0\\n\\n    int now = 1;\\n    for (int i = 1; i <= n; ++i) {\\n        for (int j = 0; j < w[i]; ++j)\\n            dp[now][j] = dp[!now][j];\\n        for (int j = w[i]; j <= wmax; ++j)\\n            dp[now][j] = max(dp[!now][j], dp[!now][j - w[i]] + v[i]);\\n        now ^= 1;\\n    }\\n\\n    cout << *max_element(dp[!now], dp[!now] + wmax + 1) << \\\"\\\\n\\\";    \\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這份程式碼跟之前的實作幾乎一樣，就差在與這份程式碼使用了「滾動」的技巧。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"因為現在陣列只開了兩排，所以我們在第 24 行宣告一個變數 \", _jsx(_components.code, {\n        children: \"now\"\n      }), \"，每次要算第 $i$ 排時，\", _jsx(_components.code, {\n        children: \"now\"\n      }), \" 代表的就是當前這排的值，而 \", _jsx(_components.code, {\n        children: \"!now\"\n      }), \" 就是 0/1 反轉後 \", _jsx(_components.code, {\n        children: \"now\"\n      }), \"，所以就代表著前一排。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"因此，把原本 \", _jsx(_components.code, {\n        children: \"i\"\n      }), \" 的部分改成 \", _jsx(_components.code, {\n        children: \"now\"\n      }), \"、\", _jsx(_components.code, {\n        children: \"i - 1\"\n      }), \" 的部分 \", _jsx(_components.code, {\n        children: \"!now\"\n      }), \"，就完成滾動的實作了！\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"順帶一提，如果「還會有用的排數」不是兩排，而是三排的話，這裡可能就要在 0/1/2 之間做切換，也就不能使用 \", _jsx(_components.code, {\n        children: \"!now\"\n      }), \" 這種偷吃步的寫法，這部分的細節就交給讀者自行思考了。\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      refId: \"以背包問題為例-vector 寫法\",\n      children: [_jsx(_components.code, {\n        children: \"vector\"\n      }), \" 寫法\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"滾動 DP 還有一個常見的好寫法：使用 \", _jsx(_components.code, {\n        children: \"std::vector\"\n      }), \" 來實作。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"具體概念是直接把兩排當成兩個 \", _jsx(_components.code, {\n        children: \"vector\"\n      }), \" 陣列，並在算完一排後直接使用 \", _jsx(_components.code, {\n        children: \"swap\"\n      }), \" 來交換。而由於 \", _jsx(_components.code, {\n        children: \"vector\"\n      }), \" 的特性，這裡 26 行的 \", _jsx(_components.code, {\n        children: \"swap\"\n      }), \" 其實時間複雜度是 $O(1)$ 的！具體理論這裡不好解釋，讀者可以先記下來就好。\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <algorithm>\\n#include <vector>\\nusing namespace std;\\n\\nconst int MAXN = 105;\\nconst long long INF = MAXN * 1000000000ll;\\n\\nint w[MAXN], v[MAXN];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    int n, wmax;\\n    cin >> n >> wmax;\\n    for (int i = 1; i <= n; ++i)\\n        cin >> w[i] >> v[i];\\n\\n    // 初始化\\n    vector<long long> cur(wmax + 1, 0), prv(wmax + 1, -INF);\\n    prv[0] = 0;\\n\\n    for (int i = 1; i <= n; ++i) {\\n        cur = prv;\\n        for (int j = w[i]; j <= wmax; ++j)\\n           cur[j] = max(prv[j], prv[j - w[i]] + v[i]);\\n        cur.swap(prv);\\n    }\\n\\n    cout << *max_element(prv.begin(), prv.end()) << \\\"\\\\n\\\";    \\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"看完了上面的程式碼，相信讀者可以感受到更多的簡潔性，包含 19 行的初始化、23 行的賦值等等，這些都是使用 \", _jsx(_components.code, {\n        children: \"vector\"\n      }), \" 能獲得的寫法優勢。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"同樣地，如果「還會有用的排數」不是兩排，而是三排以上的話要怎麼辦呢？其實若使用這個寫法，可能要稍微動點歪腦筋，由於筆者沒有看過什麼比較固定的實作方法，這裡就不做冗餘的解釋，僅給讀者一個可能的實現方法：可以使用 \", _jsx(_components.code, {\n        children: \"std::rotate\"\n      }), \" 試試看。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"以背包問題為例-陷阱\",\n      children: \"陷阱\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"要注意，即使上面的題目剛好不會用到，但不論是哪一種寫法，都是在「回收利用」之前用過的記憶體。也因此，剛交換完後所得到的記憶體實際上還是存著更之前的資料。因此，如果寫出 \", _jsx(_components.code, {\n        children: \"dp[i] = max(dp[i], ...)\"\n      }), \" 這種寫法的話，就有可能不小心拿到舊的資料，這在某些題目可能是會出事的！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而解決方法很理所當然的，就是要記得好好初始化！\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"這也是滾動 DP\",\n      children: \"這也是滾動 DP\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"實際上，像是費氏數列的這種 DP，很多人會直接用下列的方式來實作：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int fib_dp(int n) {\\n    int a = 0, b = 1;\\n    for (int i = 1; i <= n; ++i) {\\n        int t = (a + b) % MOD;\\n        a = b;\\n        b = t;\\n    }\\n    return a;\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也就是直接紀錄「剛算完的那兩個數字」，以用來推到下一個數字；而算出下一個數字後，就可以把兩項之前的那項丟掉。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯，所謂「丟掉之前的項」就是滾動 DP 的精神，所以上述的寫法其實就是一種滾動 DP！進而達到 $O(1)$ 的記憶體用量。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"回頭來看，其實這類寫法幾乎只有在以 bottom up 實作 DP 時才能進行改造，所以這其實也是 bottom up 的優勢所在。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"還能再短一點\",\n      children: \"還能再短一點\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"實際上，針對背包問題的滾動 DP，有一個更短的寫法，由於直接解釋起來有點困難，這裡就先上程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\nconst int MAXN = 105;\\nconst int MAXW = 100005;\\nconst long long INF = MAXN * 1000000000ll;\\n\\nlong long dp[MAXW];\\nint w[MAXN], v[MAXN];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    int n, wmax;\\n    cin >> n >> wmax;\\n    for (int i = 1; i <= n; ++i)\\n        cin >> w[i] >> v[i];\\n\\n    // 初始化\\n    dp[0] = 0;\\n    for (int i = 1; i <= wmax; ++i)\\n        dp[i] = -INF; // 0 個東西湊不出重量 i > 0\\n\\n    for (int i = 1; i <= n; ++i)\\n        for (int j = wmax; j >= w[i]; --j)\\n            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);\\n\\n    cout << *max_element(dp, dp + wmax + 1) << \\\"\\\\n\\\";    \\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讀者可以發現，我們在開 DP 陣列時直接把第一個維度丟棄了，不只如此，在 25 行開始的轉移式也變得非常的簡短，甚至還有些不一樣！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣做的原理是什麼呢？讀者可以想像在計算第 $i$ 排的狀態時，$i-1$ 排是如何去更新第 $i$ 排的。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯，這個轉移過程可以想像成：一開始原封不動的複製第 $i-1$ 排，再拿第 $j$ 格去更新 $j+w_i$ 格。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而這時候，如果我們像第 25 行一樣倒過來更新的話——就不會重複更新到了！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"什麼是重複更新呢？因為每一個物品只能拿一次，如果 $j$ 更新 $j+w_i$ 後，$j+w_i$ 又去更新 $j+w_i+w_i$，那就會直接錯飛天；但倒過來做的話，$j$ 更新 $j+w_i$ 的時候 $j+w_i$ 早就已經更新後更後面的格子了，也就完美的迴避掉了這個問題。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"還沒有完全抓到感覺嗎？我們不妨再來看看另一個例子：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/825\",\n      src: \"NCOJ 825\",\n      name: \"無限背包問題\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/825/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/825/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/825/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/825/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在無限背包的例子中，我們更新第 $i$ 排時也可以想成是先原封不動的複製第 $i-1$ 排，但這次我們不用再倒過來跑了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"為什麼？原本倒過來跑就是想要迴避「重複更新」這個問題，可是無限背包問題的特點就是東西可以重複拿，那不就正合我們意了嗎？\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\nconst int MAXN = 1005;\\nconst int MAXW = 205;\\nconst long long INF = MAXN * 1000000000ll;\\n\\nlong long dp[MAXW];\\nint w[MAXN], v[MAXN];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    int n, wmax;\\n    cin >> n >> wmax;\\n    for (int i = 1; i <= n; ++i)\\n        cin >> w[i];\\n    for (int i = 1; i <= n; ++i)\\n        cin >> v[i];\\n\\n    // 初始化\\n    dp[0] = 0;\\n    for (int i = 1; i <= wmax; ++i)\\n        dp[i] = -INF; // 0 個東西湊不出重量 i > 0\\n\\n    for (int i = 1; i <= n; ++i)\\n        for (int j = w[i]; j <= wmax; ++j)\\n            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);\\n\\n    cout << *max_element(dp, dp + wmax + 1) << \\\"\\\\n\\\";    \\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，像上述程式碼一樣大膽的寫下去就能輕鬆的寫出正確的程式碼了！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當然，上述的論述並沒有非常的準確，讀者可以多加思考這兩題之間的差別，來好好思考看看這種特殊的滾動 DP 做法最核心的概念為何。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"常數優化！？\",\n      children: \"常數優化！？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"實際上，滾動 DP 除了省下記憶體用量之外，大多數時候滾動 DP 的執行時間其實會比原本的更快！當然，讀者可能會覺得有點怪，畢竟在滾動 DP 的理念中，時間複雜度並沒有改變，只不過是省下記憶體用量而已；我們甚至還多花了一點力氣來處理交換陣列的部分，這樣到底是怎麼讓程式變快的呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"要知道，電腦是存在快取記憶體這種概念的，這邊就不做太深入的解釋。若用簡單的例子說的話，讀者可以想像自己在處理文書工作，當資料量非常大的時候，處理文書的書桌空間可能有限，所以可能有大多數的資料們都得存放在櫃子內。也就是說，每次要去拿一份不在書桌上的文件時，就得多花一段固定的時間走去櫃子拿資料出來，甚至還得適當的把書桌上的資料放回櫃子內才不會放不下。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過如果今天資料量夠小，小到書桌空間就放得下的話，狀況就不一樣了——既然我們總是不需要浪費時間在櫃子之間往返，「存取資料」的速度就會快上許多。沒錯，滾動 DP 大多數的常數優化概念便在這裡！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讀者可以想像電腦也有對記憶體做這樣的「分層」，所謂書桌就是存取比較快、但空間相對小的記憶體，而櫃子就是存取比較慢、但空間相對大的記憶體。在沒有使用滾動 DP 的情況下，多出來的資料就得被迫放在櫃子內，消耗多餘的存取時間；而使用了滾動 DP 之後，由於資料量變少，所有的資料都能夠放在書桌上，就可以大大省下存取資料的時間了。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在這個章節中，我們了解到了「滾動 DP」的概念和實作方式，了解到其擁有省空間、甚至有省下時間常數的優勢。同時，我們也發現了在特定狀況下還能夠使用更漂亮的實作方式。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"想必讀者讀到這裡，已經學過不少動態規劃方法，可在比賽中才不會有「這題是 DP！」這樣的提示在。因此，在下一個章節中，我們將為大家再做一個總複習，讀者可以針對下列問題先行做一些思考：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"什麼樣的問題是 DP？什麼樣的問題不是 DP？\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"什麼樣的問題會像背包問題一樣，明明看似只需要 $n-1$ 個物品的子問題，卻總是需要多一個參數來輔助轉移才能找出最佳解？\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"什麼時候該使用 DP？\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"針對以下習題，試著學習寫成滾動的形式看看。並試著進一步思考：若寫成功了，你是否有使用到我們上面教過「更短的寫法」呢？你是怎麼辦到的？或如果辦不到的話，為什麼？\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/158/\",\n      src: \"NEOJ 158\",\n      name: \"高棕櫚農場 2\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/NEOJ/158/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/158/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/158/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/158/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1746\",\n      src: \"CSES 1746\",\n      name: \"Array Description\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/CSES/1746/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1746/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1746/description.mdx\",\n      importMdx: \"guide/problems/CSES/1746/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://www.luogu.com.cn/problem/P1794\",\n      src: \"洛谷 P1794\",\n      name: \"装备运输\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/Luogu/P1794/description.mdx\",\n      constraintsMdx: \"guide/problems/Luogu/P1794/constraints.mdx\",\n      importMdx: \"guide/problems/Luogu/P1794/description.mdx\",\n      importMdx: \"guide/problems/Luogu/P1794/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/801/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $N$ 個物品編號 $1 \\\\sim N$，第 $i$ 個物品的重量和價值分別是 $w_i$ 和 $v_i$。學姐打算從這 $N$ 個物品選其中一些帶走，但她只有大小為 $W$ 的背包，也就是說她選擇的物品總重不能超過 $W$。請問背包能容納的物品的總價值最大是多少？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/801/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le N \\\\le 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le W \\\\le 10^ {5}$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le w_i \\\\le W$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le v_i \\\\le 10^ {9}$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/825/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"現在有 $N$ 個物品，第 $i$ 個物品的重量為 $w_i$，價值為 $v_i$。每個物品都有無限多個。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"你有一個重量限制為 $W$ 的背包，你希望可以在不超過這個背包重量限制的前提下，盡可能塞入價值總和最高的物品。請問你可以塞入最高的物品總價值是多少？\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/825/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N \\\\leq 1000, 1\\\\leq W\\\\leq 200$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq w_i \\\\leq W$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq v_i \\\\leq 10^ 9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/158/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $N$ 個高棕櫚，經過円円分析後，吃下第 $i$ 個高棕櫚會得到 $A_i$ 的飽足感和 $B_i$ 的滿足感，但円円有一個能承受的飽足感上限 $M$，同時還有吃下的高棕櫚數量上限 $K$，試找出円円在不違反所有限制下能獲得的滿足感最大值。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/158/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$T\\\\leq 10$ 筆測資\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq K\\\\leq N\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq M\\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq A_i\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq B_i\\\\leq 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1746/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"給定長度為 $n$ 的序列，序列上有一些位置的數字已經給定，試問有多少把剩下位置填入數字的方法，使得序列中任意相鄰兩個數字的差至多為 $1$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所有填入數字的範圍皆必須介於 $1\\\\sim m$ 之間。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1746/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n\\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq m\\\\leq 100$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/P1794/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"德國放鬆對英國的進攻後，把矛頭指向了東邊——蘇聯。$1943$ 年初，東線的戰鬥進行到白熱化階段。據可靠情報，$90$ 餘萬德國軍隊在庫爾斯克準備發動浩大攻勢。因此，朱可夫元帥要求你立即從遠東的軍工廠運輸大量裝備支援庫爾斯克前線。列車司機告訴你，一趟列車最多可以容納 $V$ 體積的武器裝備，但是你可能不能裝滿，因為列車承受不了那麽大的重量，一趟列車最多可以承載 $G$ 單位的重量。同時，軍工廠倉庫提供給你一份裝備清單，詳細記錄了每件裝備的體積、重量和火力。為了有效支援朱可夫元帥，你要找到一種方案，使得總火力值最大。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/P1794/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"裝備數量 $N \\\\leq 500$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$V, G\\\\leq 500$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"體積、重量和火力 $\\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"什麼是滾動 DP？","depth":1,"code":"什麼是滾動 DP？"},{"text":"以背包問題為例","depth":1,"code":"以背包問題為例"},{"text":"0/1 寫法","depth":2,"code":"以背包問題為例-0/1 寫法"},{"text":"vector 寫法","depth":2,"code":"以背包問題為例-vector 寫法"},{"text":"陷阱","depth":2,"code":"以背包問題為例-陷阱"},{"text":"這也是滾動 DP","depth":1,"code":"這也是滾動 DP"},{"text":"還能再短一點","depth":1,"code":"還能再短一點"},{"text":"常數優化！？","depth":1,"code":"常數優化！？"},{"text":"小結","depth":1,"code":"小結"},{"text":"習題","depth":1,"code":"習題"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}