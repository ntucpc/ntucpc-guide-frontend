{"pageProps":{"props":{"mdxPath":"guide/content/ImplementationKnowledge/basic_knowledge/basic_knowledge.mdx","code":"ImplementationKnowledge/basic_knowledge","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"coming":false},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"coming":false},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"倍增法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo","AlgorithmTechnique/dc"],"coming":false},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter","WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":true,"title":"樹","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":true,"title":"拓撲排序","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"Game/intro","article":"intro","topic":"Game","chapter":null,"valid":true,"title":"賽局導論","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 III","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/unintuitive_greedy","BasicDataStructure/set_map","BasicAlgorithm/partial_sum","BasicAlgorithm/binary_search_answer"],"coming":false},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"coming":false},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Structured binding","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased"],"coming":false},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"coming":false},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":true,"title":"偽指標","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/linked_list"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"]},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/ImplementationKnowledge/basic_knowledge/basic_knowledge.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure, Info, Problem, Refcode} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"萬用標頭檔\",\n      children: \"萬用標頭檔\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在比賽時我們常常需要使用各式各樣的 C++ 內建函式，而呼叫這些函式必須引用相對應的標頭檔。例如需要 \", _jsx(_components.code, {\n        children: \"#include <iostream>\"\n      }), \" 才能使用 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 、需要 \", _jsx(_components.code, {\n        children: \"#include <algorithm>\"\n      }), \" 才能使用 \", _jsx(_components.code, {\n        children: \"sort\"\n      }), \"……每次都要記哪些函式屬於哪個標頭檔，還需要全部在比賽中打出來，又累又慢，就不能簡單的一次到位嗎？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在大多數情況下，我們都可以仰賴 \", _jsx(_components.code, {\n        children: \"<bits/stdc++.h>\"\n      }), \" （俗稱萬用標頭檔）。怎麼使用呢？我們可以把幾乎所有 \", _jsx(_components.code, {\n        children: \"#include\"\n      }), \" 開頭的程式碼都刪掉，直接寫下一行\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"就搞定了！我們已經可以呼叫幾乎所有 C++ 內建的標準函式。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這簡單的一行到底做了什麼呢？在 C++ 裡面 \", _jsx(_components.code, {\n        children: \"#include XXX\"\n      }), \" 的做的事情差不多是將一份預先寫好的 \", _jsx(_components.code, {\n        children: \"XXX\"\n      }), \" 文件直接貼在程式碼裡面，而若讀者去了解一下 \", _jsx(_components.code, {\n        children: \"<bits/stdc++.h>\"\n      }), \" 的內容的話，可以看到\", _jsx(_components.a, {\n        href: \"https://gcc.gnu.org/onlinedocs/gcc-10.2.0/libstdc++/api/a00782_source.html\",\n        children: \"類似這種東西\"\n      }), \"，也就是 \", _jsx(_components.code, {\n        children: \"<bits/stdc++.h>\"\n      }), \" 幾乎把所有標準函式庫的標頭檔都在裡面引用了一遍！\"]\n    }), \"\\n\", _jsx(Info, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [\"注意到我們強調了「大多數情況下」適用，這是因為 \", _jsx(_components.code, {\n          children: \"<bits/stdc++.h>\"\n        }), \" 並不在 C++ 的官方規範中，儘管目前多數的 Online Judge、包含比賽使用的評測系統都支援 \", _jsx(_components.code, {\n          children: \"<bits/stdc++.h>\"\n        }), \" 的引用，但還是難免會在少數地方無法使用，特此提醒。\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不過既然有這種懶人作法，為什麼 C++ 不一口氣幫大家內建好所有函式就好，還要讓使用者一個一個引用呢？別忘記程式碼寫完之後，是需要先經過「編譯器」進行編譯才能成為一個程式的，而既然引用的意義是展開一份預先寫好的文件，一旦引用了 \", _jsx(_components.code, {\n        children: \"<bits/stdc++.h>\"\n      }), \"，就等價展開了無數標準函式的程式碼，使得 C++ 編譯器的編譯速度變慢。有興趣的讀者可以嘗試寫兩份輸出 \", _jsx(_components.code, {\n        children: \"Hello World\"\n      }), \" 的程式碼，一份引用 \", _jsx(_components.code, {\n        children: \"<bits/stdc++.h>\"\n      }), \"、另一份只引用 \", _jsx(_components.code, {\n        children: \"<iostream>\"\n      }), \"，並分別編譯兩份程式碼來感受一下他們的編譯速度，相信在大多數電腦上都有著肉眼可辨識的差異。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"命名空間\",\n      children: \"命名空間\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果讀者有嘗試參考過各種 C++ 的程式範例、或者是一些程式競賽選手寫的 C++ 程式碼，可能時常看見以下這一行\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"using namespace std;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這一行是在做什麼呢？讓我們看看以下這份程式碼\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    cout << \\\"Hello World!\\\\n\\\";\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果把 \", _jsx(_components.code, {\n        children: \"using namespace std;\"\n      }), \" 這行拿掉並編譯的話，應該會顯示如下的錯誤訊息\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"plaintext\",\n      lineno: \"false\",\n      code: \"error: 'cout' was not declared in this scope; did you mean 'std::cout'?\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這是因為 C++ 其實把大多數的標準函式都包在了一個名為 \", _jsx(_components.code, {\n        children: \"std\"\n      }), \" 的「命名空間 (namespace) 」裡面。用簡單的比喻來說，當我們提到「資工系」時，一旁的人通常不會知道我們是在講「臺灣大學資工系」、「陽明交通大學資工系」、又或是其他學校的資工系，這是因為不只有一間大學有資工系。所以如果寫出「臺灣大學資工系」這個完整的詞，大家就會知道我們在指臺灣大學底下的資工系。若是拿掉 \", _jsx(_components.code, {\n        children: \"using namespace std\"\n      }), \" ，範例程式中的 \", _jsx(_components.code, {\n        children: \"cout\"\n      }), \" 就得寫成完整的函式名稱「 \", _jsx(_components.code, {\n        children: \"std::cout\"\n      }), \" 」，代表使用 std 這個 namespace 底下的 cout 函式。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一個命名空間就好像一間大學，裡面有各式各樣的科系，每次提到一個科系都得講一次哪個大學不會太麻煩嗎？如果我們在臺灣大學裡提到「資工系」，旁人都會默認我們是指「臺灣大學資工系」，而這就是 \", _jsx(_components.code, {\n        children: \"using namespace\"\n      }), \" 的含義。讀者可以想像 \", _jsx(_components.code, {\n        children: \"using namespace std\"\n      }), \" 就好像進入了 \", _jsx(_components.code, {\n        children: \"std\"\n      }), \" 這間大學，也因此一提到 \", _jsx(_components.code, {\n        children: \"cout\"\n      }), \" 時，C++ 就會知道我們在使用 \", _jsx(_components.code, {\n        children: \"std::cout\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"using namespace std\"\n      }), \" 雖然方便，但一個明顯的缺點就是「變數撞名」，讀者可以想像如果我們同時進入了臺灣大學和陽明交通大學兩個空間裡，兩所學校都有的資工系就會變得分不清楚了！這也是為什麼大型 C++ 專案通常會迴避直接使用 \", _jsx(_components.code, {\n        children: \"using namespace\"\n      }), \" ，如果一口氣引用了太多函式，很容易引起不容易察覺的變數撞名，導致編譯錯誤。不過在比程式競賽的場合，通常都不用擔心這個問題，直接大膽寫下 \", _jsx(_components.code, {\n        children: \"using namespace std\"\n      }), \" 吧！\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"輸入優化？\",\n      children: \"輸入優化？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們來看看以下例題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/16\",\n      src: \"NCOJ 16\",\n      name: \"[Tutorial] 輸入輸出練習\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/16/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/16/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/16/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/16/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"輸入 $N$ 個數字，原封不動的把他們輸出出來？還不簡單，馬上就來寫：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    int n;\\n    cin >> n;\\n    while (n--) {\\n        int x;\\n        cin >> x;\\n        cout << x << \\\"\\\\n\\\";\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"...結果上傳時吃了一個 TLE！？這該怎麼辦？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"左想右想這題也沒有什麼演算法可言，剛入門的新手可能會不知所措。這其實是因為 C++ 的預設輸入非常的慢！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但為什麼這麼慢呢？我們先來看看要怎麼解決這個問題，只要把程式碼改成這樣：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    ios::sync_with_stdio(false), cin.tie(nullptr);\\n    int n;\\n    cin >> n;\\n    while (n--) {\\n        int x;\\n        cin >> x;\\n        cout << x << \\\"\\\\n\\\";\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上傳後就奇蹟似的 AC 了！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"為什麼只加入一行 \", _jsx(_components.code, {\n        children: \"ios::sync_with_stdio(false), cin.tie(nullptr);\"\n      }), \" 就可以快這麼多呢？首先要先知道，C++ 其實是跟他的前身，C，有兼容的，也就是說大多數的 C 語法在 C++ 都是可以使用的。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"而講到 C 的輸入和輸出，就是 \", _jsx(_components.code, {\n        children: \"<stdio.h>\"\n      }), \" 裡面 \", _jsx(_components.code, {\n        children: \"scanf\"\n      }), \" 的 \", _jsx(_components.code, {\n        children: \"printf\"\n      }), \"，可別以為輸入跟輸出是件很簡單的事情，這些輸入和輸出的函式們背後還得維護各式各樣的資訊，如果 C++ 完全不管 C 原本的輸入輸出方式自己寫了一套 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"cout\"\n      }), \"，只要使用者共用 \", _jsx(_components.code, {\n        children: \"scanf\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 兩種輸入方式，整個程式就會大亂！\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"因此，\", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"cout\"\n      }), \" 預設是會顧及 \", _jsx(_components.code, {\n        children: \"scanf\"\n      }), \" 跟 \", _jsx(_components.code, {\n        children: \"printf\"\n      }), \" 的輸入輸出系統的，讀者可以想像成是他們要額外花心力去配合 C，這樣一來速度變慢自然是合理的，而 \", _jsx(_components.code, {\n        children: \"ios::sync_with_stdio(false)\"\n      }), \" 就是關掉與 C 同步的關鍵函式！也就是說，加了這行，C++ 就不用再特別顧及 C 的輸入輸出了——相對的，加了這行之後，千萬不要再混用 C++ 跟 C 的輸入輸出。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"那 \", _jsx(_components.code, {\n        children: \"cin.tie(nullptr)\"\n      }), \" 的作用是什麼？這其中的原因更為複雜一些，若簡略一點說明就是 C++ 顧慮到了 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"cout\"\n      }), \" 同時使用可能產生的潛在問題，因此 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 會「flush」\", _jsx(_components.code, {\n        children: \"cout\"\n      }), \"。什麼是 flush 呢？想像輸出就像是 C++ 要發薪水給終端機，C++ 通常都認為終端機是一個需要每天用錢的人，所以他每天都走到終端機面前發給他薪水；但現實生活中，薪水通常都是一個月一個月在發的，如果 C++ 每天都要特別花時間走到終端機面前給他薪水的話，與蒐集起來一口氣發一個月的薪水相比足足就多花了三十倍的時間在走路！這裡，「走過去發薪水」的動作正是我們正在比喻的「flush」。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這也是為什麼 flush 對速度的影響這麼大，因為 C++ 每次都得花心思讓終端機收到輸出，而透過 \", _jsx(_components.code, {\n        children: \"cin.tie(nullptr)\"\n      }), \" 解開 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"cout\"\n      }), \" 的綁定，就可以將每次動作都 flush 的這件事取消，也就是讓 C++ 先把輸出蒐集起來到一定的量後、再一口氣輸出給終端機，進而大大增加速度！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"拿這題作為例子，如果輸入是\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"plaintext\",\n      lineno: \"false\",\n      code: \"3\\n1\\n2\\n3\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在下面這張圖中，左圖顯示了加上 \", _jsx(_components.code, {\n        children: \"cin.tie(nullptr)\"\n      }), \" 後在終端機輸入的結果、右圖則是沒有加上的結果，讀者可以想一下「每次輸入就輸出」和「全部輸入完才一次輸出」的差別來理解這兩張圖。\"]\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/ImplementationKnowledge/basic_knowledge/figure/flush.png\",\n      width: \"500\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"輸入優化？-endl\",\n      children: _jsx(_components.code, {\n        children: \"endl\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"加了 \", _jsx(_components.code, {\n        children: \"ios::sync_with_stdio(false), cin.tie(nullptr);\"\n      }), \" 還是 TLE 嗎？你的程式是不是這樣的呢？\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    ios::sync_with_stdio(false), cin.tie(nullptr);\\n    int n;\\n    cin >> n;\\n    while (n--) {\\n        int x;\\n        cin >> x;\\n        cout << x << endl;\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"與前面的差別在於，第 11 行的換行不是使用 \", _jsx(_components.code, {\n        children: \"\\\"\\\\n\\\"\"\n      }), \"，還是 \", _jsx(_components.code, {\n        children: \"endl\"\n      }), \"——沒錯，這兩者是有差別的！\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"endl\"\n      }), \" 到底是什麼呢？他其實是「換行」加上「flush」的意思，這裡的 flush 就是我們上面才提到的東西，也就是說，使用 \", _jsx(_components.code, {\n        children: \"endl\"\n      }), \" 就跟沒有加 \", _jsx(_components.code, {\n        children: \"cin.tie(nullptr)\"\n      }), \" 是一樣的，在比賽時千萬別誤用了。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/16/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"來做點輸入輸出的練習吧！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現在輸入 $N$ 行 $N$ 個整數，請你原封不動的把他們輸出出來。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/16/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N \\\\leq 5\\\\times 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"萬用標頭檔","depth":1,"code":"萬用標頭檔"},{"text":"命名空間","depth":1,"code":"命名空間"},{"text":"輸入優化？","depth":1,"code":"輸入優化？"},{"text":"endl","depth":2,"code":"輸入優化？-endl"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}