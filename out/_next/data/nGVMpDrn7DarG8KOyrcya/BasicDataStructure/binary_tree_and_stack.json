{"pageProps":{"props":{"mdxPath":"guide/content/BasicDataStructure/binary_tree_and_stack/binary_tree_and_stack.mdx","code":"BasicDataStructure/binary_tree_and_stack","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"description":"一些基本證明方法","coming":false,"importance":0},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"description":"類似於「水會不斷往外擴散」的搜尋方式，具有使用最少步數達成目標的特殊效果。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"description":"演算法設計的經典手法，將問題分成多個部分、分別處理後再嘗試湊出完整問題的答案。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"description":"用遞迴的方式找出所有可能性，包含暴力枚舉、剪枝、在迷宮中找到路徑、遍歷一棵樹。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"倍增法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo","AlgorithmTechnique/dc"],"description":"一種特殊的演算法設計手法。","coming":false,"importance":"4"},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"description":"那些 C++ 已經幫你寫好的功能。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"description":"在「答案上」執行二分搜尋法。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"description":"最主流用來評估程式效率的方式。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"description":"如何將「列出所有可能性」寫成程式？有哪些常見的列舉方法？你知道即使是列舉可能性、也能進行演算法的優化嗎？","coming":false,"importance":"5"},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"何謂「演算法」？","coming":false,"importance":0},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"description":"質數、因數、十分逼近法以及大數四則運算。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"description":"介紹前綴和與差分的用處以及他們的關聯。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"程式設計中最重要的概念之一。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter","WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"description":"何謂「二分搜尋法」？他的原理為何？有什麼內建的函式能使用？","coming":false,"importance":"5"},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"description":"介紹各種不同「排序」的方法。","coming":false,"importance":"3"},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"description":"圖像化的枚舉方法。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"description":"利用題目單調性來加速演算法的一種枚舉方法。","coming":false,"importance":"5"},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"description":"何謂「二元樹」？何謂「二元搜尋樹」？","coming":false,"importance":"4"},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"description":"二元樹的進階應用、與 Stack 的關係。","coming":false,"importance":"3"},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"description":"介紹 Heap 和他相對應的內建函式。","coming":false,"importance":"5"},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"description":"何謂「資料結構」？","coming":false,"importance":0},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"description":"C++ 內建容器的御用「指標」。","coming":false,"importance":"3"},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"description":"介紹 Linked List 和他相對應的內建函式。","coming":false,"importance":"3"},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"description":"介紹 C++ 內建的 `set` 與 `map` 的使用方法。","coming":false,"importance":"5"},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"description":"介紹 Stack、Queue 與 Deque 和他們相對應的內建函式。","coming":false,"importance":"5"},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"description":"對雜湊的基礎認識，以及 C++ 內建的 `unordered_set` 與 `unordered_map` 的使用方法。","coming":false,"importance":"2"},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"description":"介紹 C++ 內建的 `vector` 的使用方法。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"如果真正構造出動態規劃的解答，而不是獲得單一的數值？","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"description":"在動態規劃演算法上結合一些學過的技巧來加速演算法效率。","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"用現實的例子引導出動態規劃的概念，故意先不給定義","coming":false,"importance":0},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"description":"利用動態規劃中的一道經典問題來認識不同的動態規劃解題方法。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"description":"使用多個參數來表達動態規劃演算法的狀態。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"使用區間做為狀態的動態規劃題目。","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"description":"動態規劃中的一種既簡潔又能省記憶體的實作方式。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"description":"動態規劃的常用術語和基本的解題思路。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"複習一遍目前所學，了解設計動態規劃演算法利用到的題目特性為何。","coming":false,"importance":"3"},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"description":"從線性遞迴問題開始認識動態規劃。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"description":"動態規劃的兩種實作方式。","coming":false,"importance":"5"},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":true,"title":"樹","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":true,"title":"拓撲排序","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"description":"模運算、同餘的概念、快速冪與質數篩法。","coming":false,"importance":"5"},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"description":"費馬小定理、歐拉函數、歐拉定理、模逆元與擴展歐幾里得演算法","coming":false,"importance":"5"},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"description":"一種用來維護「集合合併資訊」的資料結構。","coming":true,"importance":"5"},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"description":"認識單調隊列的技巧以及這個技巧能解決的題目類型。","coming":false,"importance":"5"},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"description":"example description","coming":false,"importance":0},{"code":"Game/easy_game","article":"easy_game","topic":"Game","chapter":null,"valid":true,"title":"初探賽局","authors":["baluteshih"],"contributors":[],"prerequisites":["Game/intro"],"description":"介紹那些最簡單的賽局問題。","coming":true,"importance":"3"},{"code":"Game/intro","article":"intro","topic":"Game","chapter":null,"valid":true,"title":"賽局導論","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"何謂演算法競賽中的賽局？","coming":true,"importance":0},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 III","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/unintuitive_greedy","BasicDataStructure/set_map","BasicAlgorithm/partial_sum","BasicAlgorithm/binary_search_answer"],"description":"了解基本的貪心演算法優化與包裝。","coming":false,"importance":"5"},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"description":"介紹最基本的「貪心演算法」想法。","coming":false,"importance":"5"},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"description":"學會做出正確的貪心選擇、以及檢驗其正確性。","coming":false,"importance":"5"},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"description":"介紹在我們的網站中「章節」和「主題」的意義何在。","coming":false,"importance":0},{"code":"Guide/importance","article":"importance","topic":"Guide","chapter":"I","valid":true,"title":"文章重要等級","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/chapters"],"description":"教大家每篇文章上的重要等級意義為何","coming":true,"importance":0},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"description":"我們的講義沒有教大家語法，因此我們在此提供一些學習資源。","coming":false,"importance":0},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"description":"教你如何正確透過我們的網站學習。","coming":false,"importance":0},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"description":"看不懂講義文章中的數學符號嗎？來這邊查查看！","coming":false,"importance":0},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"description":"如何正確服用我們講義中的習題。","coming":false,"importance":0},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"description":"就是 Q&A。","coming":false,"importance":0},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"description":"在著手寫資訊競賽的程式之前，你一定得知道……","coming":false,"importance":"5"},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"description":"寫程式也得認識一下程式是怎麼產生的。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"description":"你知道 0.1 + 0.2 不等於 0.3 嗎？","coming":true,"importance":"3"},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"description":"那些常見的程式競賽輸入格式。","coming":false,"importance":"4"},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"description":"好用的語法糖，又稱作「參考」。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"description":"好用的語法糖，讓你的迴圈寫得更簡潔。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Structured binding","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased"],"description":"好用的語法糖，讓你不用再打出 `first` 和 `second`。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"description":"那些關於 C++ 變數宣告、和儲存方式的知識。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"description":"介紹一些在競賽程式中常使用的變數宣告方法。","coming":false,"importance":"3"},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"description":"初學程式找不到 bug 嗎？來看看這些新手常犯的錯誤。","coming":false,"importance":"3"},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"description":"","coming":false,"importance":0},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"description":"編譯器噴一堆錯誤怎麼辦？我們教你怎麼看！","coming":false,"importance":"3"},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":true,"title":"偽指標","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/linked_list"],"description":"一種易於理解的指標實作方式。","coming":false,"importance":"3"},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"description":"資訊競賽到底是什麼？有趣在哪？又有什麼用呢？","coming":false,"importance":0},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹各種資訊競賽的規則與他們的差異。","coming":false,"importance":"5"},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹常見的資訊競賽線上練習系統。","coming":false,"importance":"4"},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹其他對學習競賽有幫助的優質學習資源。","coming":false,"importance":0},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"description":"那些關於練習和準備比賽的策略。","coming":false,"importance":"3"},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"description":"介紹在台灣可以參加的資訊競賽。","coming":false,"importance":"5"}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/importance","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"],"description":"剛認識我們嗎？就讓我們來場自我介紹吧！"},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"],"description":"對何謂「資訊競賽」還很陌生嗎？你一定要來了解看看！"},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"],"description":"那些對寫程式非常有幫助的工具。"},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"],"description":"我們會教你如何把程式寫得好、寫得穩。"},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"],"description":"一切演算法的基礎，不可或缺的知識們。"},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"],"description":"一切資料結構的基礎，不可或缺的知識們。"},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"],"description":"了解貪心演算法的思路以及認識各種經典問題。"},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"],"description":"認識那些在競賽程式中會遇到的基本數學問題。"},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"],"description":"在各種演算法中被廣泛使用的技巧。"},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"],"description":"一步步帶你認識動態規劃概念、並了解基本的動態規劃設計與優化方法。"},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"],"description":"認識演算法競賽中那些被廣泛用來解題的資料結構。"},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"],"description":"認識圖論的基本術語以及那些經典問題。"}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","icon":"door","iconColor":"amber-600","description":"讓你認識什麼是資訊競賽，並簡單介紹在程式競賽你需要具備的基本知識、還有我們這個網站的用途。","number":"I","title":"初來乍到","contents":["Guide/learning","Guide/chapters","Guide/importance","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","icon":"sprout","iconColor":"lime-600","description":"帶你認識資訊競賽解題的基礎，並開始學習基本的資料結構與演算法。","number":"II","title":"新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","icon":"stairs","iconColor":"blue-400","description":"讓你了解設計資料結構與演算法的理念，並能正確的理解何謂「效率」以及增加效率的方式。","number":"III","title":"漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicDataStructure/binary_tree_and_stack/binary_tree_and_stack.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure, Info, Problem, Refcode, Theorem} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"二元樹可以表示很多種資料的「結構關係」，而我們在處理這種結構的時候，堆疊（Stack）往往會派上用場。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"首先，我們先來討論要如何遍歷一個二元樹中的元素。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"二元樹的表示方法\",\n      children: \"二元樹的表示方法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"想要輸出一個二元樹，有三種比較常用的方法：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"前序 (Preorder)：先輸出自己的節點，再照著前序輸出左子樹，再照著前序輸出右子樹\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"中序 (Inorder)：先照著中序輸出左子樹，再輸出自己，再照著中序輸出右子樹\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"後序 (Postorder)：先照著後序輸出左子樹，再照著後序輸出右子樹，再輸出自己\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設用這個樹來當例子：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/traversal.png\",\n      width: \"200\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那三種順序分別為：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"前序：$4, 2, 1, 3, 5, 7, 6$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"中序：$1, 2, 3, 4, 5, 6, 7$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"後序：$1, 3, 2, 6, 7, 5, 4$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"可以觀察到，中序的數字是從小到大排序的，因此這棵樹是一個二元搜尋樹。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那麼，如果我們只有前序的陣列，而我們已知這棵樹就是二元搜尋樹了，那有沒有辦法還原出這棵樹的長相呢？\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"從前序還原一棵二元搜尋樹\",\n      children: \"從前序還原一棵二元搜尋樹\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們按照前序的方式，一個個把遇到的點畫出來。首先，前序陣列的第一個點一定是根節點。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/preorder_0.png\",\n      width: \"50\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"下一個數字是 $2$，因為他比 $4$ 小，所以他一定是接在 $4$ 的左邊。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/preorder_1.png\",\n      width: \"150\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現在我們要考慮 $2$ 底下的點。下一個數字是 $1$，他比 $2$ 小所以在左邊。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/preorder_2.png\",\n      width: \"250\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現在我們要考慮 $1$ 底下的點。下一個數字是 $3$。我們發現 $3$ 比 $1$ 大，但是他同時也比 $2$ 大，所以他應該要接在 $2$ 的右邊。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/preorder_3.png\",\n      width: \"250\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"接下來的部份以此類推。可以發現，每一個新的數字都只有一個可以放的位置，而且他一定會跟原本的樹連邊（除了第一個點以外）。所以從前序還原整棵樹的方法，其實就是依序把每一個數字插入到這棵樹上！\"\n    }), \"\\n\", _jsx(Theorem, {\n      type: \"theorem\",\n      number: \"1\",\n      children: _jsx(_components.p, {\n        children: \"給定一棵二元搜尋樹的前序遍歷，假設所有元素都相異，那麼一定能還原出唯一的樹。\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣的方法行得通，不過我們之前有學過，當二元樹非常不平衡的時候，每一次插入的複雜度會是 $O(N)$。應該要有更快的方法才對……\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"回顧一下前面的方法，每次增加一個點的時候，我們會有一些可能的「候選位置」。如下圖：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/stack_0.png\",\n      width: \"300\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"此時我們可以根據新的點的數值，判斷他要放在哪一個侯選位置（紅色圈圈）上。那我們把 $3$ 加進去之後，會有什麼改變呢？\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/stack_1.png\",\n      width: \"300\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"注意到，因為 $3$ 已經接在 $2$ 的右邊了，所以 $2$ 已經處理完他的左子樹中所有的節點，而 $1$ 底下也不會有任何點了！我們可以用藍色的圈圈來表示「後面的數字有可能是他的小孩」的點。接下來我們再把 $5$ 加入到樹中：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/stack_2.png\",\n      width: \"300\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"同樣的道理，因為 $5$ 接在 $4$ 的右邊，這就代表 $4$ 的左子樹已經處理完成，因此接下來的點都一定在 $5$ 的底下。因此，我們只需要想辦法維護藍色的點，每次新增的時候選擇某個藍點底下插入，並且更新藍點的集合，就能成功還原這棵樹！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"還不是很懂沒關係，直接來看看程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"// 假設有 n 個數字，編號為 1 到 n\\nint pre[n]; // pre[i] 是前序第 i 項\\n// 因為我們等一下需要拿倒數第二個東西，所以用 vector 來當作 stack\\nvector<int> stk;\\nint lef[n + 1] = {}, rig[n + 1] = {}; // lef[i], rig[i] 是 i 的左、右子節點\\nfor (int i = 0; i < n; i++) {\\n    if (i == 0) { //根節點\\n        stk.push_back(pre[i]);\\n        continue;\\n    }\\n    while ((int)stk.size() >= 2 && pre[i] > stk[(int)stk.size() - 2]){\\n        // pre[i] 不可能是 stk.back() 的小孩\\n        // stk.back() 將來也不會有新的小孩\\n        stk.pop_back(); \\n    }\\n    //此時 pre[i] 是 stk.back() 的小孩\\n    if (pre[i] < stk.back()) { // 要放在左邊\\n        lef[stk.back()] = pre[i];\\n    } else { // 要放在右邊\\n        rig[stk.back()] = pre[i];\\n        stk.pop_back(); // stk.back() 以後不會有新的小孩\\n    }\\n    stk.push_back(pre[i]); // pre[i] 加入到藍點\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這個作法運用到一個性質，藍點的數值從上到下的話一定會遞減！為什麼呢？藍點的意義也可以想成是「可能會在右小孩新增節點的人」。因此一個藍點不可能在右邊有小孩，所以下面的藍點一定會更小。同樣的道理，當我們在某個藍點 $x$ 的右邊新增小孩時，$x$ 以及 $x$ 下面的所有點都不會是藍點了，因此我們會把他從 \", _jsx(_components.code, {\n        children: \"stk\"\n      }), \" 移除。這就表示，藍點之間自然形成了一個堆疊（Stack）的資料結構。\"]\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"上面的方法同時告訴我們，給定一個二元樹的前序和中序（不一定要是二元搜尋樹），一定能夠還原這棵樹。因為我們可以利用中序遍歷把數字重新編號為 $1$ 到 $n$，然後做一樣的事情。\"\n      })\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1204\",\n      src: \"TIOJ 1204\",\n      name: \"樹狀的堆積結構\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/TIOJ/1204/description.mdx\",\n      importMdx: \"guide/problems/TIOJ/1204/description.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/48/\",\n      src: \"NEOJ 48\",\n      name: \"二元搜尋樹\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/NEOJ/48/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/48/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/48/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/48/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"二元樹與四則運算\",\n      children: \"二元樹與四則運算\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"相信大家都知道四則運算有一定的順序。而我們其實可以用二元樹的架構來思考要如何表示一個數學式。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/binary_tree_and_stack/figure/mafs.png\",\n      width: \"200\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"每一個節點的數值就是他的子樹的算式計算的結果。這棵樹的「中序表達式」就是原本的算式：\", _jsx(_components.br, {}), \"\\n\", \"$$4 + (5 \\\\times 2)$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果我們把這個算式的「後序表達式」寫下來的話，那麼會得到 4 5 2 $\\\\times$ $+$。這樣寫的好處是，我們可以輕鬆的從這個後序陣列計算這個算式的答案。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int num[n]; // num[i] 代表第 i 個數字（如果不是運算子的話）\\nint type[n]; // type[i] == 0 代表是數字， type[i] == 1,2,3,4 代表是運算子 +,-,*,/\\nstack<int> stk;\\nfor (int i = 0; i < n; i++) {\\n    if (type[i] == 0) {\\n        stk.push(num[i]);\\n    } else {\\n        // 將 Stack 上面兩個數字拿出來，把運算結果放回去\\n        // 注意順序！\\n        int b = stk.top();\\n        stk.pop();\\n        int a = stk.top();\\n        stk.pop();\\n        int result;\\n        if (type[i] == 1) result = a + b;\\n        else if (type[i] == 2) result = a - b;\\n        else if (type[i] == 3) result = a * b;\\n        else result = a / b;\\n        stk.push(result);\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以，我們如果要計算一個算式，首先可以把他轉成後序的形式，再用上面的方法算出。要怎麼轉成後序呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"首先，算式裡的每一個元素（數字或運算子）都是一個節點，而算式的順序是那棵樹的中序。每個節點會有一個「優先度」，而這個優先度會告訴我們那個點應該放在哪裡。根據四則運算的規則，先被計算的東西應該要放在比較下面的地方（像是上面的圖， $\\\\times$ 被放在 $+$ 的下面）。和前面的概念一樣，如果一個優先度較低的點（$+$）出現了，那就代表他會覆蓋掉優先度較高（$\\\\times$）的點。因此我們一樣可以維護一個 Stack，裡面存著尚未確定兩邊計算結果的點。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int num[n]; //num[i] 代表第 i 個數字（如果不是運算子的話）\\nint type[n]; //type[i] == 0 代表是數字， type[i] == 1,2,3,4 代表是運算子 +,-,*,/\\n             //現在的陣列是中序\\nstack<int> stk;\\n\\nvector<int> post_num, post_type; //後序的結果\\nfor (int i = 0; i < n; i++) {\\n    if (type[i] == 0) {\\n        //數字優先序最高，直接放到後序\\n        post_num.push_back(num[i]);\\n        post_type.push_back(0);\\n    } else {\\n        //假設 +- 優先度相同， */ 優先度相同，所以從左至右計算\\n        //因為左至右計算，所以寫 <=\\n        while (!stk.empty() && (type[i] - 1) / 2 <= (stk.top() - 1) / 2) {\\n            //把 stack pop 掉\\n            post_type.push_back(stk.top());\\n            post_num.push_back(0);\\n            stk.pop();\\n        }\\n        stk.push(type[i]);\\n    }\\n}\\nwhile (!stk.empty()) { //還在 stack 的人依序清空\\n    post_type.push_back(stk.top());\\n    post_num.push_back(0);\\n    stk.pop();\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=a664\",\n      src: \"ZeroJudge a664\",\n      name: \"四則運算\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/ZeroJudge/a664/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/a664/description.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1204/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"一個二元樹是一個「樹狀的堆積結構」代表：任何非根節點（non-root node）的值都比其父節點（parent node）的數值還要大。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現在給你某棵「樹狀堆積結構」的中序表示法（in-order），請求出它的前序表示法（pre-order）。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/48/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給你一個二元搜尋樹前序遍歷的結果，請你輸出此二元搜尋樹後序遍歷的結果。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/48/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq N \\\\leq 2000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$0 \\\\leq k_i < 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"所有節點的值皆相異\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/a664/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"給定某個包含 \", _jsx(_components.code, {\n        children: \"+\"\n      }), \", \", _jsx(_components.code, {\n        children: \"-\"\n      }), \", \", _jsx(_components.code, {\n        children: \"*\"\n      }), \", \", _jsx(_components.code, {\n        children: \"/\"\n      }), \", \", _jsx(_components.code, {\n        children: \"()\"\n      }), \" 的算式，請求出計算的結果。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hint: 想想看括號的情形要怎麼辦！\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"二元樹的表示方法","depth":1,"code":"二元樹的表示方法"},{"text":"從前序還原一棵二元搜尋樹","depth":1,"code":"從前序還原一棵二元搜尋樹"},{"text":"二元樹與四則運算","depth":1,"code":"二元樹與四則運算"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}