{"pageProps":{"props":{"mdxPath":"guide/content/AlgorithmTechnique/dc/dc.mdx","code":"AlgorithmTechnique/dc","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"description":"一些基本證明方法","coming":false,"importance":0},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"description":"類似於「水會不斷往外擴散」的搜尋方式，具有使用最少步數達成目標的特殊效果。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"description":"演算法設計的經典手法，將問題分成多個部分、分別處理後再嘗試湊出完整問題的答案。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"description":"用遞迴的方式找出所有可能性，包含暴力枚舉、剪枝、在迷宮中找到路徑、遍歷一棵樹。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"倍增法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo","AlgorithmTechnique/dc"],"description":"一種特殊的演算法設計手法。","coming":false,"importance":"4"},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"description":"那些 C++ 已經幫你寫好的功能。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"description":"在「答案上」執行二分搜尋法。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"description":"最主流用來評估程式效率的方式。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"description":"如何將「列出所有可能性」寫成程式？有哪些常見的列舉方法？你知道即使是列舉可能性、也能進行演算法的優化嗎？","coming":false,"importance":"5"},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"何謂「演算法」？","coming":false,"importance":0},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"description":"質數、因數、十分逼近法以及大數四則運算。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"description":"介紹前綴和與差分的用處以及他們的關聯。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"程式設計中最重要的概念之一。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter","WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"description":"何謂「二分搜尋法」？他的原理為何？有什麼內建的函式能使用？","coming":false,"importance":"5"},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"description":"介紹各種不同「排序」的方法。","coming":false,"importance":"3"},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"description":"圖像化的枚舉方法。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"description":"利用題目單調性來加速演算法的一種枚舉方法。","coming":false,"importance":"5"},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"description":"何謂「二元樹」？何謂「二元搜尋樹」？","coming":false,"importance":"4"},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"description":"二元樹的進階應用、與 Stack 的關係。","coming":false,"importance":"3"},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"description":"介紹 Heap 和他相對應的內建函式。","coming":false,"importance":"5"},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"description":"何謂「資料結構」？","coming":false,"importance":0},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"description":"C++ 內建容器的御用「指標」。","coming":false,"importance":"3"},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"description":"介紹 Linked List 和他相對應的內建函式。","coming":false,"importance":"3"},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"description":"介紹 C++ 內建的 `set` 與 `map` 的使用方法。","coming":false,"importance":"5"},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"description":"介紹 Stack、Queue 與 Deque 和他們相對應的內建函式。","coming":false,"importance":"5"},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"description":"對雜湊的基礎認識，以及 C++ 內建的 `unordered_set` 與 `unordered_map` 的使用方法。","coming":false,"importance":"2"},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"description":"介紹 C++ 內建的 `vector` 的使用方法。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"如果真正構造出動態規劃的解答，而不是獲得單一的數值？","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"description":"在動態規劃演算法上結合一些學過的技巧來加速演算法效率。","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"用現實的例子引導出動態規劃的概念，故意先不給定義","coming":false,"importance":0},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"description":"利用動態規劃中的一道經典問題來認識不同的動態規劃解題方法。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"description":"使用多個參數來表達動態規劃演算法的狀態。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"使用區間做為狀態的動態規劃題目。","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"description":"動態規劃中的一種既簡潔又能省記憶體的實作方式。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"description":"動態規劃的常用術語和基本的解題思路。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"複習一遍目前所學，了解設計動態規劃演算法利用到的題目特性為何。","coming":false,"importance":"3"},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"description":"從線性遞迴問題開始認識動態規劃。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"description":"動態規劃的兩種實作方式。","coming":false,"importance":"5"},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":true,"title":"樹","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":true,"title":"拓撲排序","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"description":"模運算、同餘的概念、快速冪與質數篩法。","coming":false,"importance":"5"},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"description":"費馬小定理、歐拉函數、歐拉定理、模逆元與擴展歐幾里得演算法","coming":false,"importance":"5"},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"description":"一種用來維護「集合合併資訊」的資料結構。","coming":true,"importance":"5"},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"description":"認識單調隊列的技巧以及這個技巧能解決的題目類型。","coming":false,"importance":"5"},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"description":"example description","coming":false,"importance":0},{"code":"Game/easy_game","article":"easy_game","topic":"Game","chapter":null,"valid":true,"title":"初探賽局","authors":["baluteshih"],"contributors":[],"prerequisites":["Game/intro"],"description":"介紹那些最簡單的賽局問題。","coming":true,"importance":"3"},{"code":"Game/intro","article":"intro","topic":"Game","chapter":null,"valid":true,"title":"賽局導論","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"何謂演算法競賽中的賽局？","coming":true,"importance":0},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 III","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/unintuitive_greedy","BasicDataStructure/set_map","BasicAlgorithm/partial_sum","BasicAlgorithm/binary_search_answer"],"description":"了解基本的貪心演算法優化與包裝。","coming":false,"importance":"5"},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"description":"介紹最基本的「貪心演算法」想法。","coming":false,"importance":"5"},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"description":"學會做出正確的貪心選擇、以及檢驗其正確性。","coming":false,"importance":"5"},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"description":"介紹在我們的網站中「章節」和「主題」的意義何在。","coming":false,"importance":0},{"code":"Guide/importance","article":"importance","topic":"Guide","chapter":"I","valid":true,"title":"文章重要等級","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/chapters"],"description":"教大家每篇文章上的重要等級意義為何","coming":true,"importance":0},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"description":"我們的講義沒有教大家語法，因此我們在此提供一些學習資源。","coming":false,"importance":0},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"description":"教你如何正確透過我們的網站學習。","coming":false,"importance":0},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"description":"看不懂講義文章中的數學符號嗎？來這邊查查看！","coming":false,"importance":0},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"description":"如何正確服用我們講義中的習題。","coming":false,"importance":0},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"description":"就是 Q&A。","coming":false,"importance":0},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"description":"在著手寫資訊競賽的程式之前，你一定得知道……","coming":false,"importance":"5"},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"description":"寫程式也得認識一下程式是怎麼產生的。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"description":"你知道 0.1 + 0.2 不等於 0.3 嗎？","coming":true,"importance":"3"},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"description":"那些常見的程式競賽輸入格式。","coming":false,"importance":"4"},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"description":"好用的語法糖，又稱作「參考」。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"description":"好用的語法糖，讓你的迴圈寫得更簡潔。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Structured binding","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased"],"description":"好用的語法糖，讓你不用再打出 `first` 和 `second`。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"description":"那些關於 C++ 變數宣告、和儲存方式的知識。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"description":"介紹一些在競賽程式中常使用的變數宣告方法。","coming":false,"importance":"3"},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"description":"初學程式找不到 bug 嗎？來看看這些新手常犯的錯誤。","coming":false,"importance":"3"},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"description":"","coming":false,"importance":0},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"description":"編譯器噴一堆錯誤怎麼辦？我們教你怎麼看！","coming":false,"importance":"3"},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":true,"title":"偽指標","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/linked_list"],"description":"一種易於理解的指標實作方式。","coming":false,"importance":"3"},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"description":"資訊競賽到底是什麼？有趣在哪？又有什麼用呢？","coming":false,"importance":0},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹各種資訊競賽的規則與他們的差異。","coming":false,"importance":"5"},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹常見的資訊競賽線上練習系統。","coming":false,"importance":"4"},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹其他對學習競賽有幫助的優質學習資源。","coming":false,"importance":0},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"description":"那些關於練習和準備比賽的策略。","coming":false,"importance":"3"},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"description":"介紹在台灣可以參加的資訊競賽。","coming":false,"importance":"5"}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/importance","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"],"description":"剛認識我們嗎？就讓我們來場自我介紹吧！"},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"],"description":"對何謂「資訊競賽」還很陌生嗎？你一定要來了解看看！"},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"],"description":"那些對寫程式非常有幫助的工具。"},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"],"description":"我們會教你如何把程式寫得好、寫得穩。"},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"],"description":"一切演算法的基礎，不可或缺的知識們。"},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"],"description":"一切資料結構的基礎，不可或缺的知識們。"},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"],"description":"了解貪心演算法的思路以及認識各種經典問題。"},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"],"description":"認識那些在競賽程式中會遇到的基本數學問題。"},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"],"description":"在各種演算法中被廣泛使用的技巧。"},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"],"description":"一步步帶你認識動態規劃概念、並了解基本的動態規劃設計與優化方法。"},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"],"description":"認識演算法競賽中那些被廣泛用來解題的資料結構。"},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"],"description":"認識圖論的基本術語以及那些經典問題。"}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","icon":"door","iconColor":"amber-600","description":"讓你認識什麼是資訊競賽，並簡單介紹在程式競賽你需要具備的基本知識、還有我們這個網站的用途。","number":"I","title":"初來乍到","contents":["Guide/learning","Guide/chapters","Guide/importance","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","icon":"sprout","iconColor":"lime-600","description":"帶你認識資訊競賽解題的基礎，並開始學習基本的資料結構與演算法。","number":"II","title":"新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","icon":"stairs","iconColor":"blue-400","description":"讓你了解設計資料結構與演算法的理念，並能正確的理解何謂「效率」以及增加效率的方式。","number":"III","title":"漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/AlgorithmTechnique/dc/dc.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ContentReference, Figure, Info, Problem, Refcode, Spoiler} = _components;\n  if (!ContentReference) _missingMdxReference(\"ContentReference\", true);\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Spoiler) _missingMdxReference(\"Spoiler\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"分治法的「分治」指的是「分而治之」（divide and conquer），顧名思義就是把問題分成幾個部分再做。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"把問題切開\",\n      children: \"把問題切開\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當要一次做完整個題目不太容易的時候，試著把問題切成一些規模比較小，但形式相同的問題，再各自獨立解決，或許會是一個有效的方法。\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/124/\",\n      src: \"NEOJ 124\",\n      name: \"王老先生\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NEOJ/124/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/124/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/124/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/124/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"$N$ 一定是形如 $2^k$ 的數字，似乎就在暗示我們要把 $N \\\\times N$ 的棋盤分成 4 個 $(N/2) \\\\times (N/2)$ 的區域，要是我們可以把這 4 個 $2^{k-1} \\\\times 2^{k-1}$ 的區域都個別填滿，那全部拼起來就是全部的答案了！不幸的是，要把 4 個區域分別填滿是不可能的，因為除了 $(X,Y)$ 所在的區域以外的 3 個區域，都有 $2^{k-1} \\\\times 2^{k-1}$ 個格子要鋪，而這個數量很顯然不是 $3$ 的倍數，因此我們勢必需要有一些跨越區域的積木。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那問題就麻煩了，要是我們隨便亂放一些跨越區域的積木，讓每個區域的格子數都變成 $3$ 的倍數，也不見得每個區域都鋪得了。我們先來看看一些 $N$ 小的狀況：$N=1$ 的話什麼都不用做。如果 $N=2$，那分出來的 4 個 $1 \\\\times 1$ 區域，有 $(X,Y)$ 的那一個就是只有 $(X,Y)$，不用也不能鋪積木，所以不用理它，而另外 3 個區域就拿一個積木一起鋪起來就解決了。而 $N=4$ 的狀況，分出來的 4 個 $2 \\\\times 2$ 區域裡，有 $(X,Y)$ 的那一個，自己是一個 $2 \\\\times 2$ 的問題，所以就用一個積木把剩下那 3 格鋪起來就好。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/AlgorithmTechnique/dc/figure/neoj124-0.png\",\n      width: \"300px\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不管 $(X,Y)$ 在它那個區域的哪一格，補上一個積木後那個區域當然就是被填滿了。剩下的部分，試一下之後就會發現唯一的填法是這樣：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/AlgorithmTechnique/dc/figure/neoj124-1.png\",\n      width: \"300px\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"只有中間那塊紫色積木跨越了不同區域，剩下的積木都在同一個區域裡。要是我們想成是先放下中間那塊積木之後，再去分別填滿 3 個區域的話，就會發現這 3 個區域都變成了「邊長是 2 的冪次、有一格被挖掉」的問題，所以只要用 $2 \\\\times 2$ 的作法就結束了。這樣我們就解決了 $N=4$ 的狀況。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓 $N$ 再大一點點，現在 $N=8$，分 4 塊後會得到 4 個 $4 \\\\times 4$ 的區域，有 $(X,Y)$ 的那一個自己是 $4 \\\\times 4$ 的問題，可以用剛才的方法解決，然後我們試著跟剛剛做一樣的事：在中間放一個跨越剩下 3 個區域的積木，然後那 3 個區域就各自也是一個 $4 \\\\times 4$ 的問題了！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"推廣到更大的 $N$，對於 $N=2^k$，我們的作法就是先分出 4 個 $2^{k-1} \\\\times 2^{k-1}$ 的區域，在中間放一個積木，跨越沒有 $(X,Y)$ 的那 3 個區域，然後遞迴處理 4 個區域。當我們遞迴處理一個區域的時候，那個區域跟本來題目要解決的問題是完全一樣的：邊長是 2 的冪次、有一格被挖掉，等同於我們把一個大的問題變成 4 個比較小的、一樣的問題。當問題變成 $1 \\\\times 1$ 的時候，沒有格子需要鋪，所以就不用繼續遞迴下去。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"時間複雜度乍看之下不太好算。$(X,Y)$ 作為問題的輸入，我們不用找它就可以知道它在哪裡了，我們可以 $O(1)$ 得知它在哪個區域、中間的積木要怎麼放、4 個子問題各自的 $(X,Y)$ 在哪裡，所以花費的總時間會是 $O(1)+3 \\\\times (\\\\text{解決 \\\\((N/2) \\\\times (N/2) \\\\) 問題需要的時間)}$，可以想成是每次呼叫這個解決問題的遞迴 function，就會額外花 $O(1)$ 的時間。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"每次呼叫 function 的 $N \\\\geq 2$ 時，就會多放一個積木，所以除了 $N=1$ 的 function 呼叫之外，總時間和積木數量一樣，都是 $O(N^2)$。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"呼叫 function 的 $N=1$ 時，注意到會出現 $N=1$ 的呼叫，一定是從一個 $N=2$ 的呼叫來的，而這種呼叫最多 $O(N^2)$ 個、每個會有 3 個 $N=1$ 的子問題，所以 $N=1$ 的呼叫總數是 $O(N^2)$。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，總時間複雜度就是 $O(N^2)$。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"分割與合併\",\n      children: \"分割與合併\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們已經見識到了分治法最基本的型態：把問題轉換成一些規模比較小，但是需求跟本來完全一樣的問題。不過，很多時候問題沒有那麼單純，可能不能只是單純地把問題分成一些子問題，然後各自解決、直接拼起來當成大問題的答案，而是要從子問題的答案再多做一些事情，才能得出大問題的答案。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最經典的例子就是合併排序法（mergesort），它是一種排序演算法，目標就是把一個陣列由小到大排序。要是我們直接把陣列切成兩半，兩邊各自排序後，這樣直接拼起來的結果當然不一定是整個陣列排序後應該要有的樣子，所以我們要想辦法從兩半排序好的結果，得出整個陣列排序過的結果。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設兩邊排序好的陣列分別是 $L$ 跟 $R$，那麼整個陣列裡面最小的數字，當然就是 $L$ 跟 $R$ 第一個數字裡面比較小的那個，把那個數字拔掉以後，$L$ 跟 $R$ 第一個數字比較小的那個就是整個陣列第二小的數字，如此不斷操作，直到把整個排序好的陣列找出來為止，就可以找到整個陣列排序過後的答案了。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"// 排序 arr[l], arr[l + 1], ..., arr[r]\\nvoid mergesort(int l, int r) {\\n    if (l >= r) return; // 只有 1 個東西就不必排了\\n    int mid = (l + r) / 2;\\n    mergesort(l, mid);\\n    mergesort(mid + 1, r);\\n    // 左側是 [l, mid]，右側是 [mid + 1, r]\\n    // 目前左邊剩下來的第一個元素是 lp，右邊第一個是 rp\\n    // 目前在找排序完應該要放在 arr[ptr] 的是什麼\\n    int lp = l, rp = mid + 1, ptr = l;\\n    while (lp <= mid || rp <= r) { // 還有一側沒有拿完\\n        // 左側的比較小，rp > r 代表右邊是空的，一樣小的時候優先拿左側\\n        if (rp > r || (lp <= mid && arr[lp] <= arr[rp])) {\\n            tmp[ptr] = arr[lp];\\n            ptr++; lp++;\\n        }\\n        else { // 右側的比較小\\n            tmp[ptr] = arr[rp];\\n            ptr++; rp++;\\n        }\\n    }\\n    // 把東西從暫存陣列拿回 arr\\n    for (int i = l; i <= r; i++)\\n        arr[i] = tmp[i];\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣做的話時間複雜度是什麼呢？我們把遞迴的過程畫出來的話，會像是這樣：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/AlgorithmTechnique/dc/figure/merge-0.png\",\n      width: \"500\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/AlgorithmTechnique/dc/figure/merge-1.png\",\n      width: \"500\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上面那張圖是分割陣列的過程，下面那張圖則是合併回來的過程。當我們合併兩個大小分別為 $a,b$ 的陣列時，我們只會把每個元素各拿出陣列一次，所以時間複雜度是 $O(a+b)$，因此，把一個長度為 $x$ 的陣列排序要花的時間，就是排序兩半的時間再加上 $O(x)$ 的合併時間，所以我們只要算每次呼叫這個排序函數的陣列總長，就是排序要花費的總時間了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"從這兩張圖裡可以看到，分治法的遞迴過程是一層一層的，上面那張圖是往下遞迴、下面那張圖則是遞迴完了 return 回來。畢竟我們是把陣列一直分割，所以本來陣列裡的每個元素自然只會在同一層出現剛好一次，一層的總長度就是 $O(n)$，而因為我們每次都是從中間等分成兩半，可以理解為每次遞迴呼叫的時候，長度就會除以 2，所以層數就是 $O(\\\\log n)$，每一層全部要花 $O(n)$ 的時間，總時間複雜度是 $O(n \\\\log n)$。畫出遞迴過程通常對分析時間很有幫助。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"自己新增需求\",\n      children: \"自己新增需求\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"分治法中要求的子問題答案可以不只有題目問的東西！\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1643\",\n      src: \"CSES 1643\",\n      name: \"Maximum Subarray Sum\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/CSES/1643/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1643/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1643/description.mdx\",\n      importMdx: \"guide/problems/CSES/1643/constraints.mdx\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"BasicAlgorithm/enumerate\",\n        mode: \"default\",\n        topicTitle: \"基礎演算法\",\n        articleTitle: \"枚舉\"\n      }), \"和\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"BasicDynamicProgramming/structure\",\n        mode: \"default\",\n        topicTitle: \"基礎動態規劃\",\n        articleTitle: \"動態規劃的必要元素\"\n      }), \"有提到過別種這題的作法，這題也可以用分治法做，請先遺忘別的作法。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"前面的例題中，我們做的事情是「對於子問題找出題目要求的資訊，再得出整個問題的答案」，像是題目要鋪積木我們就在一個小區域鋪積木、題目要排序我們就把半邊的陣列排序，直接在這題這麼做的話，我們按照剛才的想法把陣列切兩半，得出左半邊和右半邊的最大區間和後……就不知道要怎麼辦了，好像沒辦法用這點資訊就找到整個陣列的最大區間和。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在知道左半邊和右半邊的最大區間和後，我們唯一會漏掉的就是「跨越兩半的最大區間和」，也就是我們只要找到跨過中線的最大區間和就好了，這個區間又可以從中線分為左半和右半，左半會緊貼著左側的右界、右半會緊貼著右側的左界，兩半各自越大越好，因此跨越中線的最大區間和，就是左側的最大後綴和，再加上右側的最大前綴和。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果目前處理的區間長度是 $O(x)$，遞迴處理兩側之後，兩側的後綴和跟前綴和需要 $O(x)$ 的時間計算，因此總時間複雜度和合併排序法一樣，都是 $O(n \\\\log n)$。這樣聽起來很遜，明明就有 $O(n)$ 的作法，這個方法還比較不好寫，分治法有辦法把這個問題做到 $O(n)$ 嗎？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們剛才做的事情是「兩邊做完之後再處理跨中間的狀況」，但我們處理跨中間的狀況，實際上是問了兩個只在一側的問題：左側的最大後綴和跟右側的最大前綴和，如果我們改成在遞迴呼叫解決問題的函數時，要求它一併告訴我們自己的最大前綴和跟後綴和，那流程會是這樣：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"如果區間大小是 1，那麼最大前綴和、最大後綴和、最大區間和都是區間裡面那個唯一的數字。\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"否則，把區間分成兩半遞迴處理，然後回傳：\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"整個區間的最大區間和：\", _jsx(_components.strong, {\n              children: \"左右側最大區間和\"\n            }), \"以及\", _jsx(_components.strong, {\n              children: \"左側最大後綴和加上右側最大前綴和\"\n            }), \"的最大值。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"整個區間的最大前綴和：\", _jsx(_components.strong, {\n              children: \"左側最大前綴和\"\n            }), \"以及\", _jsx(_components.strong, {\n              children: \"左側總和加上右側最大前綴和\"\n            }), \"的較大值。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"整個區間的最大後綴和：\", _jsx(_components.strong, {\n              children: \"右側最大後綴和\"\n            }), \"以及\", _jsx(_components.strong, {\n              children: \"右側總和加上左側最大後綴和\"\n            }), \"的較大值。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"把這些合併兩側答案的方法都列出來後，會發現還需要區間總和才能知道新的最大前後綴和，當然不能暴力算一遍，不然時間複雜度不會變好，我們可以再讓每個子問題也回傳自己的區間總和，長度為 1 的區間總和也是裡面那個唯一的數字，而合併兩側區間就是直接把兩側總和相加。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣做的話，合併兩側區間、計算整個區間的答案需要花費的時間只有 $O(1)$，所以花費的總時間就是我們呼叫解決問題 function 的總次數，剛才說到遞迴過程有 $O(\\\\log n)$ 層，因為每一次呼叫都最多只會分出兩個呼叫，第一層只有 1 次呼叫，因此第 2 層最多只有 2 次呼叫、第 4 層最多只有 4 次呼叫、……，總呼叫次數大概會是 $1+2+4+8+\\\\dots+2^{\\\\log n} \\\\leq 2n$，總時間複雜度就是 $O(n)$ 了！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"盡可能把能讓子問題處理的事情丟包給子問題負責，有時就會像這樣有降低時間複雜度的效果。有些更複雜的問題裡面，計算跨越中間的答案時需要知道的資訊，也不一定像最大前後綴總和一樣可以在 $O(x)$ 這種還算快的時間算完，這時適當地把任務丟包下去就會大有助益。\"\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"讀者可能覺得這題用分治法很多此一舉，明明別種 $O(n)$ 的作法都很好寫，不過這個方法其實不是完全沒有用，以後就會知道了……\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"例題：逆序數對\",\n      children: \"例題：逆序數對\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1080\",\n      src: \"TIOJ 1080\",\n      name: \"逆序數對\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/TIOJ/1080/description.mdx\",\n      constraintsMdx: \"guide/problems/TIOJ/1080/constraints.mdx\",\n      importMdx: \"guide/problems/TIOJ/1080/description.mdx\",\n      importMdx: \"guide/problems/TIOJ/1080/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"直接利用我們一直使用的分治法想法：把要處理的陣列切一半，計算左邊的逆序數對數量、右邊的逆序數對數量，然後再計算跨越兩側的逆序數對數量，全部加起來就是整個陣列裡的逆序數對數量。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"要怎麼計算跨越兩側的逆序數對數量呢？跨越兩側就是要 $i$ 在左邊、$j$ 在右邊，然後 $s_i > s_j$，如果我們對於每個左邊的 $i$，去數有幾個右邊 $j$ 跟它形成逆序數對，那這個數量就是右邊有幾個 $j$ 滿足 $s_i > s_j$。陣列長度是 $x$ 時直接暴力做的複雜度是 $O(\\\\frac x2 \\\\times \\\\frac x2)=O(x^2)$ 當然很不好，如果我們先把右邊排序好的話，那每個左側的 $i$ 都可以用 $O(\\\\log \\\\frac x2)=O(\\\\log x)$ 的時間二分搜問出 $j$ 的數量，這樣做的時間複雜度是 $O(x \\\\log x)$，這樣多乘一個 $\\\\log x \\\\leq \\\\log n$ 感覺總時間就會也多乘上 $O(\\\\log n)$，會花上 $O(n \\\\log^2 n)$ 的時間。（雖然我們直接把 $\\\\log x$ 灌水成 $\\\\log n$，其實可以證明 $O(n \\\\log^2 n)$ 是緊的時間複雜度！）\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"注意到「把右側排序」是一個只跟右側有關的問題，所以其實可以直接丟包給子問題處理，因此我們為每次呼叫都多指派一個任務：要把陣列排序好，一邊做合併排序就可以做到了。然而要是對每個左側的 $i$ 都還是用二分搜去找右側跟它形成逆序數對的 $j$ 數量的話，還是得花 $O(x \\\\log x)$ 的時間，別忘了我們遞迴下去的時候順便把左邊也排序好了，所以問題會是「在排序好的陣列 $L,R$ 中，對 $L$ 裡的每個元素，找出 $R$ 裡面有幾個比它小的」，對於 $L$ 裡某個元素 $L_i$，$R$ 裡面比它還小的 $R_j$，一定是 $R$ 的一個前綴，找到最後一個 $<L_i$ 的 $R_j$ 就知道是有 $j$ 個了，這個問題可以用雙指針在 $O(x)$ 的時間解決。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"別急著寫雙指針，因為寫出來會跟合併排序中的合併一樣，其實比 $L_i$ 小的 $R_j$ 數量，根本就是在合併過程中，$L_i$ 被拿出來時，$R_j$ 已經被拿走的數量嘛，因此只要稍微修改合併排序的過程，就可以算出逆序數對數量了。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\\nusing namespace std;\\n\\nconst int MAXN = 100000;\\n\\nint arr[MAXN];\\n\\nint tmp[MAXN];\\nlong long ans = 0;\\nvoid solve(int l, int r) {\\n    if (l >= r) return;\\n    int mid = (l + r) / 2;\\n    solve(l, mid);\\n    solve(mid + 1, r);\\n    int lp = l, rp = mid + 1, ptr = l;\\n    while (lp <= mid || rp <= r) {\\n        // 注意 tie-break！\\n        if (rp > r || (lp <= mid && arr[lp] <= arr[rp])) {\\n            ans += rp - (mid + 1); // 加這個\\n            tmp[ptr] = arr[lp];\\n            ptr++; lp++;\\n        }\\n        else {\\n            tmp[ptr] = arr[rp];\\n            ptr++; rp++;\\n        }\\n    }\\n    for (int i = l; i <= r; i++)\\n        arr[i] = tmp[i];\\n}\\n\\nint main() {\\n    \\n    int n;\\n    int t = 0;\\n    while (cin >> n) {\\n        if (n == 0) break;\\n        ans = 0; // 開全域變數要記得初始化\\n        t++;\\n        for (int i = 0; i < n; i++) cin >> arr[i];\\n        solve(0, n - 1);\\n        cout << \\\"Case #\\\" << t << \\\": \\\" << ans << \\\"\\\\n\\\";\\n    }\\n    \\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也就比合併排序多一行，時間複雜度一樣是 $O(n \\\\log n)$。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"不單純的分子問題：快速排序法\",\n      children: \"不單純的分子問題：快速排序法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在最大區間和以及合併排序中，我們都是把要處理的區間原封不動分兩半，當成兩個子問題遞迴處理，再從兩個子問題的答案（包含另外丟包的任務）得出要處理的區間的答案。在分子問題的時候其實不一定要原封不動地分，例如做王老先生的時候我們是先放一個積木、稍微改變了子問題，再遞迴下去處理，當然分子問題之前也可以把陣列的長相改得面目全非。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"快速排序法（quicksort）是另一種排序法，當然目標也是把陣列排序。合併排序的想法是先分兩半、各自排序，然後合併，而快速排序的想法是把小的數字放到一邊、大的數字放到一邊，兩邊各自排序後，整個陣列就會自然排序好了。然而，要想把數字按照大小分成兩堆其實沒那麼容易，前面合併排序的時間複雜度可以是 $O(n \\\\log n)$，是因為我們每次都把區間等分成差不多兩半（奇數的時候大小會差 1），讓遞迴層數是 $O(\\\\log n)$，如果我們要在不排序的前提下，將數字按大小分兩堆、且兩堆差不多大，那就得找到中位數，這並不是一件輕鬆的事情，而如果隨便挑一個數字的分界線，那要是每次都不幸地選到最小的數字，本來區間長度是 $x$ 的話，左半就會只有 $1$、右半長度是 $x-1$，時間複雜度就會變成淒慘的 $n+(n-1)+\\\\dots+1=O(n^2)$！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"要想讓花費的時間盡量少，每次就得盡量挑到靠近中位數的分界線，一個方法是直接隨機選一個區間中的數字作為分界，可以感性認為取到靠近中間的數字當分界的機率很高，所以遞迴層數的期望值也是 $O(n \\\\log n)$。這個分析方法非常不嚴謹，不過這是對的，對細節有興趣的讀者可以點開下面的證明。\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      type: \"spoiler\",\n      title: \"Quicksort 期望時間複雜度的嚴謹證明\",\n      children: [_jsx(_components.p, {\n        children: \"不失一般性假設我們要排序的陣列是一個 $1 \\\\sim n$ 的排列。每個數字都有恰好一個被選作當分界點的時候，「每次從區間裡隨機選一個數當分界點」其實等同於「一開始就先幫每個數字決定一個隨機的優先度（也是 $1 \\\\sim n$ 的排列），每次從區間裡選擇優先度最低的數字當分界點」，令數字 $i$ 的優先度是 $p_i$。假設現在是數字 $i$ 被選為區間的分界點，所以它的優先度是區間裡最小的，而另一個數字 $j$ 也在這個區間裡的條件是「$i$ 跟 $j$ 從未被別的分界點分開過」，也就是數值在 $i$ 到 $j$ 之內的數字，優先度都要比 $i$ 更大（$j$ 的優先度也要比 $i$ 大）。令 $C$ 是滿足「$i$ 或 $j$ 當分界點時，另一個人在那個區間裡」的 $i,j$ 數量（$i < j$），$C+n$ 就是每次呼叫函數的區間總長度。\"\n      }), _jsxs(_components.p, {\n        children: [\"我們把「$i$ 或 $j$ 當分界點時，另一個人在那個區間裡」的隨機變數叫作 $C_{i,j}$，是 1 代表這件事情發生了，是 0 則代表沒有發生。根據 linearity of expectation，\", _jsx(_components.br, {}), \"\\n\", \"\\\\[ \\\\mathbb{E}[C]=\\\\mathbb{E}\\\\left[\\\\sum_{i=1}^n \\\\sum_{j=i+1}^n C_{i,j}\\\\right] = \\\\sum_{i=1}^n \\\\sum_{j=i+1}^n \\\\mathbb{E}\\\\left[C_{i,j}\\\\right] \\\\]\", _jsx(_components.br, {}), \"\\n\", \"$C_{i,j}=1$ 代表 $i$ 或 $j$ 是 $i,i+1,\\\\dots,j$ 之中優先度最小的，而優先度是 $1 \\\\sim n$ 的排列，我們可以只考慮 $i$ 到 $j$ 之間數字的優先度，當作是一個 $1 \\\\sim j-i+1$ 的排列，$p_i$ 或 $p_j$ 是最小值的排列各有 $(j-i)!$ 種，所以它們是最小值的機率各自是 $(j-i)!/(j-i+1)!=1/(j-i+1)$，$\\\\mathbb{E}[C_{i,j}]$ 就是 $2/(j-i+1)$。\", _jsx(_components.br, {}), \"\\n\", \"\\\\[ \\\\sum_{i=1}^n \\\\sum_{j=i+1}^n \\\\mathbb{E}\\\\left[C_{i,j}\\\\right] = \\\\sum_{i=1}^n \\\\sum_{j=i+1}^n \\\\frac{2}{j-i+1} \\\\leq 2\\\\sum_{i=1}^n \\\\sum_{j=1}^n \\\\frac{1}{j} \\\\]\", _jsx(_components.br, {}), \"\\n\", \"$\\\\sum_{j=1}^n \\\\frac{1}{j}$ 是調和級數（見\", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicMath/basicalgo\",\n          mode: \"default\",\n          topicTitle: \"基礎數學\",\n          articleTitle: \"常用數學演算法\"\n        }), \"），複雜度是 $O(\\\\log n)$，因此 $\\\\mathbb{E}[C] = O(n \\\\log n)$。\"]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"看了這麼多例子，我們已經知道分治法的基本精神了：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"把問題分成一些子問題。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"遞迴地解決子問題。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"用子問題的答案拼湊出整個問題的答案。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在設計分治演算法的時候，可以先明確規定好一個問題要長什麼樣子、做完之後應該要給出什麼答案，通常「問題的樣子」就和題目給的問題長得一樣，不過做完問題之後我們的函式要回傳的答案除了本來題目要求的答案之外，可以再包含更多資訊，像是在算逆序數對時，我們的解決問題函式不僅回傳了逆序數對數量，還得要把那個區間排序好。先規定好這些「任務」之後，就可以先假裝遞迴解決子問題後，我們要求的任務一定會被完成，然後再去想要怎麼從子問題完成的任務結果，來完成大問題的任務。要是發現資訊不夠多，除了自己算出來之外，也可以把一些事情加入任務裡，作為任務的一部分，然後丟包給子問題做。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"看完上面的例子，讀者有可能不會意識到分治法的重要性，畢竟剛才的例子幾乎都有別的作法的替代品：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"合併排序、快速排序都是在排序，只要呼叫 \", _jsx(_components.code, {\n          children: \"std::sort\"\n        }), \" 就解決了，根本就不用自己分治嘛。\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"最大區間和有好幾種時間複雜度也是 $O(n)$，而且還好寫很多的作法，那麼麻煩幹嘛？\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如果讀者聽說過像是 BIT、線段樹這類的資料結構，這些資料結構支援「修改一個陣列的一個數值、查詢區間總和」，可能會發現要算逆序數對，只要從左邊看到右邊，用資料結構維護「每種數字出現的次數」，看到一個數字時，只要查比它大的數字出現過幾次、加到總答案去，就可以得到逆序數對數量了。所以，其實也不一定需要分治。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"好像只有王老先生那種分治構造題才不太好避免分治。的確，很多可以用分治法解決的問題，都有「表面上不是分治」的替代作法，為什麼是說「表面上」呢？因為分治法其實是演算法的設計精神，很多時候會被隱藏在其他有名字的東西裡頭，像是線段樹這個資料結構，其實完全就是基於分治的理念，如果讀者不知道什麼是線段樹，還有一些更簡單的例子：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"二分搜尋法（請看\", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicAlgorithm/searching\",\n          mode: \"default\",\n          topicTitle: \"基礎演算法\",\n          articleTitle: \"搜尋\"\n        }), \"）其實也是分治！只是我們把搜尋範圍分成兩半以後，有一半不用做，只要做有答案的那一半就好。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"快速冪（請看\", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicMath/basicalgo\",\n          mode: \"default\",\n          topicTitle: \"基礎數學\",\n          articleTitle: \"常用數學演算法\"\n        }), \"）其實也是分治！$a^{2k}$ 會被分成 $a^k \\\\times a^k$ 兩個子問題的答案相乘，兩個子問題一模一樣，所以只做一次就好。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那最大區間和有別的作法要怎麼解釋？DP 或前綴和的作法總不是分治了吧！確實其他作法就比較沒有分治的成分在，但分治法用在這個問題可是很厲害的，像是下面習題放的「最大連續和？」，問的是多次查詢一個指定區間之中，最大的區間和，這一類的問題最常用的方法就是使用分治法（或基於分治法的資料結構，其實這題更常會被用線段樹做掉，但其實是可以純使用分治法的）了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現階段讀者也有可能真的還感受不到分治法的重要性，但可以先把「很多演算法背後都是分治法」這件事記在心裡，往後學到更多技巧時，有時就會發現背後的概念就只是分治法，熟練分治法的話也可以更快速地學會這些技巧、學習那些技巧也能幫助理解分治法。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/858/\",\n      src: \"NEOJ 858\",\n      name: \"多項式乘法\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/NEOJ/858/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/858/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/858/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/858/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1994\",\n      src: \"TIOJ 1994\",\n      name: \"冰塊線\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/TIOJ/1994/description.mdx\",\n      constraintsMdx: \"guide/problems/TIOJ/1994/constraints.mdx\",\n      importMdx: \"guide/problems/TIOJ/1994/description.mdx\",\n      importMdx: \"guide/problems/TIOJ/1994/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=f315\",\n      src: \"APCS 2020/10 P4\",\n      name: \"低地距離\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/APCS/202010P4/description.mdx\",\n      constraintsMdx: \"guide/problems/APCS/202010P4/constraints.mdx\",\n      importMdx: \"guide/problems/APCS/202010P4/description.mdx\",\n      importMdx: \"guide/problems/APCS/202010P4/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/127/\",\n      src: \"NEOJ 127\",\n      name: \"太陽軍團\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/NEOJ/127/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/127/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/127/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/127/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/788/\",\n      src: \"NEOJ 788\",\n      name: \"好的連續子序列\",\n      expanded: \"false\",\n      difficulty: \"4\",\n      descriptionMdx: \"guide/problems/NEOJ/788/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/788/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/788/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/788/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/249/\",\n      src: \"NEOJ 249\",\n      name: \"最大連續和？\",\n      expanded: \"false\",\n      difficulty: \"4\",\n      descriptionMdx: \"guide/problems/NEOJ/249/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/249/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/249/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/249/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://qoj.ac/problem/10091\",\n      src: \"QOJ 10091\",\n      name: \"Fractal Maze\",\n      expanded: \"false\",\n      difficulty: \"5\",\n      descriptionMdx: \"guide/problems/QOJ/10091/description.mdx\",\n      constraintsMdx: \"guide/problems/QOJ/10091/constraints.mdx\",\n      importMdx: \"guide/problems/QOJ/10091/description.mdx\",\n      importMdx: \"guide/problems/QOJ/10091/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/124/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有一個 $N \\\\times N$ 的棋盤，$N$ 一定是 2 的正整數次方，有一個格子 $(X, Y)$ 被挖掉了，你要放一些 L 形的 3 個積木，滿足積木都互不重疊、放在沒有被挖掉的格子上，且鋪滿所有沒被挖掉的地方。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/124/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N \\\\leq 1024$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1643/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"有一個數列 $x_1,x_2,\\\\dots,x_n$，求所有\", _jsx(_components.strong, {\n      children: \"非空\"\n    }), \"區間之中，最大的總和是多少。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1643/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^9 \\\\leq x_i \\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1080/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"對一個數列 $S$ 來說，若 $S$ 的第 $i$ 項 $s_i$ 與第 $j$ 項 $s_j$ 符合 $s_i > s_j$，並且 $i < j$ 的話，那麼我們說 $(i, j)$ 是一個逆序數對。請問給定 $S$，總共有多少個逆序數對呢？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1080/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/858/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"給你一個已經寫好的多項式乘法函式，如果兩個多項式的次數總和是 $n$，它會在 $O(n \\\\log n)$ 的時間回傳相乘的結果。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"給你 $N$ 個多項式，第 $i$ 個多項式是 $k_i$ 次多項式，請把它們相乘。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/858/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq N, k_i \\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq (\\\\sum_{i=1}^N k_i) - (N - 1) \\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1994/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"畫 $N$ 階希爾伯特曲線。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1994/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N \\\\leq 11$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/APCS/202010P4/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"輸入一個長度為 $2n$ 的陣列，其中 $1 \\\\sim n$ 的每個數字都出現剛好各 2 次。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"$i$ 的低窪值的定義是兩個數值為 $i$ 的位置中間，有幾個小於 $i$ 的的數字。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請算出 $1 \\\\sim n$ 所有數字低窪值的總和。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/APCS/202010P4/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq n \\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/127/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有一個 $N \\\\times M$ 矩陣，求每個橫列的最大值位置。保證每個橫列的最大值位置都在上一橫列的最大值位置右邊。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/127/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N \\\\leq M \\\\leq 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/788/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給一個長度為 $N$ 的 $1 \\\\sim N$ 排列，求有幾個子陣列中的數字是連續整數。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/788/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq N \\\\leq 5 \\\\times 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/249/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給一個陣列 $A_1,A_2,\\\\dots,A_N$，有 $Q$ 筆詢問，每筆詢問求區間 $[l,r]$ 中最大子區間總和。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/249/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N,Q \\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^9 \\\\leq A_i \\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/QOJ/10091/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給你一個用如下遞迴方式構造的迷宮：$0$ 階的迷宮只有一格，對於 $i > 0$，$i$ 階迷宮是一個 $2^i \\\\times 2^i$ 的迷宮，由 4 個 $i-1$ 階迷宮組成，這 4 個 $i-1$ 階迷宮之間有四道相接的牆，其中三道各有一格會被挖掉。有 $q$ 筆詢問，每筆詢問求某兩個之間的簡單路徑長。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/QOJ/10091/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 30$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$q \\\\leq 1000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"把問題切開","depth":1,"code":"把問題切開"},{"text":"分割與合併","depth":1,"code":"分割與合併"},{"text":"自己新增需求","depth":1,"code":"自己新增需求"},{"text":"例題：逆序數對","depth":1,"code":"例題：逆序數對"},{"text":"不單純的分子問題：快速排序法","depth":1,"code":"不單純的分子問題：快速排序法"},{"text":"小結","depth":1,"code":"小結"},{"text":"習題","depth":1,"code":"習題"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}