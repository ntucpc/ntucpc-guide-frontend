{"pageProps":{"props":{"mdxPath":"guide/content/AlgorithmTechnique/doubling/doubling.mdx","code":"AlgorithmTechnique/doubling","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"description":"一些基本證明方法","coming":false,"importance":0},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"description":"類似於「水會不斷往外擴散」的搜尋方式，具有使用最少步數達成目標的特殊效果。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"description":"演算法設計的經典手法，將問題分成多個部分、分別處理後再嘗試湊出完整問題的答案。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"description":"用遞迴的方式找出所有可能性，包含暴力枚舉、剪枝、在迷宮中找到路徑、遍歷一棵樹。","coming":false,"importance":"5"},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"倍增法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo","AlgorithmTechnique/dc"],"description":"一種特殊的演算法設計手法。","coming":false,"importance":"4"},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"description":"那些 C++ 已經幫你寫好的功能。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"description":"在「答案上」執行二分搜尋法。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"description":"最主流用來評估程式效率的方式。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"description":"如何將「列出所有可能性」寫成程式？有哪些常見的列舉方法？你知道即使是列舉可能性、也能進行演算法的優化嗎？","coming":false,"importance":"5"},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"何謂「演算法」？","coming":false,"importance":0},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"description":"質數、因數、十分逼近法以及大數四則運算。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"description":"介紹前綴和與差分的用處以及他們的關聯。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"程式設計中最重要的概念之一。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter","WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"description":"何謂「二分搜尋法」？他的原理為何？有什麼內建的函式能使用？","coming":false,"importance":"5"},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"description":"介紹各種不同「排序」的方法。","coming":false,"importance":"3"},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"description":"圖像化的枚舉方法。","coming":false,"importance":"5"},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"description":"利用題目單調性來加速演算法的一種枚舉方法。","coming":false,"importance":"5"},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"description":"何謂「二元樹」？何謂「二元搜尋樹」？","coming":false,"importance":"4"},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"description":"二元樹的進階應用、與 Stack 的關係。","coming":false,"importance":"3"},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"description":"介紹 Heap 和他相對應的內建函式。","coming":false,"importance":"5"},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"description":"何謂「資料結構」？","coming":false,"importance":0},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"description":"C++ 內建容器的御用「指標」。","coming":false,"importance":"3"},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"description":"介紹 Linked List 和他相對應的內建函式。","coming":false,"importance":"3"},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"description":"介紹 C++ 內建的 `set` 與 `map` 的使用方法。","coming":false,"importance":"5"},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"description":"介紹 Stack、Queue 與 Deque 和他們相對應的內建函式。","coming":false,"importance":"5"},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"description":"對雜湊的基礎認識，以及 C++ 內建的 `unordered_set` 與 `unordered_map` 的使用方法。","coming":false,"importance":"2"},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"description":"介紹 C++ 內建的 `vector` 的使用方法。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"如果真正構造出動態規劃的解答，而不是獲得單一的數值？","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"description":"在動態規劃演算法上結合一些學過的技巧來加速演算法效率。","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"用現實的例子引導出動態規劃的概念，故意先不給定義","coming":false,"importance":0},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"description":"利用動態規劃中的一道經典問題來認識不同的動態規劃解題方法。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"description":"使用多個參數來表達動態規劃演算法的狀態。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"使用區間做為狀態的動態規劃題目。","coming":true,"importance":"5"},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"description":"動態規劃中的一種既簡潔又能省記憶體的實作方式。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"description":"動態規劃的常用術語和基本的解題思路。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"description":"複習一遍目前所學，了解設計動態規劃演算法利用到的題目特性為何。","coming":false,"importance":"3"},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"description":"從線性遞迴問題開始認識動態規劃。","coming":false,"importance":"5"},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"description":"動態規劃的兩種實作方式。","coming":false,"importance":"5"},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":true,"title":"樹","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":"5"},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":true,"title":"拓撲排序","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"description":"","coming":true,"importance":"5"},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"description":"模運算、同餘的概念、快速冪與質數篩法。","coming":false,"importance":"5"},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"description":"","coming":true,"importance":0},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"description":"費馬小定理、歐拉函數、歐拉定理、模逆元與擴展歐幾里得演算法","coming":false,"importance":"5"},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"description":"一種用來維護「集合合併資訊」的資料結構。","coming":true,"importance":"5"},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"description":"認識單調隊列的技巧以及這個技巧能解決的題目類型。","coming":false,"importance":"5"},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"description":"example description","coming":false,"importance":0},{"code":"Game/easy_game","article":"easy_game","topic":"Game","chapter":null,"valid":true,"title":"初探賽局","authors":["baluteshih"],"contributors":[],"prerequisites":["Game/intro"],"description":"介紹那些最簡單的賽局問題。","coming":true,"importance":"3"},{"code":"Game/intro","article":"intro","topic":"Game","chapter":null,"valid":true,"title":"賽局導論","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"description":"何謂演算法競賽中的賽局？","coming":true,"importance":0},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 III","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/unintuitive_greedy","BasicDataStructure/set_map","BasicAlgorithm/partial_sum","BasicAlgorithm/binary_search_answer"],"description":"了解基本的貪心演算法優化與包裝。","coming":false,"importance":"5"},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"description":"介紹最基本的「貪心演算法」想法。","coming":false,"importance":"5"},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"description":"學會做出正確的貪心選擇、以及檢驗其正確性。","coming":false,"importance":"5"},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"description":"介紹在我們的網站中「章節」和「主題」的意義何在。","coming":false,"importance":0},{"code":"Guide/importance","article":"importance","topic":"Guide","chapter":"I","valid":true,"title":"文章重要等級","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/chapters"],"description":"教大家每篇文章上的重要等級意義為何","coming":true,"importance":0},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"description":"我們的講義沒有教大家語法，因此我們在此提供一些學習資源。","coming":false,"importance":0},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"description":"教你如何正確透過我們的網站學習。","coming":false,"importance":0},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"description":"看不懂講義文章中的數學符號嗎？來這邊查查看！","coming":false,"importance":0},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"description":"如何正確服用我們講義中的習題。","coming":false,"importance":0},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"description":"就是 Q&A。","coming":false,"importance":0},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"description":"在著手寫資訊競賽的程式之前，你一定得知道……","coming":false,"importance":"5"},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"description":"寫程式也得認識一下程式是怎麼產生的。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"description":"你知道 0.1 + 0.2 不等於 0.3 嗎？","coming":true,"importance":"3"},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"description":"那些常見的程式競賽輸入格式。","coming":false,"importance":"4"},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"description":"好用的語法糖，又稱作「參考」。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"description":"好用的語法糖，讓你的迴圈寫得更簡潔。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Structured binding","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased"],"description":"好用的語法糖，讓你不用再打出 `first` 和 `second`。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"description":"那些關於 C++ 變數宣告、和儲存方式的知識。","coming":false,"importance":"3"},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"description":"介紹一些在競賽程式中常使用的變數宣告方法。","coming":false,"importance":"3"},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"description":"初學程式找不到 bug 嗎？來看看這些新手常犯的錯誤。","coming":false,"importance":"3"},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"description":"","coming":false,"importance":0},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"description":"編譯器噴一堆錯誤怎麼辦？我們教你怎麼看！","coming":false,"importance":"3"},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":true,"title":"偽指標","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/linked_list"],"description":"一種易於理解的指標實作方式。","coming":false,"importance":"3"},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"description":"資訊競賽到底是什麼？有趣在哪？又有什麼用呢？","coming":false,"importance":0},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹各種資訊競賽的規則與他們的差異。","coming":false,"importance":"5"},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹常見的資訊競賽線上練習系統。","coming":false,"importance":"4"},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"description":"介紹其他對學習競賽有幫助的優質學習資源。","coming":false,"importance":0},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"description":"那些關於練習和準備比賽的策略。","coming":false,"importance":"3"},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"description":"介紹在台灣可以參加的資訊競賽。","coming":false,"importance":"5"}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/importance","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"],"description":"剛認識我們嗎？就讓我們來場自我介紹吧！"},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"],"description":"對何謂「資訊競賽」還很陌生嗎？你一定要來了解看看！"},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"],"description":"那些對寫程式非常有幫助的工具。"},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"],"description":"我們會教你如何把程式寫得好、寫得穩。"},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"],"description":"一切演算法的基礎，不可或缺的知識們。"},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"],"description":"一切資料結構的基礎，不可或缺的知識們。"},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"],"description":"了解貪心演算法的思路以及認識各種經典問題。"},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"],"description":"認識那些在競賽程式中會遇到的基本數學問題。"},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"],"description":"在各種演算法中被廣泛使用的技巧。"},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"],"description":"一步步帶你認識動態規劃概念、並了解基本的動態規劃設計與優化方法。"},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"],"description":"認識演算法競賽中那些被廣泛用來解題的資料結構。"},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"],"description":"認識圖論的基本術語以及那些經典問題。"}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","icon":"door","iconColor":"amber-600","description":"讓你認識什麼是資訊競賽，並簡單介紹在程式競賽你需要具備的基本知識、還有我們這個網站的用途。","number":"I","title":"初來乍到","contents":["Guide/learning","Guide/chapters","Guide/importance","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","icon":"sprout","iconColor":"lime-600","description":"帶你認識資訊競賽解題的基礎，並開始學習基本的資料結構與演算法。","number":"II","title":"新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","icon":"stairs","iconColor":"blue-400","description":"讓你了解設計資料結構與演算法的理念，並能正確的理解何謂「效率」以及增加效率的方式。","number":"III","title":"漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/AlgorithmTechnique/doubling/doubling.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ContentReference, Problem, Refcode} = _components;\n  if (!ContentReference) _missingMdxReference(\"ContentReference\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"一次跳很多步\",\n      children: \"一次跳很多步\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1750\",\n      src: \"CSES 1750\",\n      name: \"Planets Queries I\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/CSES/1750/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1750/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1750/description.mdx\",\n      importMdx: \"guide/problems/CSES/1750/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每筆詢問都暴力走 $k$ 步要花上 $O(qk)$ 的時間，顯然是不可能的，所以我們勢必要有辦法「一次跳很多步」，像是如果我們想要能一次跳 $c$ 步，可以\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"先預處理從每個星球出發，走 $c$ 步會跳到哪裡。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"處理一筆詢問時，先跳 $\\\\lfloor k/c \\\\rfloor$ 次 $c$ 步，剩下的 $k - \\\\lfloor k/c \\\\rfloor c = k \\\\bmod c$ 步再一步一步走。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣就每筆詢問都只要跳最多 $k/c + c$ 次而已，而預處理會花上 $O(cn)$ 的時間。不過這樣做是不夠的，讀者可以自己算算看，讓 $k/c + c$ 最小的 $c$ 是 $\\\\sqrt{k}$，這樣總時間複雜度會是 $O((n+q) \\\\sqrt{k})$（這裡的 $k$ 是 $k$ 的最大值），以這題的範圍來說還是太慢了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"問題在於：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$c$ 太小的話，$k / c$ 會很大。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$c$ 太大的話，不只 $k \\\\bmod c$ 會很大，預處理的時間也會很大。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以要是我們只準備一種「跨大步的步數」，不太可能可以做得很快，但我們總得要準備一個很大的步數吧？要是想要可以一次走 $c$ 步，就得先花 $O(cn)$ 的時間預處理每個星球出發走 $c$ 步會抵達哪裡，那也沒辦法做到很大的 $c$，於是我們現在要面對的第一個問題，就是要怎麼預處理一個很大的步數。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"既然處理詢問的時候可以跨大步，那預處理的時候當然也可以跨大步！如果我們知道每個星球出發走 $c/2$ 步會到哪裡，那只要走兩次 $c/2$ 步，就能算一個星球走 $c$ 步會到哪裡了。為了知道走 $c/2$ 步會到哪裡，那可以先知道走 $c/4$ 步會到哪，走兩次 $c/4$ 步就會知道走 $c/2$ 步會到哪……，發現了嗎？有點像是\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"BasicMath/basicalgo\",\n        mode: \"default\",\n        topicTitle: \"基礎數學\",\n        articleTitle: \"常用數學演算法\"\n      }), \"裡面提到的快速冪，我們把第 $i$ 個星球出發走一步會到的星球記作 $f(i)=t_i$、走 $k$ 步會到的記作 $f^{(k)}(i) = \\\\underbrace{f(f(\\\\dots f}_{k \\\\text{ 次}}(i))$，那麼：\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"我們一開始就知道 $f^{(1)}(i)$。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"想要知道 $f^{(2)}(i)$，只需要算 $f^{(1)}(f^{(1)}(i))$。算出全部的 $f^{(2)}(i)$ 只要花 $O(n)$ 的時間。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"想要知道 $f^{(4)}(i)$，只需要算 $f^{(2)}(f^{(2)}(i))$。算出全部的 $f^{(4)}(i)$ 只要花 $O(n)$ 的時間。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"想要知道 $f^{(8)}(i)$，只需要算 $f^{(4)}(f^{(4)}(i))$。算出全部的 $f^{(8)}(i)$ 只要花 $O(n)$ 的時間。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"……\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"想要知道 $f^{(2^\\\\ell)}(i)$，只需要算 $f^{(2^{\\\\ell-1})}(f^{(2^{\\\\ell-1})}(i))$。算出全部的 $f^{(2^\\\\ell)}(i)$ 只要花 $O(n)$ 的時間。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一路算到 $2^\\\\ell$ 的話，預處理要花的時間全部只要 $O(\\\\ell n)$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那要怎麼處理詢問呢？別忘了我們在想要算出 $f^{(2^\\\\ell)}(i)$ 的過程中，已經預處理好 $2^\\\\ell$ 以內所有走二的冪次步數的答案了，所以只要像快速冪那樣，把 $k$ 二進位分解乘一些二的冪次相加，分開來走，就可以只花 $O(\\\\log k)$ 的時間就知道 $f^{(k)}(i)$。別忘了 $\\\\ell$ 至少要有 $\\\\lfloor \\\\log_2 k \\\\rfloor$。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\\n\\nusing namespace std;\\n\\nint main() {\\n    ios_base::sync_with_stdio(false);\\n    cin.tie(0);\\n\\n    int n, q;\\n    cin >> n >> q;\\n\\n    // 30 >= log_2 k\\n    vector f(30 + 1, vector<int>(n + 1));\\n    for (int i = 1; i <= n; i++)\\n        cin >> f[0][i];\\n    for (int i = 1; i <= 30; i++)\\n        for (int j = 1; j <= n; j++)\\n            f[i][j] = f[i - 1][f[i - 1][j]];\\n    \\n    while (q--) {\\n        int x, k;\\n        cin >> x >> k;\\n        for (int i = 0; i <= 30; i++)\\n            if ((k >> i) & 1) // k 二進位分解有 2^i\\n                x = f[i][x]; // 跳 2^i 步\\n        cout << x << \\\"\\\\n\\\";\\n    }\\n\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"總時間複雜度是 $O((n+q) \\\\log \\\\max k)$。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"倍增法\",\n      children: \"倍增法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"倍增法的意思就是像這樣每次增加兩倍，因為有 $2^k+2^k=2^{k+1}$、二進位分解又很好計算等等的特性，在這種要做某種很單純的固定操作很多次的問題，倍增法就是很好用的技巧。如果把剛才偷偷提到的快速冪用這樣的說法解釋：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"「很單純的固定操作」就是把數字乘上 $a$。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"從數字 $x$ 開始做 $2^i$ 次這個操作，那數字就會變成 $x \\\\times a^{2^i}$，所以我們只要算 $a^{2^i}$ 就好了，不用對每種 $x$ 分開算。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$a^{2^k} \\\\times a^{2^k} = a^{2^k + 2^k} = a^{2^{k+1}}$。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以快速冪的過程就是（如果需要 $\\\\bmod$，請自己在腦裡補上 $\\\\bmod$）：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"我們一開始就知道 $a^{2^0}$。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"想要知道 $a^{2^1}$，只需要算 $a^{2^0} \\\\times a^{2^0}$。這只要花 $O(1)$ 的時間。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"想要知道 $a^{2^2}$，只需要算 $a^{2^1} \\\\times a^{2^1}$。這只要花 $O(1)$ 的時間。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"……\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"想要知道 $a^{2^\\\\ell}$，只需要算 $a^{2^{\\\\ell-1}} \\\\times a^{2^{\\\\ell-1}}$。這只要花 $O(1)$ 的時間。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一路算到 $a^{2^\\\\ell}$，只要花 $O(\\\\ell)$ 的時間，而算出 $a^{b}$ 需要 $\\\\ell \\\\geq \\\\lfloor \\\\log_2 b \\\\rfloor$，所以快速冪需要的時間是 $O(\\\\log b)$。跟剛剛那題不太一樣的是，因為乘法這個操作太有規則了，不需要對每種數字分別計算做 $2^k$ 次操作的結果，而在剛剛的例題裡面則需要每個星球分開計算，不過它們的核心精神都是一樣的。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"倍增法也不只可以單純用來找「做數次操作後的結果」，也可以是稍微複雜一點的問題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"\",\n      src: \"經典題\",\n      name: \"$k$ 步最大值\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/Misc/jump_max/description.mdx\",\n      constraintsMdx: \"guide/problems/Misc/jump_max/constraints.mdx\",\n      importMdx: \"guide/problems/Misc/jump_max/description.mdx\",\n      importMdx: \"guide/problems/Misc/jump_max/constraints.mdx\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果把從 $i$ 開始走 $k$ 步的傳送門上寫的數字最大值記作 $g^{(k)}(i)$、$g^{(1)}(i)=g(i)=w_i$，那要注意 $g^{(2^k)}(i)$ 是不能直接只用 $g^{(2^{k-1})}$ 算出來的，而是要算\", _jsx(_components.br, {}), \"\\n\", \"\\\\[ g^{(2^k)}(i)=\\\\max(g^{(2^{k-1})}(i), g^{(2^{k-1})}(f^{(2^{k-1})}(i))) \\\\]\", _jsx(_components.br, {}), \"\\n\", \"這句話的意思是，從 $i$ 開始走 $2^k$ 步，可以分成兩段，前面那段是從 $i$ 開始、走 $2^{k-1}$ 步，所以路上的最大值是 $g^{(2^{k-1})}(i)$、後面那段是從 $f^{(2^{k-1})}(i)$ 開始、走 $2^{k-1}$ 步，所以路上的最大值是 $g^{(2^{k-1})}(f^{(2^{k-1})}(i))$，兩個取較大值就是整條路的答案了。實作上就跟上一個例題幾乎一樣，先算完 $2^{k-1}$ 步的答案（包含 $f$ 和 $g$）後，就可以很輕鬆地算出 $2^k$ 步的答案。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這種思考過程有點像\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"AlgorithmTechnique/dc\",\n        mode: \"article\",\n        topicTitle: \"演算法技巧\",\n        articleTitle: \"分治法\"\n      }), \"，就是想著把要算的東西分成兩半、假設有兩半的答案後，想想要怎麼拼起來，然後如果需要用到所求答案本身以外的資訊，就再想想怎麼算。像是在這裡，題目所求的答案是 $g$，但是算 $g$ 的過程我們需要用 $f$，所以就要也算出 $f$。倍增法通常有比一般的分治更好的性質，像是\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"分兩半後的子問題長得一模一樣：例如快速冪，$a^{2^k}$ 會被分成 $a^{2^{k-1}}$ 和 $a^{2^{k-1}}$ 兩個子問題，長得一模一樣。在這種問題只需要算一遍子問題就好，通常會給出形如 $O(\\\\log k)$ 的複雜度。\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"雖然分兩半後的子問題是不同問題，但子問題會被重複使用：例如在 Planets Queries I 中，$f^{(2^k)}(i)$ 會被分成 $x = f^{(2^{k-1})}(i)$ 和 $f^{(2^{k-1})}(x)$ 兩個子問題、$f^{(2^k)}(x)$ 會被分成 $y=f^{(2^{k-1})}(x)$ 和 $f^{(2^{k-1})}(y)$ 兩個子問題，它們都會用到 $f^{(k-1)}(x)$。在前面的程式碼裡面，那個 \", _jsx(_components.code, {\n          children: \"for (int i = 1; i <= 30; i++)\"\n        }), \" 的迴圈每次會算出所有 $f^{(2^i)}(\\\\cdot)$，其實就是在把分治遞迴樹上，從下數上來第 $i$ 層的答案全部一口氣算完。這種問題通常會給出形如 $O(n \\\\log k)$ 的複雜度。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"跟分治還有一個不太一樣的地方是，分治法的過程通常是 top-down 的，而倍增法則通常寫成 bottom-up 的形式，這是讓問題規模總是 $2^k$ 的一個好處，讓我們知道只要先算出所有規模是 $2^k$ 的問題，就能很輕鬆地算出所有規模是 $2^{k+1}$ 的問題。分治法和倍增法的思路一體兩面，當想到一種思路時感覺差了一點，不妨換個角度想想，實作時可以再選擇最方便的作法。\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1687\",\n      src: \"CSES 1687\",\n      name: \"Company Queries I\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/CSES/1687/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1687/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1687/description.mdx\",\n      importMdx: \"guide/problems/CSES/1687/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://codeforces.com/problemset/problem/1175/E\",\n      src: \"Codeforces 1175E\",\n      name: \"Minimal Segment Cover\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/Codeforces/1175E/description.mdx\",\n      constraintsMdx: \"guide/problems/Codeforces/1175E/constraints.mdx\",\n      importMdx: \"guide/problems/Codeforces/1175E/description.mdx\",\n      importMdx: \"guide/problems/Codeforces/1175E/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1664\",\n      src: \"CSES 1664\",\n      name: \"Movie Festival Queries\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/CSES/1664/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1664/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1664/description.mdx\",\n      importMdx: \"guide/problems/CSES/1664/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1750/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $n$ 個星球，其中第 $i$ 個星球上有一個單向的傳送門通往第 $t_i$ 個星球。有 $q$ 筆詢問，每筆詢問求從某個星球 $x$ 開始，不斷進入目前所在星球的傳送門，走 $k$ 次會到哪個星球。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1750/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n,q \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$0 \\\\leq k \\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/jump_max/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $N$ 個節點 $1,2,\\\\dots,N$，從第 $i$ 個節點有一個通往節點 $f(i)$ 的單向傳送門，且這個傳送門上寫了一個數字 $w_i$，然後有 $Q$ 筆詢問，每個詢問給兩個數 $1 \\\\leq x \\\\leq N$ 和 $k$，求從節點 $x$ 出發，走 $k$ 次傳送門後，走過的這些傳送門上所寫的數字最大值為何。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/jump_max/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N,Q \\\\leq 5 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq w_i \\\\leq 10^9$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq k \\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1687/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有一間公司裡面有 $n$ 個員工，除了總經理以外的每個人都有一個上司。有 $q$ 筆詢問，每筆詢問求某個員工 $x$ 的 $k$ 層上司是誰。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1687/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n,q \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$k \\\\leq n$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Codeforces/1175E/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給 $n$ 個一維線段，然後有 $m$ 筆詢問 $[x,y]$，每筆詢問求至少要選幾條線段，才能使得選中的線段蓋住整個 $[x,y]$ 區間。如果不管選幾條線段都做不到，輸出 $-1$。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Codeforces/1175E/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n,m \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1664/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"電影節中有 $n$ 部電影，你知道每個電影開始播放的時間與結束時間，然後有 $q$ 個詢問，每筆詢問包含你抵達電影節會場的時間與離開時間，你同一時間只能看一部電影，且一部電影要看就得全部看完，不能只看一部分，求你在這段時間內最多可以看幾部電影。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1664/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n,q \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"一次跳很多步","depth":1,"code":"一次跳很多步"},{"text":"倍增法","depth":1,"code":"倍增法"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}