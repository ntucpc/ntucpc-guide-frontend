{"pageProps":{"props":{"mdxPath":"guide/content/BasicDataStructure/stack_queue_deque/stack_queue_deque.mdx","code":"BasicDataStructure/stack_queue_deque","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"廣度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/structure_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/rngbased","Implementation/structure_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","Implementation/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","Implementation/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 II","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/basic_knowledge","article":"basic_knowledge","topic":"Implementation","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"Implementation/buglist","article":"buglist","topic":"Implementation","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/variable"],"coming":false},{"code":"Implementation/compiler","article":"compiler","topic":"Implementation","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/debug","article":"debug","topic":"Implementation","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["Implementation/buglist"],"coming":false},{"code":"Implementation/error_message","article":"error_message","topic":"Implementation","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/compiler"],"coming":false},{"code":"Implementation/float_error","article":"float_error","topic":"Implementation","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/input","article":"input","topic":"Implementation","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"Implementation/pseudo_pointer","article":"pseudo_pointer","topic":"Implementation","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/reference","article":"reference","topic":"Implementation","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/rngbased","article":"rngbased","topic":"Implementation","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/reference","BasicDataStructure/vector"],"coming":false},{"code":"Implementation/structure_binding","article":"structure_binding","topic":"Implementation","chapter":"III","valid":false,"title":"Structure Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/variable","article":"variable","topic":"Implementation","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"],"coming":false},{"code":"Implementation/variable_declare","article":"variable_declare","topic":"Implementation","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["Implementation/variable"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"Implementation","title":"實作技巧","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/variable_declare","Implementation/buglist","Implementation/debug","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["Implementation"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/variable_declare","Implementation/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicDataStructure/stack_queue_deque/stack_queue_deque.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    em: \"em\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure, Info, Problem, Refcode, Theorem} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"堆疊（Stack）\",\n      children: \"堆疊（Stack）\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"堆疊，顧名思義就是一堆資料疊成一堆，每次都只能從最上面存取資料，否則整個堆疊就會倒塌，這正是所謂先進後出（first in last out, FILO）原則。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"堆疊（Stack）-實作原理\",\n      children: \"實作原理\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設我想要疊盤子，將盤子疊在一起，每次拿到的就是最上面的盤子，放盤子也是最上面，那就正好就是 stack 的用武之地。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/stack_queue_deque/figure/stack.png\",\n      width: \"200\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以上就是 stack 的示意圖：只能從最上面拿和放（此處原本最上面是 $y$，可以拿走；或者可以從最上面放$x$進去）。就讓我們直接來看一道例題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/36/\",\n      src: \"NEOJ 36\",\n      name: \"Stack 練習\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NEOJ/36/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/36/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/36/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/36/constraints.mdx\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"實作時，我們通常會宣告一個足夠大的陣列用來當作 stack 的儲存空間，並用一個變數當作「目前 stack 最上方的位置」，透過 C++ 方便的 \", _jsx(_components.code, {\n        children: \"++\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"--\"\n      }), \" 運算子，就可以達成簡潔的實作。讀者可以從下面這段程式碼自行理解。\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int Stack[maxn], tot = 0;\\nvoid PUSH(int x) {\\n    Stack[tot++] = x;\\n}\\nvoid POP(){\\n    if(tot == 0)\\n        cout << \\\"stack is empty!\\\\n\\\";\\n    else\\n        cout << Stack[--tot] << endl;\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"堆疊（Stack）-STL\",\n      children: \"STL\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"STL 也有內建的 stack 容器適配器，有新增、刪除、查詢最頂部元素的功能。以下是宣告一個 stack 的方法。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"stack<int> stk; // 宣告一個儲存 int 型別的 stack\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"stack 是放在 \", _jsx(_components.code, {\n        children: \"<stack>\"\n      }), \" 標頭檔內，使用前記得引入。\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      refId: \"堆疊（Stack）-STL-STL 堆疊操作\",\n      children: \"STL 堆疊操作\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"push()\"\n        }), \" 可以將資料放入堆疊的頂部；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"pop()\"\n        }), \" 將頂端元素刪除；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"top()\"\n        }), \" 查詢堆疊頂端元素；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"size()\"\n        }), \" 查詢目前還位於堆疊中的資料數；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"empty()\"\n        }), \" 回傳堆疊是否為空。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"stk.push(3); // [3]\\nstk.push(2); // [3, 2]\\nstk.push(5); // [3, 2, 5]\\nstk.pop(); // [3, 2]\\ncout << stk.size() << endl; // 2\\ncout << stk.empty() << endl; // 0 (表示非空)\\ncout << stk.top() << endl; // 2\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(Info, {\n      type: \"danger\",\n      children: _jsx(_components.p, {\n        children: \"常犯錯誤：在使用 top() 函數時記得要加括號，不要 CE 在哪裡都不知道。\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"讀者可以發現，基本上 STL 中 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" 能做到的事情 \", _jsx(_components.code, {\n        children: \"vector\"\n      }), \" 都能做到，而 \", _jsx(_components.code, {\n        children: \"vector\"\n      }), \" 又支援 \", _jsx(_components.code, {\n        children: \"operator[]\"\n      }), \" 這種查找操作，所以其實大多數競賽選手都習慣直接使用 \", _jsx(_components.code, {\n        children: \"vector\"\n      }), \" 而不是 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"堆疊（Stack）-習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Stack 的概念較為簡單，但其應用可是非常可觀。在未來我們會介紹不少 Stack 的應用，這裡就先放上兩題簡單的 Stack 應用題，供讀者先行思考看看。\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=b304\",\n      src: \"ZeroJudge b304\",\n      name: \"Parentheses Balance\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/ZeroJudge/b304/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/b304/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/b304/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/b304/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1012\",\n      src: \"TIOJ 1012\",\n      name: \"Rails\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/TIOJ/1012/description.mdx\",\n      constraintsMdx: \"guide/problems/TIOJ/1012/constraints.mdx\",\n      importMdx: \"guide/problems/TIOJ/1012/description.mdx\",\n      importMdx: \"guide/problems/TIOJ/1012/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"佇列（Queue）\",\n      children: \"佇列（Queue）\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"佇列，顧名思義就是一堆人在排隊，先進去排隊的人先享有辛苦排隊的成果，這是所謂先進先出（first in first out, FIFO）原則。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"佇列（Queue）-實作原理\",\n      children: \"實作原理\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"想像一家熱門的蛋糕店，有很多人在排隊，而每一個人都不會插隊，那要怎麼模擬呢？當最前面的人拿到了夢寐以求的蛋糕的時候，就會從\", _jsx(_components.strong, {\n        children: \"最前面離開隊伍\"\n      }), \"，而當有一個人聞香而來，就會從\", _jsx(_components.strong, {\n        children: \"最後面加入隊伍\"\n      }), \"。這就是 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \" 的精神！以下為蛋糕店排隊的模擬圖：\"]\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDataStructure/stack_queue_deque/figure/queue.png\",\n      width: \"200\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"和\", _jsx(_components.code, {\n        children: \"stack\"\n      }), \"不同的是：一個是拿、放同側，而這個是異側，是FIFO（First In Last Out）資料結構。\"]\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/37/\",\n      src: \"NEOJ 37\",\n      name: \"Queue 練習\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NEOJ/37/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/37/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/37/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/37/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"queue 的實作方法比 stack 難一點，得在陣列維持兩個變數（也就是頭和尾），插入的時候動尾，而離開的時候動頭。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int Queue[maxn], Front = 0, Back = 0;\\nvoid PUSH(int x) {\\n    Queue[Back++] = x;\\n}\\nvoid POP() {\\n    if (Front == Back)\\n        cout << \\\"empty!\\\\n\\\";\\n    else {\\n        cout << Queue[Front++] << endl;\\n    }\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"佇列（Queue）-環狀佇列\",\n      children: \"環狀佇列\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不過像前面那樣寫的話有一個問題，只要插入的元素數量超過了 \", _jsx(_components.code, {\n        children: \"maxn\"\n      }), \"，這個陣列就存不下了。為了更有效率的利用前面的空間，我們可以使用循環的實作方式，陣列大小不再和操作數量有關，而是和任一時間在佇列中的元素數量有關。\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int Queue[maxn], Front = 0, Back = 0;\\nvoid PUSH(int x) {\\n    Queue[Back] = x;\\n    if (++Back >= maxn) Back -= maxn;\\n}\\nvoid POP() {\\n    if (Front == Back)\\n        cout << \\\"empty!\\\\n\\\";\\n    else {\\n        cout << Queue[Front] << endl;\\n        if (++Front >= maxn) Front -= maxn;\\n    }\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設這個佇列最多只能存 $N$ 個元素，當下一個元素要被放進第 $N+1$ 格時，因為有 pop 操作的存在，所以這個佇列不一定是滿的狀態。通常為了有效節省實作佇列時所需的空間，我們都會用循環的方式來實作 queue，意即假設原本存在第 $1$ 格的元素已經被 pop 掉，我們就可以將原本要儲存在 $N+1$ 格的元素儲存在第 $1$ 格，重複利用能用的空間。這樣的實作方法又被稱為「環狀佇列」，偶爾可以用來省空間。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"佇列（Queue）-STL\",\n      children: \"STL\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"STL 也為佇列設計了一個容器適配器，它支援從後面插入資料，但是資料是從前面取出。以下是 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \" 的宣告方法。\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"queue<int> que; // 宣告一個儲存 int 型別的 queue\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"queue\"\n      }), \" 是放在 \", _jsx(_components.code, {\n        children: \"<queue>\"\n      }), \" 標頭檔內，使用前必須引入。\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      refId: \"佇列（Queue）-STL-STL 佇列操作\",\n      children: \"STL 佇列操作\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"push()\"\n        }), \" 可以將資料排入佇列的尾端；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"pop()\"\n        }), \" 將前端元素刪除；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"front()\"\n        }), \" 查詢佇列前端元素；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"size()\"\n        }), \" 查詢目前還位於佇列內的資料數；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"empty()\"\n        }), \" 回傳佇列是否為空。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"que.push(3); // [3]\\nque.push(2); // [3, 2]\\nque.push(5); // [3, 2, 5]\\nque.pop(); // [2, 5]\\ncout << que.front() << endl; // 2\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"新手常犯錯誤：是 \", _jsx(_components.code, {\n          children: \"front()\"\n        }), \"，不是 \", _jsx(_components.code, {\n          children: \"top()\"\n        }), \"，不要搞錯了。\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"佇列（Queue）-習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=1876\",\n      src: \"uva\",\n      name: \"Throwing cards away I\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/UVa/10935/description.mdx\",\n      constraintsMdx: \"guide/problems/UVa/10935/constraints.mdx\",\n      importMdx: \"guide/problems/UVa/10935/description.mdx\",\n      importMdx: \"guide/problems/UVa/10935/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"\",\n      src: \"uva\",\n      name: \"Team queue \",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/UVa/540/description.mdx\",\n      constraintsMdx: \"guide/problems/UVa/540/constraints.mdx\",\n      importMdx: \"guide/problems/UVa/540/description.mdx\",\n      importMdx: \"guide/problems/UVa/540/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"雙端佇列（Deque）\",\n      children: \"雙端佇列（Deque）\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在介紹這個資料結構之前，要先決定這個資料結構的唸法。\"\n    }), \"\\n\", _jsxs(Theorem, {\n      type: \"theorem\",\n      title: \"Deque 的正確唸法\",\n      number: \"1\",\n      children: [_jsxs(_components.p, {\n        children: [\"根據 Knuth 的 \", _jsx(_components.em, {\n          children: \"The Art of Computer Programming\"\n        }), \"，Volume 1, Section 2.2.1 \\\"Stacks, Queues, and Deques\\\":\", _jsx(_components.br, {}), \"\\n\", \"\\\"A deque (\\\"double-ended queue\\\") is a linear list for which all insertions and deletions (and usually all accesses) are made at the ends of the list. A deque is therefore more general than a stack or a queue; **it has some properties in common with a deck of cards, and it is pronounced the same way.*\\\"\"]\n      }), _jsx(_components.p, {\n        children: \"正確唸法為 [d$\\\\varepsilon$k]，如果念為 [di:kju:]，可能會誤認為 dequeue，意思是從 Queue 中移除，造成誤會。\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這個東西感覺像是 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" 的進化版，\", _jsx(_components.strong, {\n        children: \"可以從頭尾拿，也可以從頭尾放東西\"\n      }), \"，所以會支援四個操作：兩邊（front, back）各有放和拿（push, pop）：\", _jsx(_components.code, {\n        children: \"push_back\"\n      }), \"、\", _jsx(_components.code, {\n        children: \"push_front\"\n      }), \"、\", _jsx(_components.code, {\n        children: \"pop_back\"\n      }), \"、\", _jsx(_components.code, {\n        children: \"pop_front\"\n      }), \"。為什麼要用 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \"，而不直接用 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 呢？因為不需要那麼多的功能，還會影響程式的可讀性。\"]\n    }), \"\\n\", _jsx(Problem, {\n      url: \"\",\n      src: \"經典題\",\n      name: \"Deque 練習\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/Misc/deque_practice/description.mdx\",\n      constraintsMdx: \"guide/problems/Misc/deque_practice/constraints.mdx\",\n      importMdx: \"guide/problems/Misc/deque_practice/description.mdx\",\n      importMdx: \"guide/problems/Misc/deque_practice/constraints.mdx\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"那麼要怎麼實作呢？和 Queue 的概念一樣，需要維護頭尾在哪裡，所以我們能用 \", _jsx(_components.code, {\n        children: \"Front, Back\"\n      }), \" 紀錄兩端的位置。不過若直接貿然將 \", _jsx(_components.code, {\n        children: \"Front\"\n      }), \" 初始為 \", _jsx(_components.code, {\n        children: \"0\"\n      }), \" 的話，一個 \", _jsx(_components.code, {\n        children: \"push_front\"\n      }), \" 操作就會讓 \", _jsx(_components.code, {\n        children: \"Front\"\n      }), \" 變成 \", _jsx(_components.code, {\n        children: \"-1\"\n      }), \" 造成問題，一種解決方法是宣告一個兩倍大的陣列，並把 \", _jsx(_components.code, {\n        children: \"Front\"\n      }), \" 跟 \", _jsx(_components.code, {\n        children: \"Back\"\n      }), \" 的初始值定位在中間；另一個作法則是像以下這樣，使用環狀佇列的概念實作：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int deq[maxn], Front = 0, Back = 0;\\nvoid PUSH_FRONT(int x) {\\n    if (--Front < 0) Front += maxn;\\n    deq[Front] = x;\\n}\\nvoid PUSH_BACK(int x) {\\n    if (++Back >= maxn) Back -= maxn;\\n    deq[Back] = x;\\n}\\nvoid POP_FRONT(){\\n    if (Front == Back)\\n        cout << \\\"empty!\\\\n\\\";\\n    else {\\n        if (++Front >= maxn) Front -= maxn;\\n        cout << deq[Front] << endl;\\n    }\\n}\\nvoid POP_BACK(){\\n    if (Front == Back)\\n        cout << \\\"empty!\\\\n\\\";\\n    else {\\n        if (--Back < 0) Back += maxn;\\n        cout << deq[Back] << endl;\\n    }\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"雙端佇列（Deque）-STL\",\n      children: \"STL\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"STL 裡面的 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 也有雙端佇列的功能，可以在首端或尾端存取資料。以下是 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 的宣告。\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"deque<int> dq; // 宣告一個儲存 int 型別的 deque\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"deque 是放在 \", _jsx(_components.code, {\n        children: \"<deque>\"\n      }), \" 標頭檔內，使用前記得引入。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"雙端佇列（Deque）-STL 雙端佇列操作\",\n      children: \"STL 雙端佇列操作\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"push_back()\"\n        }), \" 可以將資料排入雙端佇列的尾端；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"pop_back()\"\n        }), \" 將雙端佇列尾端元素刪除；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"push_front()\"\n        }), \" 可以將資料排入雙端佇列的首端；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"pop_front()\"\n        }), \" 將雙端佇列首端元素刪除；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"front()\"\n        }), \" 查詢雙端佇列首端元素；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"back()\"\n        }), \" 查詢雙端佇列尾端元素；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"size()\"\n        }), \" 查詢目前還位於佇列內的資料數；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"empty()\"\n        }), \" 回傳佇列是否為空；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"operator[]\"\n        }), \" 可以查找元素。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"dq.push_back(3); // [3]\\ndq.push_back(1); // [3, 1]\\ndq.push_front(2); // [2, 3, 1]\\ndq.pop_back(); // [2, 3]\\ndq.pop_front(); // [3]\\ndq.push_front(1); // [1, 3]\\ncout << dq.front() << endl; // 1\\ncout << dq.back() << endl; // 3\\ncout << dq[1] << endl; // 3\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"值得注意的是，與 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \" 不同，\", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 還可以使用 \", _jsx(_components.code, {\n        children: \"operator[]\"\n      }), \" 來隨機存取元素！\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"常數爭議\",\n      children: \"常數爭議\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"儘管 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 看起來功能方便、又支援陣列操作，但能用一般陣列或 \", _jsx(_components.code, {\n        children: \"vector\"\n      }), \" 解決的問題就盡量避免用 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \"。這是因為 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 的時間和空間常數都不小。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"那 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" 跟 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \" 呢？這就有趣了，實際上在 STL 中，這兩個資料結構預設是呼叫 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 來當作內部容器的！正是因為 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 涵蓋了這兩個資料結構的功能，所以他們直接擷取 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \" 的一小部分功能下來變成一個可讀性比較好的語法。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"沒錯！也就是說使用 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" 跟 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \"，就等價於使用了擁有巨大常數的 \", _jsx(_components.code, {\n        children: \"deque\"\n      }), \"！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當然，大多數情況下若不是真的沒必要用到 stack 或著 queue 的功能，正常的使用這兩個 STL 並不是真的那麼容易被「卡常數」，但若真的遇到了，除了乖乖自己實作之外，也可以試試看以下方法：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"stack<int, vector<int>> stk;\\nqueue<int, list<int>> que;\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"上述兩行程式碼是在宣告 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \" 的時候「更改」他們的內部容器，而被我們用來更換的 \", _jsx(_components.code, {\n        children: \"vector\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"list\"\n      }), \" 恰好都同時包含了 \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"queue\"\n      }), \" 的功能，才能直接做使用。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不過 \", _jsx(_components.code, {\n        children: \"list\"\n      }), \" 是什麼呢？歡迎瀏覽下一個章節……\"]\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"其實把 \", _jsx(_components.code, {\n          children: \"queue\"\n        }), \" 的容器換成 \", _jsx(_components.code, {\n          children: \"list\"\n        }), \" 並不總是會變快，不過這可能就要牽扯到電腦硬體的一些知識了，這裡先略過不談。\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/36/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"練習看看 Stack 的實作！\", _jsx(_components.br, {}), \"\\n\", \"請實作一個 stack，需要支援兩種操作：\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"PUSH $x$，代表 stack 內要放入一個值為 $x$ 的物體\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"POP，代表 stack 內要將最上層的東西拿出來，並輸出其值。如果 stack 是空的，請輸出 \", _jsx(_components.code, {\n          children: \"empty!\"\n        })]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/36/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"操作數 $\\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/b304/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"給你一個由四個字元（\", _jsx(_components.code, {\n      children: \"'('\"\n    }), \"、\", _jsx(_components.code, {\n      children: \"')'\"\n    }), \"、\", _jsx(_components.code, {\n      children: \"'{'\"\n    }), \"、\", _jsx(_components.code, {\n      children: \"'}'\"\n    }), \"）所組成的字串 $S$，請問 $S$ 是否為一個合法的字串（我們定義字串為合法，若且唯若每一個括弧都可以被匹配到，\", _jsx(_components.code, {\n      children: \"()()\"\n    }), \" 合法，而 \", _jsx(_components.code, {\n      children: \"{(})\"\n    }), \" 則不合法。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/b304/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"單一字串的最大長度為 $128$ 個字元\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"有 $n$ 筆測資，所有字串長度總和 $\\\\leq 1000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1012/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"在一個叫「堆疊市」的城市中有一個著名的火車站。由於地形限制以及經費關係，火車站及唯一的鐵路的樣子如下圖：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/TIOJ/1012/figure/rails.jpg\",\n      width: \"400\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現在火車從 A 方向來，預定從 B 方向離開。火車共有 $N$ 節車廂，並且各車廂依次以 $1$ 到 $N$ 來編號。你可以假設各車廂在進站之前可以單獨與其他車廂分離，也可以單獨離開車站到往 B 方向的鐵軌或是車站北方的「維修鐵路」上。維修鐵路是一小段至多只能容納 $M$ 節車廂的鐵軌，可以從車站依照順序將車廂移至維修鐵路，或者將車廂從維修鐵路（如果有的話）駛進車站，但是在把車廂從A開進車站的時候，維修鐵路不能有任何車廂。你可以假設在任何時間火車站都可以容納所有的車廂。但是一旦一節車廂進站後，就不能再回到 A 方向的鐵軌上了，並且一旦離開車站往 B 方向後，也不能再回到車站。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現在你的任務是寫一個程式，判斷火車能否以一特定的排列方式在 B 方向的鐵軌上。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1012/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N\\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$0\\\\leq M\\\\leq 9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/37/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"請實作出一個 queue 吧！要支援兩個操作：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"PUSH $x$，代表 queue 的最後方要插入一個值為 $x$ 的元素\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"POP，代表 queue 內要將最前面的東西拿出來，並輸出其值。如果 queue 是空的，請輸出 \", _jsx(_components.code, {\n          children: \"empty!\"\n        })]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/37/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"操作數 $\\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/UVa/10935/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"我現在有 $n$ 張牌寫上了 $1$ 到 $n$ 的正整數，一開始由上而下是 $1, 2, 3, \\\\cdots, n$，而我每次會進行這個操作：只要有兩張牌以上，就把第一張牌拿掉，並且將最後一張牌放到最下面。請輸出牌被拿掉的順序？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/UVa/10935/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n\\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/UVa/540/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"一堆人要排隊去買東西，但是還有一個限制：每一個人可能會是 $M$ 個組中的成員之一（每一個人最多只會加入一個組），所以排隊會有一個新的規則：如果一個人要去排隊了，但是隊伍中有同組的人的話，那這個（有點缺德）的人就會插隊插到自己組的末端。會跟你說隊伍有誰，和一堆進入隊伍／最前面的人離開的指令，請模擬這個情況。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/UVa/540/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"指令數 $\\\\leq 2\\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$M\\\\leq 1000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/deque_practice/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"來實作 Deque 吧！這一次，需要支援四個操作：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"POP_FRONT\"\n          }), \" 和 \", _jsx(_components.code, {\n            children: \"POP_BACK\"\n          }), \"，分別代表要從前面和後面拿出東西出來並輸出拿出來的東西的值，如果沒有東西可以拿的話，那就輸出 \", _jsx(_components.code, {\n            children: \"empty!\"\n          }), \"。\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"PUSH_FRONT\"\n          }), \" $x$ 和 \", _jsx(_components.code, {\n            children: \"PUSH_BACK\"\n          }), \" $x$，分別代表要從前面和後面插入一個值為 $x$ 的物體。並且保證總共不會超過 $N$ 個操作。\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/deque_practice/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N\\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"堆疊（Stack）","depth":1,"code":"堆疊（Stack）"},{"text":"實作原理","depth":2,"code":"堆疊（Stack）-實作原理"},{"text":"STL","depth":2,"code":"堆疊（Stack）-STL"},{"text":"STL 堆疊操作","depth":3,"code":"堆疊（Stack）-STL-STL 堆疊操作"},{"text":"習題","depth":2,"code":"堆疊（Stack）-習題"},{"text":"佇列（Queue）","depth":1,"code":"佇列（Queue）"},{"text":"實作原理","depth":2,"code":"佇列（Queue）-實作原理"},{"text":"環狀佇列","depth":2,"code":"佇列（Queue）-環狀佇列"},{"text":"STL","depth":2,"code":"佇列（Queue）-STL"},{"text":"STL 佇列操作","depth":3,"code":"佇列（Queue）-STL-STL 佇列操作"},{"text":"習題","depth":2,"code":"佇列（Queue）-習題"},{"text":"雙端佇列（Deque）","depth":1,"code":"雙端佇列（Deque）"},{"text":"STL","depth":2,"code":"雙端佇列（Deque）-STL"},{"text":"STL 雙端佇列操作","depth":2,"code":"雙端佇列（Deque）-STL 雙端佇列操作"},{"text":"常數爭議","depth":1,"code":"常數爭議"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}