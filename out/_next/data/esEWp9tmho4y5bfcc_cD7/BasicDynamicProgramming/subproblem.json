{"pageProps":{"props":{"mdxPath":"guide/content/BasicDynamicProgramming/subproblem/subproblem.mdx","code":"BasicDynamicProgramming/subproblem","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"coming":false},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"coming":false},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"coming":false},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"Structured Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"coming":false},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"]},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicDynamicProgramming/subproblem/subproblem.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure, Info, Problem, Refcode, Theorem} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"爬樓梯問題\",\n      children: \"爬樓梯問題\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"就讓我們直接來看看這道問題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/17\",\n      src: \"NCOJ 17\",\n      name: \"[Tutorial] 爬樓梯問題\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/17/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/17/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/17/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/17/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"方法數要怎麼數呢？一個最直覺的想法就是直接窮舉看看，例如：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"先爬一階，接下來還有幾種爬法？\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"先爬兩階，接下來還有幾種爬法？\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設這兩種情況的答案都算好了，相加起來就可以直接得到答案。再多看幾眼，爬一階之後還有幾種爬法，不就是爬 $N-1$ 階的方法數嗎？爬兩階也同理。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在學過遞迴之後，應該就可以輕鬆的寫出以下這段程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"long long cal_ans(int n) {\\n    if (n <= 1) return 1; // base case\\n    long long ans = 0;\\n    ans += cal_ans(n - 1); // 先爬一階\\n    ans += cal_ans(n - 2); // 先爬兩階\\n    return ans;  \\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsx(_components.p, {\n        children: \"爬 $0$ 階？\"\n      }), _jsx(_components.p, {\n        children: \"什麼是爬 $0$ 階呢，可以想成就是原地不動的意思，因此只有一種方法。在解決這類遞迴問題時我們常常會有這種最極端的 base case，這時常常需要靠一些想像來解釋其意義以得出確切的回傳值。\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"然而快樂傳上去的結果就是獲得一坨 TLE，甚至光本地測範測三就跑不完了。可以想像因為我們在 $N$ 的時候就窮舉了兩種情況、$N-1$ 也窮舉兩種情況……這樣下去執行的時間會是指數等級的成長！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這時候就要善用動態規劃的概念——用記憶換取時間，假設我們想要計算出爬 $86$ 階的方法數，那只要先記下爬 $85$ 階、和 $84$ 階的方法數，不就可以 $O(1)$ 得到答案了嗎？同理，要怎麼記下 $85$ 階的方法數呢？只要先記下爬 $84$ 階、和 $83$ 階的方法數就可以了……依此類推。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"咦？怎麼感覺到頭來還是每個值都要計算一遍，這樣真的有優化到嗎？優化得可多了，畢竟要記住一件事情之前，你總還是要知道過答案一次，但動態規劃與暴力法不同的是，我們算過一次就不要再算了，也就是\", _jsx(_components.strong, {\n        children: \"計算完畢的當下我們直接把他記起來\"\n      }), \"！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"舉例來說，若要算爬 $5$ 階的方法數，暴力法的流程可能如下：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDynamicProgramming/subproblem/figure/fib_call1.png\",\n      width: \"750\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"總共就需要花費 $15$ 次呼叫，但如果運用動態規劃的概念呢？\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDynamicProgramming/subproblem/figure/fib_call2.png\",\n      width: \"750\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"就只剩下 $9$ 次呼叫，雖然看起來好像沒省多少，但隨著 $N$ 變大，省下來的呼叫次數可是非常可觀的。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但具體來說到底變多快呢？詳細一點分析看看：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"只有 $2\\\\sim N$ 這麼多種答案是我們不知道的。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"每種答案都只計算一次。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"每種答案的計算都是花 $O(1)$ 來得知答案。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此我們得出了結論：使用動態規劃後的時間複雜度是 $O(N)$，比原先指數級的時間複雜度好非常多！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"別緊張，要記下答案的人可不是你，可是電腦，因此我們可以直接開一個夠長的陣列來存下答案。寫成程式碼大概就是下列這種樣子：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"bool visited[87]; // 是否已經記起來\\nlong long dp[87];\\n\\nlong long cal_ans(int n) {\\n    if (n <= 1) return 1; // base case\\n    if (visited[n] == 1) return dp[n]; // 已經記起來了，直接回傳\\n    visited[n] = 1;\\n    dp[n] = 0;\\n    dp[n] += cal_ans(n - 1); // 先爬一階\\n    dp[n] += cal_ans(n - 2); // 先爬兩階\\n    return dp[n];\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"是不是意外的單純呢？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"順帶一提，如果把爬 $n$ 階的答案寫成一個數列，會得到 $1, 1, 2, 3, 5, 8, \\\\ldots$ 這樣的東西，這個序列又被稱為\", _jsx(_components.strong, {\n        children: \"費氏數列\"\n      }), \"，在組合數學上是一個非常經典的數列。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"子問題？\",\n      children: \"子問題？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"透過前面的引導，我們來討論在動態規劃中一個相當重要的概念——子問題。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在使用動態規劃處理一個問題時，到底是哪些記憶才能有效的幫忙加速演算法呢？沒錯，其實大多是那些\", _jsx(_components.strong, {\n        children: \"形式與原問題相同、但規模更小\"\n      }), \"的「子問題」。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"在處理回家問題時，我們記著的是「從學校回家」這個同樣是詢問從指定地點走回家的子問題。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"在處理爬樓梯問題時，我們要回答爬了 $n$ 階的方法數，也是同樣只把規模更小的 $n-1$ 階、$n-2$ 階、……、直到 $1$ 階的方法數記起來。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也因此，在動態規劃的問題中，熟記以下流程是非常重要的：\"\n    }), \"\\n\", _jsx(Theorem, {\n      type: \"tips\",\n      title: \"動態規劃思考方向\",\n      number: \"1\",\n      children: _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"找到值得記憶的子問題。\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"已經提過多次，不再多說。\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"找到使用子問題湊出答案的方法。\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"例如知道爬了 $n$ 階的方法數等同於爬了 $n-1$ 階、和 $n-2$ 階的方法數總和。\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"知道最簡單的子問題要怎麼處理。\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"如何從家裡回家？答案是不用動；爬一階的樓梯有幾種方法？當然只有一種。\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"在不斷把子問題又切割成更小子問題的過程中，總要有個終止點，這就是所謂「最簡單的子問題」。\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"用另一個角度想，其實上述在做的事情就跟設計多數遞迴函式是相同的，只是我們多了一道技巧，那就是透過記憶來加速了整個遞迴所花的時間。這也是動態規劃與一般遞迴最大的差別——同樣的子問題，會被呼叫非常多次，進而提高「記憶」的幫助效果。這樣的關鍵差別，我們在演算法中稱之為「\", _jsx(_components.strong, {\n        children: \"重複子問題\"\n      }), \"」。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果沒有重複子問題的話，既然每個子問題都只會被呼叫一次，又何必需要記憶呢？\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"線性遞迴\",\n      children: \"線性遞迴\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在思考動態規劃的問題時，時常需要記憶的子問題是顯然的，但卻常常拿著一些已經記好子問題不知如何湊出真正問題的答案。該怎麼解決呢？很可惜，這通常沒有一個制式化的訣竅，唯有多練習題目才是正道。因此，這裡就帶大家從最基本的動態規劃題型開始了解——也就是我們的線性遞迴函數。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所謂線性遞迴函數呢，最簡單的形式就是要計算目標函數 $f(n)$，並且 $f(n)$ 的值會由「一些較小的項乘上某些倍數後」總和得出。以前面學到的爬樓梯問題為例，當我們把爬 $n$ 階的方法數寫成 $f(n)$ 時，可以得出 $f(n) = f(n - 1) + f(n - 2)$ 這個式子，這樣一個計算的式子又被稱為「\", _jsx(_components.strong, {\n        children: \"遞迴式\"\n      }), \"」。讓我們看看更多例子：\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下幾種遞迴式是線性遞迴：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$f(n) = 2f(n - 1) + f(n - 2)$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$f(n) = f(n - 1) - f(n - 3) + 87f(n - 5)$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下幾種遞迴式則不是線性遞迴：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$f(n) = f(n - 1)^2$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$f(n) = f\\\\left(\\\\left\\\\lceil \\\\frac{n}{5}\\\\right\\\\rceil\\\\right) + f\\\\left(\\\\left\\\\lceil \\\\frac{7n}{10}\\\\right\\\\rceil\\\\right) + c\\\\cdot n$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不過，光是寫出遞迴式其實並不能夠完整呈述一個遞迴函數，有一個必要的要素常被忽略、卻是不可或缺的——那就是「\", _jsx(_components.strong, {\n        children: \"基底\"\n      }), \"」，也常被稱作 \", _jsx(_components.strong, {\n        children: \"base case\"\n      }), \"。實際上，爬樓梯問題的遞迴函數要寫完整的一點的話應該寫成如下：\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"f(n) =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"1 & n \\\\leq 1 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"f(n - 1) + f(n - 2) & \\\\text{otherwise}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在上述式子中，我們把所謂「最簡單的子問題」寫進去了，而這就是一個遞迴函數需要具備的基底。由於基底通常是容易得出的，因此時常我們在敘述、甚至設計演算法時都會省略基底的敘述，但寫程式時可千萬不能忽略這樣的小細節。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當然，線性遞迴函數在數學上還有更廣泛的定義，但不在我們這次的討論範圍中，讀者只需要先簡單知道以上的形式就可以了。接下來，我們就來用兩道線性遞迴的題目試試身手：\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"線性遞迴-Brick Wall Patterns\",\n      children: \"Brick Wall Patterns\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=d038\",\n      src: \"ZeroJudge d038\",\n      name: \"Brick Wall Patterns\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/ZeroJudge/d038/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/d038/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d038/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d038/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"若要找出需要記憶的子問題，想必只能是記下所有「長度為 $n$ 的牆」的擺放方法數了。但數擺放方法數的題目要怎麼利用子問題呢？通常，我們會想像這些磚塊是「由左擺放至右的」，也因此，「最後擺了什麼」可能就可以成為找出利用子問題的關鍵。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"若我們嘗試畫出長度為 $4$ 的牆：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDynamicProgramming/subproblem/figure/len4.png\",\n      width: \"400\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"好像能發現，我們總是可以在盡量右邊切下一刀，並把左右邊分開來：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDynamicProgramming/subproblem/figure/len4_split.png\",\n      width: \"400\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"更進一步的，只要看到能夠切開的地方就切開的話：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDynamicProgramming/subproblem/figure/len4_split_all.png\",\n      width: \"400\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也因此，這個「擺放」的流程，就可以想成是不斷擺上互相能夠切開的小磚牆，而經過仔細思考之後就會發現：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"當不能切開的長度是 $1$ 時，肯定只有把磚塊直著放一種可能。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"當不能切開的長度是 $2$ 時，肯定只有把兩個磚塊橫著放一種可能。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"當長度超過 $2$ 時，肯定有一個地方是可以切開的。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯，這告訴了我們擺放長度為 $n$ 的牆可以看成：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"擺放不能切開的長度 $1$ 磚牆在後面，得到長度為 $n-1$ 的牆的子問題。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"擺放不能切開的長度 $2$ 磚牆在後面，得到長度為 $n-2$ 的牆的子問題。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"兩個方法的總和。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，其實這道問題與爬樓梯問題一樣，都是費氏數列，開心的修改輸入格式之後傳上去獲得 AC 吧！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"線性遞迴-DELIVERY DEBACLE\",\n      children: \"DELIVERY DEBACLE\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=d054\",\n      src: \"ZeroJudge d054\",\n      name: \"DELIVERY DEBACLE\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/ZeroJudge/d054/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/d054/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d054/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d054/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"風格很像的題目，不過這次可不再是費氏數列了！但不怕，我們用類似的思路下去思考這題。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一樣，試著畫出長度夠短時的狀況，從題目給的圖片我們似乎可以得出：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"當不能切開的長度是 $1$ 時，肯定只有直著放兩顆方形蛋糕一種可能。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"當不能切開的長度是 $2$ 時，肯定是由一個 L 形 + 一個方形組成，旋轉後共有四種可能。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"當長度超過 $2$ 時，肯定有一個地方是可以切開的。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，該題的遞迴式便呼之欲出：$f(n) = f(n - 1) + 4f(n - 2)$。但如果就這樣快樂的寫出以下這段程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"long long cal_ans(int n) {\\n    if (n <= 1) return 1;\\n    if (visited[n] == 1) return dp[n];\\n    visited[n] = 1;\\n    dp[n] = 0;\\n    dp[n] += cal_ans(n - 1);\\n    dp[n] += 4 * cal_ans(n - 2);\\n    return dp[n];\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"居然就拿到 Wrong Answer！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"多想一下，其實我們還漏了一種狀況：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"當不能切開的長度是 $3$ 時，肯定是由兩個 L 形上下對接組成，翻轉後共有兩種可能。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicDynamicProgramming/subproblem/figure/len3.png\",\n      width: \"123\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯，其實這題要當長度超過 $3$ 時，才肯定有一個地方是可以切開的。也就是說遞迴式實際上是 $f(n) = f(n - 1) + 4f(n - 2) + 2f(n - 3)$，我們得多補一行\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"    dp[n] += 2 * cal_ans(n - 3);\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"才可以正確……先等等，這樣可是會 WA 的，還記得前面我們才強調過遞迴的「基底」很容易被忽略嗎？沒錯，在這裡，要注意到當 $n=2$ 時會不小心呼叫到 \", _jsx(_components.code, {\n        children: \"cal_ans(-1)\"\n      }), \" 造成問題！這裡可以簡單的在前面補上一行\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"    if (n == 2) return 5;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"就能答對這題了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們順便複習一下這題完整的遞迴函數形式：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"f(n) =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"1 & n \\\\leq 1 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"5 & n = 2 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"f(n - 1) + 4f(n - 2) + 2f(n - 3) & \\\\text{otherwise}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過話又說回來，為什麼會發生漏了一種狀況的情況呢？殘忍一點地說，這其實沒有什麼通則，反而比較像是一種「細心程度」的檢驗。從上面的題目中我們可以學到，當在處理「找到使用子問題湊出答案的方法」時，我們是需要考慮好所有可能性的！這需要多花一點心思來檢驗自己有沒有漏掉任何情況，只能說解題時要多加小心囉！\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在這個章節中，我們簡單了解了在解決動態規劃問題時最基礎的概念、以及需要注意的事項。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們知道在設計動態規劃的演算法時，最重要的就是找到有效的「重複子問題」，並透過思考和經驗來嘗試找到如何用子問題得到完整問題的答案。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"了解完子問題後，我們學習到了線性遞迴的一般解題思路與需要注意的細節；而在下一個章節，我們會先繼續圍繞在線性遞迴上，來讓大家透過已經熟悉的線性遞迴問題了解處理動態規劃問題時在競賽程式中不可或缺的常識。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1476\",\n      src: \"TIOJ 1476\",\n      name: \"會議中心（Room）\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/TIOJ/1476/description.mdx\",\n      constraintsMdx: \"guide/problems/TIOJ/1476/constraints.mdx\",\n      importMdx: \"guide/problems/TIOJ/1476/description.mdx\",\n      importMdx: \"guide/problems/TIOJ/1476/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=d389\",\n      src: \"ZeroJudge d389\",\n      name: \"A Graph Problem\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/ZeroJudge/d389/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/d389/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d389/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d389/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=b229\",\n      src: \"TOI 2009 初選 pA\",\n      name: \"路徑問題\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/TOI/2009_pre_A/description.mdx\",\n      constraintsMdx: \"guide/problems/TOI/2009_pre_A/constraints.mdx\",\n      importMdx: \"guide/problems/TOI/2009_pre_A/description.mdx\",\n      importMdx: \"guide/problems/TOI/2009_pre_A/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/17/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"小明現在需要爬 $N$ 階的樓梯，他可以一次爬一階或兩階，請問他有幾種方法？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"舉例來說，假設小明需要爬三階的樓梯，那他有以下三種爬法：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"每次都只爬一階，也就是依序爬上第一階、第二階再到第三階。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"先爬第一階後，直接一口氣爬到第三階。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"直接爬到第二階後，再爬到第三階。\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/17/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq N < 87$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d038/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"如果我們要用常見的長度為高度兩倍的磚塊建一道磚牆，並且牆的高度為兩個單位，根據牆的長度，我們可以建出不同數量的花樣。從下圖我們可以看出：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/ZeroJudge/d038/figure/figure.gif\",\n      width: \"200\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"長度為 1 單位的牆只有一種花樣—就是讓磚塊直立。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"長度為 2 的牆有 2 種花樣—兩個平躺的磚磈疊在一起以及兩個直立的磚塊併在一起。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"長度為 3 的牆有三種花樣。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"長度為 4 的牆你可以找出幾種花樣？那長度為 5 的牆呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"你的工作是要寫一個程式，給它牆的長度（$n$），它就算出這道牆可以有幾種花樣。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d038/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n \\\\leq 50$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d054/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Wolfgang Puck 有兩個很特別的習慣：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"他只做兩種形狀的蛋糕。一種是面積為一單位的方形，另一種是面積為三單位的 L 形。\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"他只用特定尺寸的盒子來裝蛋糕。這些盒子的寛度都是二單位，但各種不同長度都有。\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有一天，Wolfgang 想知道有幾種不同的方式可以把蛋糕裝滿一個特定尺寸（$2\\\\times n$）的盒子。你能幫他嗎？\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/ZeroJudge/d054/figure/figure1.jpeg\",\n      width: \"350\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上圖中，左圖為蛋糕的尺寸，右圖為裝滿長度 $6$ 的盒子的一種方法。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/ZeroJudge/d054/figure/figure2.jpeg\",\n      width: \"400\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上圖則是裝滿長度為 $2$ 的盒子的所有方法，共有 $5$ 種。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d054/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n \\\\leq 40$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1476/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"拼拼樂會議中心是一個 $N\\\\times N$ 的超大型可分割式會議中心。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每一個 $1\\\\times 1$ 的空間都可以用隔板隔開，因此該會議中心最多可以有 $n^2$ 個獨立的 $1\\\\times 1$ 會議室，如要較大的會議室，則需將隔板拿掉使得二或更多個相鄰的 $1\\\\times 1$ 空間可以合併使用。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每間 $1\\\\times 1$ 會議室皆以其二維平面座標為編號。選定一個 $1\\\\times 1$ 會議室並給予編號 $(0,0)$，相鄰的上、下、左、右會議室編號則依序為 $(0, 1), (0, -1), (-1, 0), (0, 1)$。會議中心外租會議室時，必須按照下列規則，組成合乎需求的會議室。一開始先以編號為 $(0, 0)$ 的空間供租用，如果空間不足，則依序向右方、上方、左方、下方的空間合併成為較大的會議室。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每次擴充時，新加入的空間必須為正方形且該邊長必須與相鄰的擴充前會議室邊長相同，如此才能確保合併後的會議室一定是四方形。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下圖為例，第一次擴充租用空間時，右邊編號為 $(1, 0)$ 的會議室空間會被跟編號為 $(0,0)$ 的會議室合併。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/TIOJ/1476/figure/1476_1.jpg\",\n      width: \"300\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"第二次擴充時，在 $(0, 0), (1, 0)$ 上方的四個（$2\\\\times 2$ 正方形）小會議室會被合併進來。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"第三次擴充時，在 $(0,0) \\\\sim (0, 3)$ 左邊的 $9$ 個（$3\\\\times 3$ 正方形）小會議室會被合併進來。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"第四次擴充時，在 $(-3,0) \\\\sim (1,0)$ 下方的 $25$ 個（$5\\\\times 5$ 正方形）小會議室會被合併進來。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"第五次擴充時，在 $(0,-5) \\\\sim (0,2)$ 右方的 $64$ 個（$8\\\\times 8$ 正方形）小會議室會被合併進來。後續的擴充則依此類推。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現在，若給定一個 $n$ 的值，請計算第 $n$ 次擴充時的正方形會議室的邊長。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1476/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n\\\\leq 45$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d389/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"給一個有 $n$ 個節點的無向圖形（圖形如下\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/ZeroJudge/d389/figure/d389.png\",\n      width: \"500\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"你的任務是：給你 $n$，請算出這個圖形有以下性質的節點子集合共有多少個。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"集合裡不能有兩個相鄰的點。例如圖形中有 $n=3$ 個節點，則集合 $\\\\{1,2\\\\}$ 是違法的，而集合 $\\\\{1,3\\\\}$ 是合法的。\", _jsx(_components.br, {}), \"\\n\", \"當這個集合能再加入任一節點，卻可以不和其它節點相鄰，則這個集合是違法的。例如圖形中有 $n=5$ 個節點，則集合 $\\\\{1,5\\\\}$ 是違法的，因為這個集合再加入節點 $3$ 仍不和其它節點相鄰，而集合 $\\\\{1,3,5\\\\}$ 則是合法的。\", _jsx(_components.br, {}), \"\\n\", \"所以，當圖形有 $n=5$ 個節點時，應該有 $4$ 個合法的集合：$\\\\{1,3,5\\\\},\\\\{2,4\\\\},\\\\{2,5\\\\},\\\\{1,4\\\\}$。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d389/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"輸入至 EOF 結束\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n\\\\leq 76$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TOI/2009_pre_A/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"考慮在 $X-Y$ 平面上的整數格子點上建構長度為 $N$ 的路徑。其中在格子點 $(x, y)$ 時，路徑可以往右走到格子點 $(x+1, y)$；或往左走到格子點 $(x-1, y)$；或往上走到格子點 $(x, y+1)$。長度為 $N$ 的路徑必須經過 $N$ 個相異的邊。試問由原點 $(0, 0)$ 出發並按照上述規則所形成長度為 $N$ 的路徑有幾條？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TOI/2009_pre_A/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N \\\\leq 50$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"爬樓梯問題","depth":1,"code":"爬樓梯問題"},{"text":"子問題？","depth":1,"code":"子問題？"},{"text":"線性遞迴","depth":1,"code":"線性遞迴"},{"text":"Brick Wall Patterns","depth":2,"code":"線性遞迴-Brick Wall Patterns"},{"text":"DELIVERY DEBACLE","depth":2,"code":"線性遞迴-DELIVERY DEBACLE"},{"text":"小結","depth":1,"code":"小結"},{"text":"習題","depth":1,"code":"習題"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}