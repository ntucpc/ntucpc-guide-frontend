{"pageProps":{"props":{"mdxPath":"guide/content/BasicDynamicProgramming/structure/structure.mdx","code":"BasicDynamicProgramming/structure","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"coming":false},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"coming":false},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"Structured Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"coming":false},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"]},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicDynamicProgramming/structure/structure.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ContentReference, Info, Problem, Refcode, Theorem} = _components;\n  if (!ContentReference) _missingMdxReference(\"ContentReference\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"複習一遍\",\n      children: \"複習一遍\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"為了帶出「必要元素」的概念，我們先來幫大家複習一遍我們目前的所學。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"在\", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicDynamicProgramming/subproblem\",\n          mode: \"article\",\n          topicTitle: \"基礎動態規劃\",\n          articleTitle: \"第一道動態規劃問題\"\n        }), \"中，我們了解到記錄子問題的重要性，因為\", _jsx(_components.strong, {\n          children: \"同樣的子問題會被呼叫很多次\"\n        }), \"，也就有了\", _jsx(_components.strong, {\n          children: \"用記憶換取時間\"\n        }), \"的優勢。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Theorem, {\n      type: \"tips\",\n      title: \"動態規劃思考方向（複習）\",\n      number: \"1\",\n      children: _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"找到值得記憶的子問題。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"找到使用子問題湊出答案的方法。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"知道最簡單的子問題要怎麼處理。\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"在 \", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicDynamicProgramming/top_down_and_bottom_up\",\n          mode: \"article\",\n          topicTitle: \"基礎動態規劃\",\n          articleTitle: \"Top down 與 Bottom up\"\n        }), \" 中，我們學到動態規劃的兩種\", _jsx(_components.strong, {\n          children: \"實作方向\"\n        }), \"，Top down 和 Bottom up。另一面，我們還發現了透過\", _jsx(_components.strong, {\n          children: \"整理遞迴式\"\n        }), \"能夠\", _jsx(_components.strong, {\n          children: \"加速計算的速度\"\n        }), \"。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsx(_components.p, {\n        children: \"（複習）\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Top down：呼叫 $f(4)$ $\\\\xrightarrow{\\\\text{發現 }f(3)\\\\text{ 和 }f(2)\\\\text{ 都還沒計算過 }}$ 呼叫 $f(3)$ 和 $f(2)$ $\\\\rightarrow$ $\\\\ldots$ $\\\\xrightarrow{\\\\text{等待子問題計算完畢}}$ 算出 $f(4)$\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Bottom up：已知 $f(0)$ 和 $f(1)$ $\\\\xrightarrow{\\\\text{直接得到值計算總和}}$ 算出 $f(2)$ $\\\\xrightarrow{\\\\text{直接得到值計算總和}}$ 算出 $f(3)$ $\\\\xrightarrow{\\\\text{直接得到值計算總和}}$ 算出 $f(4)$\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"在\", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicDynamicProgramming/state_and_transition\",\n          mode: \"article\",\n          topicTitle: \"基礎動態規劃\",\n          articleTitle: \"狀態與轉移\"\n        }), \"中，我們學到「\", _jsx(_components.strong, {\n          children: \"狀態\"\n        }), \"」和「\", _jsx(_components.strong, {\n          children: \"轉移\"\n        }), \"」的用語以及其意義，並了解到一套設計動態規劃演算法的流程。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Theorem, {\n      type: \"definition\",\n      title: \"動態規劃演算法的用語（複習）\",\n      refId: \"dpterms\",\n      number: \"1\",\n      children: [_jsx(_components.p, {\n        children: \"在動態規劃演算法中，會有三個重要的元素\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"狀態：用少少的幾個參數，來描繪出答案被構建出來的「\", _jsx(_components.strong, {\n            children: \"過程\"\n          }), \"」。\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"轉移：狀態與狀態之間的\", _jsx(_components.strong, {\n            children: \"關係\"\n          }), \"，用來表示「過程」之間是如何轉換的、以及其轉換後造成的變化。\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"而將轉移產生的變化寫成數學式子後，就變成了「轉移式」。\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"初始狀態：要進入一段過程就必須有一個開始，你的答案是從何開始算起的？\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(Theorem, {\n      type: \"tips\",\n      title: \"動態規劃的解題守則（複習）\",\n      refId: \"dptips\",\n      number: \"2\",\n      children: _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"設計狀態\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"寫出轉移式\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"找出初始狀態\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"找出所求答案\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"計算複雜度\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"寫成程式碼\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"在\", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicDynamicProgramming/multidimensional\",\n          mode: \"article\",\n          topicTitle: \"基礎動態規劃\",\n          articleTitle: \"多個維度的 DP\"\n        }), \" 中，我們學到狀態的定義其實非常自由，可以涉及到\", _jsx(_components.strong, {\n          children: \"多個參數\"\n        }), \"，又稱「多維 DP」。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsx(_components.p, {\n        children: \"（複習）增加維度與不增加維度的明顯差異，以例題「股票买卖 V」為例：\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"在\", _jsx(ContentReference, {\n            type: \"content\",\n            code: \"BasicDynamicProgramming/state_and_transition\",\n            mode: \"article\",\n            topicTitle: \"基礎動態規劃\",\n            articleTitle: \"狀態與轉移\"\n          }), \"的做法中，我們是在把買賣股票「每一組買賣」都當成一種過程的變化，也因此，每一次轉移跨越的天數就會是 $O(N)$ 級別的。\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"$dp[i] = \\\\max(dp[i - 1], \\\\max_{1\\\\leq j<i}\\\\{ a_i - a_j + dp[j-2]\\\\})$\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"在\", _jsx(ContentReference, {\n            type: \"content\",\n            code: \"BasicDynamicProgramming/multidimensional\",\n            mode: \"article\",\n            topicTitle: \"基礎動態規劃\",\n            articleTitle: \"多個維度的 DP\"\n          }), \" 的做法裡，我們是在把「每一天的決定」當成一種過程的變化，而一天的決定通常只取決於前一天或前兩天的結果，所以每一次轉移跨越的天數就會是 $O(1)$。\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"$dp[i][0] = \\\\max(dp[i - 1][0], dp[i - 1][1] + a_i)$\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"$dp[i][1] = \\\\max(dp[i - 1][1], dp[i - 2][0] - a_i)$\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"在\", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicDynamicProgramming/knapsack\",\n          mode: \"article\",\n          topicTitle: \"基礎動態規劃\",\n          articleTitle: \"背包問題\"\n        }), \"中，我們更是發現狀態的定義還可以再自由一些，\", _jsx(_components.strong, {\n          children: \"參數甚至可以是數值\"\n        }), \"。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsx(_components.p, {\n        children: \"（複習）令 $dp[i][j]$ 是「前 $i$ 個物品中，湊出總重量為 $j$ 的最大總價值」，豁然開朗，整個轉移式的寫法就很直接了：\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"不取第 $i$ 個物品：對應到子問題 $dp[i - 1][j]$\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"取了第 $i$ 個物品：對應到子問題 $dp[i - 1][j - w_i] + v_i$\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"最後在\", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicDynamicProgramming/rolling\",\n          mode: \"article\",\n          topicTitle: \"基礎動態規劃\",\n          articleTitle: \"滾動 DP\"\n        }), \" 中，我們了解到動態規劃演算法的實作還可以有各種\", _jsx(_components.strong, {\n          children: \"特殊情況下的變化\"\n        }), \"。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"    for (int i = 1; i <= n; ++i)\\n        for (int j = wmax; j >= w[i]; --j)\\n            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"複習完畢，接下來就讓我們進入主題吧！\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"三大要素\",\n      children: \"三大要素\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"動態規劃演算法花樣這麼多，有沒有一個很乾脆的概念整理出個「大方向」呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其實很多時候，我們在設計一個動態規劃演算法時，只是在遵守著幾個概念而已，而最常被大家提出來的三個概念，筆者在這裡將他們稱做「三大要素」，並一一介紹之。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"三大要素-重複子問題\",\n      children: \"重複子問題\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這也是我們在最一開始就有提過的，就是因為同一個問題會被重複呼叫很多次，才會有「用記憶換取時間」的意義，就好比以下轉移式：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i] = dp[i - 1] + i\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上面這種轉移式，所以我們是把陣列取名成 $dp$ 了，但他卻不太算是一個動態規劃演算法，這是因為每個子問題也就只會被後一個狀態呼叫而已，根本沒有子問題會被重複呼叫。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"又好比下列這道例題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1643\",\n      src: \"CSES 1643\",\n      name: \"Maximum Subarray Sum\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/CSES/1643/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1643/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1643/description.mdx\",\n      importMdx: \"guide/problems/CSES/1643/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在網路上，許多人會將這題解釋成一道動態規劃例題，但他們寫出來的轉移式也許會是這樣的：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i] = \\\\max(dp[i - 1] + a_i, a_i)\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也就是令 $dp[i]$ 為結尾在 $i$ 的最大區間和，轉移式看起來很自然，但同樣有「每個子問題只被呼叫一次」的問題，因此說他是動態規劃演算法，就有點不太自然。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"甚至還可能有人這樣寫：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i] = \\\\max_{0\\\\leq j<i}\\\\{s[i] - s[j]\\\\}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其中 $s[i]$ 是前綴和陣列，為 $x_1, x_2, \\\\ldots, x_i$ 的和。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這連遞迴都沒有，只不過是在「對每個右界獨立找到最好的左界」而已。甚至進一步來說，每個 $dp[i]$ 之間互相是不影響的，導致我們也不清楚該稱呼他們為「$n$ 個不同問題」還是「$n$ 個子問題」。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而拿最直接的例子，在費氏數列的動態規劃作法中，若不將子問題紀錄下來，重複的呼叫就會讓時間複雜度直接退化到指數量級，這時候使用動態規劃演算法將時間複雜度變成多項式時間，其優勢才能被凸顯出來。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"三大要素-最佳子結構\",\n      children: \"最佳子結構\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在講解背包問題這道例題時，我們曾嘗試過以下這種狀態定義方法：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"定義 $dp[i]$ 是「前 $i$ 個物品的最佳解」\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當時我們馬上就給出了一個「這樣定義狀態會錯」的反例，透過這個反例，我們也了解到了子問題狀態的設計不能太過草率。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"為了將這種正確和錯誤的子問題定義方式做出區別，人們對正確子問題的性質有了一個稱呼：\", _jsx(_components.strong, {\n        children: \"最佳子結構\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"什麼概念呢？明確的說：\"\n    }), \"\\n\", _jsx(Theorem, {\n      type: \"definition\",\n      title: \"最佳子結構\",\n      number: \"2\",\n      children: _jsx(_components.p, {\n        children: \"一個子問題定義方式擁有最佳子結構，代表你可以透過直接呼叫該子問題的最佳解，來進行後續的轉移。\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"針對前面講的錯誤背包問題狀態定義，就是一種「沒有最佳子結構」的例子，因為當我們讓每個子問題都紀錄自己的最佳解時，更大的子問題就無法從這些子問題中轉移出自己的最佳解了！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"設計狀態時沒有最佳子結構，是一個有時候連高手都會犯的錯誤。讀者在思考問題時，若要從動態規劃的角度下手，不妨可以多思考看看：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"當我試圖呼叫子問題來湊出問題的解答時，有沒有可能子問題本身\", _jsx(_components.strong, {\n          children: \"稍微表現得差一些\"\n        }), \"反而會讓整個問題的答案變好？\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果遇到這種狀況，還請務必多想想是否遺漏了什麼「轉移過程中不可或缺的參數」，當遇到這種情況時，最直接的方法就是\", _jsx(_components.strong, {\n        children: \"直接把這個參數放進狀態\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"在背包問題中使用到的手法就成為了一個例子：因為在子問題中我們刻意選一個總重較少的解才能獲得最佳解，我們不妨就把總重這個參數放進狀態裡！\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"三大要素-無後效性\",\n      children: \"無後效性\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這是一個隱藏性質，到目前為止，讀者可能還不會注意到他的重要性。舉個例題當例子：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://www.luogu.com.cn/problem/P5165\",\n      src: \"洛谷 P5165\",\n      name: \"xtq的棋盘\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/Luogu/P5165/description.mdx\",\n      constraintsMdx: \"guide/problems/Luogu/P5165/constraints.mdx\",\n      importMdx: \"guide/problems/Luogu/P5165/description.mdx\",\n      importMdx: \"guide/problems/Luogu/P5165/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"由於跟本章節關係不大，我們先不管範圍和輸出的方式。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這裡我們先直接試著用動態規劃解決看看，就先定義 $dp[i]$ 是棋子位於 $i$ 時，期望到達 $0$ 的秒數吧！那麼就有\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i] = \\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"0 & i = 0\\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"prb \\\\cdot dp[i - 1] + (1 - prb) \\\\cdot dp[i + 1] + 1 & 0 < i < n \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"dp[i - 1] + 1 & i = n\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果你很開心的想把上面這段轉移式寫成程式的話，就會發現一個很嚴重的問題：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"要計算 $dp[1]$，我們就需要 $dp[2]$，但要計算 $dp[2]$，我們也需要 $dp[1]$！\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"從頭到尾好像都只有 $dp[0]$ 的值是直接被確定的啊？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這就麻煩了，原本在解動態規劃問題時，我們總是很直接的「從小算到大」，所有的子問題在計算時，所謂「更小的子問題」已經早有解答了。但現在，這些子問題沒有所謂的「大小關係」，這是因為他們會互相呼叫，導致不存在「良好的計算的順序」。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"從上面的問題可以注意到，就算能輕易的寫出動態規劃的轉移式，也得幫這些狀態找到「計算的順序」，而確實是存在著一些不好找計算順序的問題，也因此會造成實作上的麻煩。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但這次舉的例子，是直接找不到一個合理的計算順序，由於不是本節要討論的對象，僅做為提示，在上面舉出的問題是可以直接將 $dp[i]$ 當成函數對待後，透過解方程式的方式解決的，但這就不是動態規劃演算法了！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也因此，這種「存在一個良好計算順序」的性質，就被稱作為「無後效性」，是動態規劃演算法中不可或缺的重要性質。在後續的章節中，這樣的概念我們能幫助讀者透過圖論的知識點來進行加強，這裡讀者可以先對他有一個認知就好。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"使用動態規劃的時機\",\n      children: \"使用動態規劃的時機\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"很可惜，想要找到判斷何時能使用動態規劃的通則，是不太實際的，但似乎又能在網路上聽到不少「這題明顯就 DP 啊」的言論，這些人是如何自信地說出這些話呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不用懷疑，這通常都是因為他們「寫的題目多」，知道以該種形式出現的題目多數情況都是用動態規劃解決，才能做出這樣的推論。也就是說，難不成我們就只能靠不斷大量刷題來培養對動態規劃的感覺嗎？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"刷題固然重要，但針對動態規劃，還是有一些思考上的技巧的：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"你在解題時，會試著把大問題切割成同樣形式的小問題去思考嗎？\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"面對「背包問題」時，試著去想最後一個物品拿或不拿，就可以發現他們分別對應到較小、形式又差不多的的問題。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"對於你要解決的問題，你會習慣想像答案被建構出來的過程嗎？\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"面對「股票买卖 V」時，不同的股票買賣過程，會得到不一樣的狀態設計方式。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在筆者的想像中，初學動態規劃的讀者讀到這裡很有可能還是對動態規劃的理解感到有些模糊，但透過一系列的教學，筆者希望能給讀者埋下一些\", _jsx(_components.strong, {\n        children: \"思考上的習慣\"\n      }), \"，讓讀者配合這些學到的東西進行題目的練習後，能更正確並迅速的掌握到動態規劃的精髓。最好的情況就是在刷題的過程能有所領悟，這樣靠自己想到的東西就會真正屬於自己。因此，在頻繁的練習過程中，也別忘了時常反思！\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"到目前為止，希望讀者對動態規劃已經有一套足夠有系統的理解了。當然，光靠這些理論也許不足以了解動態規劃的全貌，有許多的疑點都還存在著：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"目前的每一個例題、習題都只輸出「解答的數值」，尤其對於那些「最佳化問題」，在現實生活中，我們需要的可不只是答案而已，還要能達到最佳解的方法本身！這要怎麼解決呢？\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Top down 的實作方法究竟有什麼用？\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"我們常在思考動態規劃的轉移式時，會想著「最後一步操作為何」，進而推敲出那些「轉移來源」的狀態是哪些。不過這樣的思考方式似乎有些不直覺，能不能改想成「下一步操作為何」，來知道當前狀態可以轉移到哪些後續狀態呢？\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"還有沒有更多的狀態設計方法呢？\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"在幾道例題或習題中，我們曾使用「前綴和」或「前綴最大值」等技巧來加速轉移時間，這種「加速動態規劃演算法」的概念有沒有可能推廣呢？\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"就讓我們將這些問題暫時留給讀者思考，並在未來的章節一一為大家解惑！\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1643/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"有一個數列 $x_1,x_2,\\\\dots,x_n$，求所有\", _jsx(_components.strong, {\n      children: \"非空\"\n    }), \"區間之中，最大的總和是多少。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1643/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^9 \\\\leq x_i \\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/P5165/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"xtq 有一個 $1$ 行，$n+1$ 列的棋盤，從左到右編號為 $0$ 到 $n$。初始時刻，在 $m$ 位置有一顆棋子。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"xtq 會在接下來的時間裡隨機操作。具體地說，如果某一秒棋子不位於 $n$，那麽他將有 $prb$ 的機率將棋子向左移動一格，$1-prb$ 的機率向右移動一格；否則，他必然將棋子向左移動一格。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現在 xtq 想問你，期望多少秒之後棋子能夠到達 $0$。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/P5165/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq m\\\\leq n\\\\leq 10^9$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"在本題中，機率是以有理數的形式給予，且輸出的期望值必須對一質數取模。\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"複習一遍","depth":1,"code":"複習一遍"},{"text":"三大要素","depth":1,"code":"三大要素"},{"text":"重複子問題","depth":2,"code":"三大要素-重複子問題"},{"text":"最佳子結構","depth":2,"code":"三大要素-最佳子結構"},{"text":"無後效性","depth":2,"code":"三大要素-無後效性"},{"text":"使用動態規劃的時機","depth":1,"code":"使用動態規劃的時機"},{"text":"小結","depth":1,"code":"小結"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}