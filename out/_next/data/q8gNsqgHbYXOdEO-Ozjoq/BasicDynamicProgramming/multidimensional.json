{"pageProps":{"props":{"mdxPath":"guide/content/BasicDynamicProgramming/multidimensional/multidimensional.mdx","code":"BasicDynamicProgramming/multidimensional","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"coming":false},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"coming":false},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter","WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":true,"title":"拓撲排序","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 III","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/unintuitive_greedy","BasicDataStructure/set_map","BasicAlgorithm/partial_sum","BasicAlgorithm/binary_search_answer"],"coming":false},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"coming":false},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Structured binding","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased"],"coming":false},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"coming":false},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"]},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicDynamicProgramming/multidimensional/multidimensional.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ContentReference, Problem, Refcode} = _components;\n  if (!ContentReference) _missingMdxReference(\"ContentReference\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"狀態不足\",\n      children: \"狀態不足\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們來看看下面這道題目：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://atcoder.jp/contests/dp/tasks/dp_c\",\n      src: \"AtCoder Educational DP Contest Problem C\",\n      name: \"Vacation\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/AtCoder/dp_c/description.mdx\",\n      constraintsMdx: \"guide/problems/AtCoder/dp_c/constraints.mdx\",\n      importMdx: \"guide/problems/AtCoder/dp_c/description.mdx\",\n      importMdx: \"guide/problems/AtCoder/dp_c/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們先來「設計狀態」，若貿然的令 $dp[i]$ 是考慮第 $i$ 天結束的最大快樂值總和時，就會發現一個嚴重的問題──我們在轉移的時候不知道如何判斷是否連續兩天做了一樣的活動！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"左想右想，把狀態敘述得再清楚好像都解決不了這個問題，那該怎麼辦呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其實，我們在設計狀態的時候可以不要拘泥於「一個 dp 式」，俗話說的好，一個不夠那就用兩個，如果還不夠──那就用三個。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們就宣告三個 dp 式：$dpa[i], dpb[i], dpc[i]$，分別代表\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$dpa[i]$ 是經過了前 $i$ 天，且第 $i$ 天選擇了活動 A 的最大快樂值總和。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$dpb[i]$ 是經過了前 $i$ 天，且第 $i$ 天選擇了活動 B 的最大快樂值總和。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$dpc[i]$ 是經過了前 $i$ 天，且第 $i$ 天選擇了活動 C 的最大快樂值總和。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那如何寫出轉移式呢？當然是互相轉移囉！拿 $dpa$ 做為舉例：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dpa[i] = \\\\max(dpb[i - 1] + a_i, dpc[i - 1] + a_i)\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯，因為如果第 $i$ 天選擇了活動 A，那麼唯一的限制就是第 $i-1$ 天不可以有活動 A。因此，有了 $dpb$ 和 $dpc$ 的幫助，我們就可以某種程度上「指定」第 $i-1$ 天的活動，來迴避連續兩天做一樣活動的狀況。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"附上程式碼供參考\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\nconst int MAXN = 100005;\\n\\nint a[MAXN], b[MAXN], c[MAXN];\\nint dpa[MAXN], dpb[MAXN], dpc[MAXN];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    int n;\\n    cin >> n;\\n    for (int i = 1; i <= n; ++i) \\n        cin >> a[i] >> b[i] >> c[i];\\n    for (int i = 1; i <= n; ++i) {\\n        dpa[i] = max(dpb[i - 1] + a[i], dpc[i - 1] + a[i]);\\n        dpb[i] = max(dpc[i - 1] + b[i], dpa[i - 1] + b[i]);\\n        dpc[i] = max(dpa[i - 1] + c[i], dpb[i - 1] + c[i]);\\n    }\\n    cout << max({dpa[n], dpb[n], dpc[n]}) << \\\"\\\\n\\\";\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"二維 DP\",\n      children: \"二維 DP\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二維 DP-很多個 dp 式到底是怎樣？\",\n      children: \"很多個 dp 式到底是怎樣？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在前一個章節，我們提到設計動態規劃演算法的第一步是「設計狀態」，但我們好像一口氣就設計了不只一種狀態，這樣真的合理嗎？其實我們不妨用這種方式去想：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"$dp[i][j]$ 是經過了前 $i$ 天，且第 $i$ 天選擇了第 $j$ 種活動的最大快樂值總和。\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"這裡的 $j=0, 1, 2$ 分別就對應到活動 A, B, C。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯！就是直接把 dp 狀態想成「二維」的就好了。還記得我們在介紹「狀態」這個用語時有提到，其實 dp 的狀態是用少少的幾個參數定義出來的，因此當然不會永遠都只有一個 $i$ 囉。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"甚至用這種方式去實作的話，就可以把程式碼再寫得美一些：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\nconst int MAXN = 100005;\\n\\nint happiness[MAXN][3];\\nint dp[MAXN][3];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    int n;\\n    cin >> n;\\n    for (int i = 1; i <= n; ++i) \\n        for (int j = 0; j < 3; ++j)\\n            cin >> happiness[i][j];\\n    for (int i = 1; i <= n; ++i) {\\n        for (int j = 0; j < 3; ++j)\\n            for (int k = 0; k < 3; ++k)\\n                if (j != k)\\n                    dp[i][j] = max(dp[i][j], dp[i - 1][k] + happiness[i][j]);\\n    }\\n    cout << *max_element(dp[n], dp[n] + 3) << \\\"\\\\n\\\";\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"雖然比起之前的程式碼長，但陣列的版本看起來不會有一堆長得一樣的片段。這樣的好處除了可以輕鬆應付「當活動種類數變多」的狀況外，若 dp 轉移式變得複雜，當我們不小心寫錯時，要進行修改就不用每行都改一遍了。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二維 DP-增加維度的思考方式\",\n      children: \"增加維度的思考方式\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們來重新複習一下這題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://www.luogu.com.cn/problem/U425829\",\n      src: \"洛谷 U425829\",\n      name: \"股票买卖 V\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/Luogu/U425829/description.mdx\",\n      constraintsMdx: \"guide/problems/Luogu/U425829/constraints.mdx\",\n      importMdx: \"guide/problems/Luogu/U425829/description.mdx\",\n      importMdx: \"guide/problems/Luogu/U425829/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在前一個章節，我們的做法是先定義好狀態之後，試著整理轉移式才能將時間複雜度優化至 $O(N)$。有沒有直接一點的 $O(N)$ 做法呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這時候我們就能利用「增加維度」的方式，來直接的辦到這件事！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們定義兩種狀態，$dp[i][0]$ 和 $dp[i][1]$：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"$dp[i][0]$ 代表到了第 $i$ 天結束後，手上\", _jsx(_components.strong, {\n          children: \"沒有持有\"\n        }), \"股票的最大獲利\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"$dp[i][1]$ 代表到了第 $i$ 天結束後，手上\", _jsx(_components.strong, {\n          children: \"持有\"\n        }), \"股票的最大獲利\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣轉移該如何運作呢？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"針對 $dp[i][0]$，前一天會有兩種可能：要嘛前一天也沒有股票，要嘛前一天還有股票。因此，對於這兩種狀況，我們就能依序寫出 $dp[i - 1][0]$ 和 $dp[i - 1][1]$ 的子問題，其中因為後者還要「賣股票」，所以要多加上 $a_i$，寫出來就是\", _jsx(_components.br, {}), \"\\n\", \"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i][0] = \\\\max(dp[i - 1][0], dp[i - 1][1] + a_i)\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"而對 $dp[i][1]$，前一天會有兩種可能：要嘛前一天也有股票，要嘛前一天沒有股票。這裡的概念也差不多，但對於後者，要多注意多等 $1$ 天的問題，所以要取 $dp[i - 2][0]$ 這個子問題，寫出來就是\", _jsx(_components.br, {}), \"\\n\", \"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i][1] = \\\\max(dp[i - 1][1], dp[i - 2][0] - a_i)\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讀者可以想成是我們在模擬第 $i$ 天當下「可能做出的決策」。還記得我們說動態規劃的狀態就是在「描繪出答案被構建出來的過程」，而轉移就是在「描述過程之間是如何轉換的」：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"在前一個章節的做法中，我們是在把買賣股票「每一組買賣」都當成一種過程的變化，也因此，每一次轉移跨越的天數就會是 $O(N)$ 級別的。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"在現在的做法裡，我們是在把「每一天的決定」當成一種過程的變化，而一天的決定通常只取決於前一天或前兩天的結果，所以每一次轉移跨越的天數就會是 $O(1)$。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上述是筆者針對這兩種做法的解釋，並沒有唯一的解釋方法，讀者在這部分的意義上可以自行多加思考看看，相信可以對這樣子的變化有多一層的理解。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當然，這兩種做法並沒有絕對是誰好誰壞的問題，總是有題目可以讓其中一種做法有明顯的優勢在。因此很多時候在解題時，我們會需要多方嘗試各種不同的狀態設計，並思考相應的轉移意義，才能找到解出題目的正確方向。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"附上程式碼給讀者自行比對：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\nusing namespace std;\\n\\nconst int MAXN = 100005;\\n\\nint arr[MAXN], dp[MAXN][2];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    int n;\\n    cin >> n;\\n    for (int i = 1; i <= n; ++i)\\n        cin >> arr[i];\\n    const int INF = 1e9;\\n    dp[0][1] = -INF;\\n    dp[1][0] = 0;\\n    dp[1][1] = -arr[1];\\n    for (int i = 2; i <= n; ++i) {\\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + arr[i]);\\n        dp[i][1] = max(dp[i - 1][1], dp[i - 2][0] - arr[i]);\\n    }\\n    cout << dp[n][0] << \\\"\\\\n\\\";\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二維 DP-多維遞迴\",\n      children: \"多維遞迴\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://www.luogu.com.cn/problem/U159710\",\n      src: \"洛谷 U159710\",\n      name: \"组合数\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/Luogu/U159710/description.mdx\",\n      constraintsMdx: \"guide/problems/Luogu/U159710/constraints.mdx\",\n      importMdx: \"guide/problems/Luogu/U159710/description.mdx\",\n      importMdx: \"guide/problems/Luogu/U159710/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"相信讀者對這道問題並不陌生，其實這就是在問我們高中學習的組合數問題，也就是 $C^n_m$。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"當然，若讀者熟悉\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"BasicMath/number_theory\",\n        mode: \"full\",\n        topicTitle: \"基礎數學\",\n        articleTitle: \"基礎數論\"\n      }), \"中提到的模逆元的話，就會知道對於每一組 $n, m$ 的詢問，都可以在經過 $O(n)$ 的預處理後以 $O(1)$ 時間內回答任何一組詢問。但若題目要求的模數不是質數，或甚至當 $n, m$ 比模數還大時，就會出現問題。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，我們可以利用組合數的遞迴性質，也就是：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"C^n_m = C^{n-1}_m + C^{n-1}_{m-1}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這個式子又被稱為\", _jsx(_components.strong, {\n        children: \"巴斯卡恆等式\"\n      }), \"，要直觀解釋的話，可以想成 $n$ 個元素選出 $m$ 個的方法可以來自：\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"拿第 $n$ 個元素，因此剩下對應到一個「$n-1$ 個元素、選 $m-1$ 個」的子問題。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"不拿第 $n$ 個元素，因此剩下對應到一個「$n-1$ 個元素、選 $m$ 個」的子問題。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，取這兩種「狀態」的總和，就可以直接得到上面的「轉移式」。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\nusing namespace std;\\n\\nconst int MOD = 1e9 + 7;\\nconst int MAXN = 1005;\\n\\nint C[MAXN][MAXN];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    C[0][0] = 1;\\n    for (int i = 1; i < MAXN; ++i) {\\n        C[i][0] = 1;\\n        for (int j = 1; j <= i; ++j)\\n            C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD;\\n    }\\n    int q;\\n    cin >> q;\\n    while (q--) {\\n        int n, m;\\n        cin >> n >> m;\\n        cout << C[n][m] << \\\"\\\\n\\\";\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"將其實作成程式碼，讀者就可以發現我們在過程中只有用到加法，也因此對於任意的模數都不成問題！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二維 DP-最長共同子序列\",\n      children: \"最長共同子序列\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"看完數方法數的例子，我們就來看看最佳化問題的例子。\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/818\",\n      src: \"NCOJ 818\",\n      name: \"Longest Common Subsequence\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/818/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/818/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/818/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/818/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最長共同子序列（Longest Common Subsequence，簡稱 LCS）是一個非常經典的 dp 例題。但在定義狀態之前，我們應該來分析一下這道問題答案的結構是如何。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所謂「子序列」，就可以想成一組索引值序列 $i_1\\\\leq i_2\\\\leq \\\\cdots\\\\leq i_k$，而兩個字串的「共同子序列」即代表著，有另一組一樣長的索引值序列 $j_1\\\\leq j_2\\\\leq \\\\cdots\\\\leq j_k$，滿足\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"\\\\text{對於所有 }t\\\\text{，}A_{i_t}=B_{j_t}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"想到這裡，一種狀態的定義就出現了：$dp[i][j]$ 即代表著「結尾是 $A_i$ 和 $B_j$ 的最長共同子序列長度」，而轉移只要窮舉上一次的結尾在哪就好了，也就是說：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i][j] =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"0 & i = j = 0 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"-\\\\infty & A_i\\\\neq B_j\\\\text{，字元不同不能當結尾} \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\max_{a<i, b<j} dp[a][b] + 1 & A_i=B_j\\\\text{，窮舉上一個字元的位置}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過仔細分析看看時間複雜度，若令 $N=|A|$、$M=|B|$，$O(NM)$ 的狀態搭配 $O(NM)$ 的轉移，整體的時間複雜度居然是 $O((NM)^2)$ 這麼慢！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這裡就需要用到一點狀態設計的巧思，若我們巧妙的修改一下狀態定義——$dp[i][j]$ 代表著「字串 $A$ 長度為 $i$ 的前綴、與字串 $B$ 長度為 $j$ 的前綴，兩者的最長共同子序列長度」。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這樣帶來的好處是什麼呢？讀者可以想像是我們將前面的狀態做了某種\", _jsx(_components.strong, {\n        children: \"二維前綴最大值\"\n      }), \"的處理，這讓 $\\\\max_{a<i, b<j}dp[a][b] + 1$ 的這個複雜的轉移，瞬間變成了一個 $dp[i - 1][j - 1] + 1$ 的 $O(1)$ 轉移！\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"整理一下轉移式，我們可以得到\", _jsx(_components.br, {}), \"\\n\", \"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i][j] =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"0 & i = 0 \\\\text{ 或 } j = 0 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\max\\\\{dp[i - 1][j], dp[i][j - 1]\\\\} & A_i\\\\neq B_j\\\\text{，只維護二維前綴的極值} \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\max\\\\{dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + 1\\\\} & A_i=B_j\\\\text{，額外考慮接一個字元在後面} \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"但其實從上式中我們可以觀察到，$i$ 跟 $j$ 多增加 $1$ 時，$dp[i][j]$ 的值其實也只會提升頂多 $1$ 而已。因此，這個轉移式可以簡化成\", _jsx(_components.br, {}), \"\\n\", \"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i][j] =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"0 & i = 0 \\\\text{ 或 } j = 0 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\max\\\\{dp[i - 1][j], dp[i][j - 1]\\\\} & A_i\\\\neq B_j\\\\text{，只維護二維前綴的極值} \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"dp[i - 1][j - 1] + 1 & A_i=B_j\\\\text{，額外考慮接一個字元在後面} \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"就得到一個 $O(NM)$ 的動態規劃演算法了。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <string>\\nusing namespace std;\\n\\nconst int MAXN = 5005;\\nint dp[MAXN][MAXN];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    string a, b;\\n    cin >> a >> b;\\n    int n = a.size(), m = b.size();\\n\\n    // 插入首字元使兩字串變成 1-base\\n    a.insert(a.begin(), '?');\\n    b.insert(b.begin(), '!');\\n\\n    for (int i = 1; i <= n; ++i)\\n        for (int j = 1; j <= m; ++j)\\n            if (a[i] != b[j])\\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\\n            else \\n                dp[i][j] = dp[i - 1][j - 1] + 1;\\n    cout << dp[n][m] << \\\"\\\\n\\\";\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"高維 DP\",\n      children: \"高維 DP\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當然，狀態的維度可不僅限於二維而已，就讓我們看看下面這道例題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=a252\",\n      src: \"ZeroJudge a252\",\n      name: \"Another LCS\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/ZeroJudge/a252/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/a252/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/a252/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/a252/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這題是進化版的 LCS 問題，而作法當然也就跟前面非常相似，具體來說，只要令 $dp[i][j][k]$ 是三個字串中長度分別為 $i, j, k$ 的前綴的最佳答案，就可以依樣畫葫蘆寫出類似的轉移式。由於非常相似，接下來的部份就交給讀者了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"總而言之，讀者可千萬不要被狀態中「參數的個數」所限制住，只要我們需要的資訊量不足，就得考慮是否要增加維度來「保持我們需要的資訊」的狀態上，才能寫出相對應的轉移式。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在本節中，我們帶讀者了解到在設計動態規劃演算法時，很多時候僅僅靠一個參數是無法準確的維護狀態轉移的過程的，也因此我們才需要狀態維度的增加。而透過上述幾道例題，相信讀者也體認到了增加狀態的效益、以及其必要性。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當然，讀者可能會發現在本節中出現的例題都有著較為單純的狀態定義。因此，在接下來的章節中，我們將在讀者對維度的擴增有一定的熟悉度的前提下，帶讀者認識一些較為不直觀的幾種典型狀態設計方法。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"多了「增加狀態」這個武器後，能解的動態規劃問題一下子就變多了！因此我們準備了豐富的習題，就讓讀者好好練習囉！\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/823\",\n      src: \"NPSC 2019 國中組初賽 pF\",\n      name: \"bb 與序列\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/NPSC/2019_junior_pre_F/description.mdx\",\n      constraintsMdx: \"guide/problems/NPSC/2019_junior_pre_F/constraints.mdx\",\n      importMdx: \"guide/problems/NPSC/2019_junior_pre_F/description.mdx\",\n      importMdx: \"guide/problems/NPSC/2019_junior_pre_F/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://usaco.org/index.php?page=viewproblem2&cpid=1084&lang=zh\",\n      src: \"USACO 2021 January Contest, Bronze Problem 2\",\n      name: \"Even More Odd Photos\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/USACO/1084/description.mdx\",\n      constraintsMdx: \"guide/problems/USACO/1084/constraints.mdx\",\n      importMdx: \"guide/problems/USACO/1084/description.mdx\",\n      importMdx: \"guide/problems/USACO/1084/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/138/\",\n      src: \"NEOJ 138\",\n      name: \"円円數磁磚\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/NEOJ/138/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/138/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/138/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/138/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://atcoder.jp/contests/dp/tasks/dp_h\",\n      src: \"AtCoder Educational DP Contest Problem H\",\n      name: \"Grid 1\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/AtCoder/dp_h/description.mdx\",\n      constraintsMdx: \"guide/problems/AtCoder/dp_h/constraints.mdx\",\n      importMdx: \"guide/problems/AtCoder/dp_h/description.mdx\",\n      importMdx: \"guide/problems/AtCoder/dp_h/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://www.luogu.com.cn/problem/P2386\",\n      src: \"洛谷 P2386\",\n      name: \"放苹果\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/Luogu/P2386/description.mdx\",\n      constraintsMdx: \"guide/problems/Luogu/P2386/constraints.mdx\",\n      importMdx: \"guide/problems/Luogu/P2386/description.mdx\",\n      importMdx: \"guide/problems/Luogu/P2386/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1291\",\n      src: \"TIOJ 1291\",\n      name: \"N 箱 M 球\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/TIOJ/1291/description.mdx\",\n      constraintsMdx: \"guide/problems/TIOJ/1291/constraints.mdx\",\n      importMdx: \"guide/problems/TIOJ/1291/description.mdx\",\n      importMdx: \"guide/problems/TIOJ/1291/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/790\",\n      src: \"NCOJ 790\",\n      name: \"幸運表格\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/NCOJ/790/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/790/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/790/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/790/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/789\",\n      src: \"APCS 2020/10 P3\",\n      name: \"勇者修煉\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/APCS/202010P3/description.mdx\",\n      constraintsMdx: \"guide/problems/APCS/202010P3/constraints.mdx\",\n      importMdx: \"guide/problems/APCS/202010P3/description.mdx\",\n      importMdx: \"guide/problems/APCS/202010P3/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1938\",\n      src: \"全國賽 2016 pA\",\n      name: \"連鎖店 (Chains)\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/NHSPC/2016A/description.mdx\",\n      constraintsMdx: \"guide/problems/NHSPC/2016A/constraints.mdx\",\n      importMdx: \"guide/problems/NHSPC/2016A/description.mdx\",\n      importMdx: \"guide/problems/NHSPC/2016A/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1639\",\n      src: \"CSES 1639\",\n      name: \"Edit Distance\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/CSES/1639/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1639/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1639/description.mdx\",\n      importMdx: \"guide/problems/CSES/1639/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://www.luogu.com.cn/problem/P2516\",\n      src: \"洛谷 P2516\",\n      name: \"最长公共子序列\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/Luogu/P2516/description.mdx\",\n      constraintsMdx: \"guide/problems/Luogu/P2516/constraints.mdx\",\n      importMdx: \"guide/problems/Luogu/P2516/description.mdx\",\n      importMdx: \"guide/problems/Luogu/P2516/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=d042\",\n      src: \"UVa 11420\",\n      name: \"Chest of Drawers\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/UVa/11420/description.mdx\",\n      constraintsMdx: \"guide/problems/UVa/11420/constraints.mdx\",\n      importMdx: \"guide/problems/UVa/11420/description.mdx\",\n      importMdx: \"guide/problems/UVa/11420/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"\",\n      src: \"自編題\",\n      name: \"三維表格最佳路徑\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/Misc/3dmaxpath/description.mdx\",\n      constraintsMdx: \"guide/problems/Misc/3dmaxpath/constraints.mdx\",\n      importMdx: \"guide/problems/Misc/3dmaxpath/description.mdx\",\n      importMdx: \"guide/problems/Misc/3dmaxpath/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/AtCoder/dp_c/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Taro 的暑假明天就開始了，他決定現在為暑假制定計畫。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"暑假共有 $N$ 天。對於第 $i$ 天，Taro 會選擇以下活動之一來進行：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A：在海裡游泳，獲得 $a_i$ 點快樂值。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"B：在山裡抓蟲，獲得 $b_i$ 點快樂值。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"C：在家裡做作業，獲得 $c_i$ 點快樂值。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"由於 Taro 很容易感到無聊，他不能連續兩天或以上進行相同的活動。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請找出 Taro 所能獲得的最大快樂值總和。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/AtCoder/dp_c/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$2\\\\leq N \\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq a_i, b_i, c_i \\\\leq 10^4$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/U425829/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"給定一個長度為 $N$ 序列，序列中的第 $i$ 個數字 $a_i$ 表示一個給定股票在第 $i$ 天的價格。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請設計一個演算法計算出最大利潤。在滿足以下條件的情況下，你可以盡可能地完成數次交易（多次買賣一支股票）:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"你不能同時參與多筆交易（你必須在再次購買前出售掉之前的股票）。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"賣出股票的隔天無法買入股票，需要多等 $1$ 天才可以買。\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/U425829/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N \\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$a_i \\\\leq 10^4$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/U159710/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Darko 最近學習了組合數的相關知識，他的朋友向他提出了 $q$ 個問題，每個問題是問從 $n$ 個不同元素中選出 $m$ 個放成無順序的一堆的方案數。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Darko 需要依次回答每一個問題，由於答案可能很大，他每次只需要回答這次的答案對 $10^9+7$ 取模的結果。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/U159710/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$q\\\\leq 10^4$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$0\\\\leq m\\\\leq n\\\\leq 1000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/818/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"JOI 君很喜歡字串，有一天，他收到了別人送的禮物，兩個字串 $A, B$！\", _jsx(_components.br, {}), \"\\n\", \"於是 JOI 君很好奇，這兩個字串的最長共同子序列長度是多少？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一個字串 $T$ 是一個字串 $S$ 的子序列，若且唯若我們刪除零或多個在 $S$ 字串中的字元後，可以得到字串 $T$。\", _jsx(_components.br, {}), \"\\n\", \"舉例來說 \", _jsx(_components.code, {\n        children: \"abc\"\n      }), \" 是 \", _jsx(_components.code, {\n        children: \"accbddc\"\n      }), \" 的子序列，因為刪除 \", _jsx(_components.code, {\n        children: \"ccdd\"\n      }), \" 後，\", _jsx(_components.code, {\n        children: \"accbddc\"\n      }), \" 就會變成 \", _jsx(_components.code, {\n        children: \"abc\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假如 $T$ 同時是 $A, B$ 字串的子序列，我們就說 $T$ 是 $A, B$ 字串的共同子序列。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/818/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le |A|, |B| \\\\le 5000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/a252/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給三個字串，請求出他們的 LCS 長度為多少？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/a252/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"三個字串的長度不超過 $100$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NPSC/2019_junior_pre_F/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"某天 bb 拿到了一個長度 $N$ 的序列 $v_1, v_2, \\\\cdots, v_N$，這個序列裡面的數字有正有負也有可能有零，而 bb 想用\", _jsx(_components.strong, {\n        children: \"紅、綠、藍三種顏色\"\n      }), \"幫這個序列上色。為了美觀，每個數字都必須被標上顏色，而且\", _jsx(_components.strong, {\n        children: \"序列中任兩個相鄰的數字必須要被標上不同的顏色\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"由於 bb 喜歡綠色且討厭紅色，他覺得這個序列上色之後的價值是\", _jsx(_components.strong, {\n        children: \"標上綠色的數字的總和\"\n      }), \"扣掉\", _jsx(_components.strong, {\n        children: \"標上紅色的數字的總和\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請問在滿足上述的條件下，這個序列上色後價值可以變成多高呢？\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NPSC/2019_junior_pre_F/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N\\\\leq 10^6$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-1000\\\\leq v_i \\\\leq 1000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/USACO/1084/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"約翰正嘗試給他的 $N$ 頭乳牛拍照。每頭乳牛有一個「品種編號」。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"約翰對他的照片有一個十分古怪的構思：他希望將所有的乳牛分為不相交的若干組（換句話說，將每頭乳牛分到恰好一組中）並將這些組排成一行，使得第一組的乳牛的品種編號之和為偶數，第二組的編號之和為奇數，以此類推，奇偶交替。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"約翰可以分成的最大組數是多少？\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/USACO/1084/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N \\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq \\\\text{品種編號} \\\\leq 100$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/138/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"円円從小就對數字很敏銳，生活中各式各樣的事物都可以計算，例如說如何減少讀書的時間又可以剛好不會被當，或是隔多少天才整理桌面又不至於惹室友生氣等等。雖然偶而會失算，但大部分的情況下都會是正確的。有一天，円円走在鋪滿正方形磁磚的走廊上，腦袋又開始活動起來：「如果這條走廊的寬度只有 $3$ 塊磁磚，那麼用 $1\\\\times 2$ 的長方型磁磚鋪滿這整條走廊一共有幾種方法呢？然而這時円円因為前一天熬夜，精神不濟而腦袋轉得比較慢，但他又很想要知道答案，因此他希望你能幫他算算看這個問題，如果算對了他會給你一罐麥香奶茶喔～\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/138/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$T\\\\leq 10^5$ 筆測資\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N\\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/AtCoder/dp_h/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"有一個 $H\\\\times W$ 的方格，對於每個格子 $(i, j)$，會有一個字元 $a_{i, j}$ 表示他是空格（\", _jsx(_components.code, {\n        children: \".\"\n      }), \"）還是牆壁（\", _jsx(_components.code, {\n        children: \"#\"\n      }), \"）。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Taro 要從格子 $(1, 1)$ 走到格子 $(H, W)$，並且每一步他都只能往右或往下走。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請找出 Taro 有幾種從格子 $(1, 1)$ 走到格子 $(H, W)$ 的方法，輸出答案模 $10^9+7$ 後的結果。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/AtCoder/dp_h/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$2\\\\leq H, W\\\\leq 1000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/P2386/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"把 $m$ 個相同的蘋果放在 $n$ 個相同的盤子裡，有些盤子可以是空的，求有多少種不同的分法（$5, 1, 1$ 和 $1, 1, 5$ 是同一種方法）。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/P2386/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$t\\\\leq 20$ 筆測資\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq m, n\\\\leq 10$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1291/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"$n$ 個相同的箱子要放入 $m$ 個不同的球，問有幾種放法。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/1291/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$5\\\\leq n, m\\\\leq 200$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"輸入有多筆測資，$n=m=0$ 代表測試資料結束\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/790/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Refcode} = _components;\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"幸運表格，一個相傳能夠帶給人們幸運的表格。上面充滿了數字，獲得表格的人可以隨機從某個位置出發，並且持續不斷地向右或向下移動直到離開表格為止，而他所獲得的幸運指數即為經過的所有數字相加。\", _jsx(_components.br, {}), \"\\n\", \"以下列表格為例：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"plaintext\",\n      lineno: \"false\",\n      code: \"-1 7 -8 10 -5\\n-4 -9 8 -6 0\\n5 -2 -6 -6 7\\n-7 4 7 -3 -3\\n7 1 -6 4 -9\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"若你從左上角開始，沿著右、下、下、右、右、右、右移動，則你將獲得 $-1+7-9-2-6-6+7=-10$ 的幸運指數。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請注意，這只是舉例如何計算幸運指數，不代表這個表格的最大幸運指數為 $-10$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這個表格的最大幸運指數應為從第三列第一欄開始，沿著右、下、右、右、下、下移動，你可以獲得 $15$ 的幸運指數。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/790/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N, M\\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-100\\\\leq a_{ij}\\\\leq 100$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/APCS/202010P3/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"輸入為 $n\\\\times m$ 大小的的陣列，每一格是一個介於 $-100$ 與 $100$ 之間的整數，表示經過這格可以累積的經驗值。\", _jsx(_components.br, {}), \"\\n\", \"你可以從最上面一排任何一個位置開始，在最下面一排任何一個位置結束。\", _jsx(_components.br, {}), \"\\n\", \"過程中每一步可以選擇往左、往右或往下走，但不能走回已經經過的位置。\", _jsx(_components.br, {}), \"\\n\", \"請你算出最多可以獲得的經驗值總和（可能是負數）。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/APCS/202010P3/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n\\\\leq 50$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq m \\\\leq 10^4$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-100\\\\leq v_{ij} \\\\leq 100$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2016A/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"抓寶桌遊打算在市區開 $N$ 家連鎖店。可以開連鎖店的位置是 $M\\\\times M$ 的網格，每一家連鎖店必須開在不同的網格上，而且第二家連鎖店必須開在第一家的東北方，第三家連鎖店必須開在第二家的東北方，依此類推。東北方的定義爲 $X$ 座標和 $Y$ 座標都比較大。$X$ 座標和 $Y$ 座標均介於 $0$ 到 $M - 1$。如果第 $i$ 家 （$i$ 介於 $0$  到 $N - 1$）連鎖店開在 $(x, y)$ 的位置則會有 $((ai + bx + cy)\\\\text{ mod }d)$ 的顧客。請寫一個程式決定 $N$ 家連鎖店的位置，使得所有連鎖店的顧客數總和為最大。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2016A/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N \\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq M \\\\leq 200$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq a, b, c \\\\leq 2000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq d \\\\leq 1.2\\\\times 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1639/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"我們說兩個字串的「編輯距離（Edit Distance）」是使用最小的操作數量將一個字串轉換成另一個字串。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其中合法的操作們為：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"在一個字串中加入一個字元。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"在一個字串中刪除一個字元。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"把一個字串的一個字元換成另一個字元。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"例如，\", _jsx(_components.code, {\n        children: \"LOVE\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"MOVIE\"\n      }), \" 的 Edit Distance 是 $2$，因為你可以把 \", _jsx(_components.code, {\n        children: \"LOVE\"\n      }), \" 中的 \", _jsx(_components.code, {\n        children: \"L\"\n      }), \" 改成 \", _jsx(_components.code, {\n        children: \"M\"\n      }), \"，再加入 \", _jsx(_components.code, {\n        children: \"I\"\n      }), \" 來使其變成 \", _jsx(_components.code, {\n        children: \"MOVIE\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請找出給定兩個字串的 Edit Distance。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1639/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"字串長度皆 $\\\\leq 5000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/P2516/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"對給定的兩個字串，求出他們最長的公共子序列長度，以及最長公共子序列個數。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Luogu/P2516/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"字串長度皆 $\\\\leq 5000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/UVa/11420/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Figure, {\n      src: \"/files/problems/UVa/11420/figure/fig1.jpeg\",\n      width: \"100\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"斗櫃就是如左圖由很多抽屜垂直排列組成的櫃子。雖然這是個很有用的家具，但是如果要鎖這些抽屜時卻發生了問題——抽屜即使上鎖了也不一定安全。例如假設從上面往下數第三個抽屜鎖上了，但是它上面的那個抽屜卻沒鎖。這時鎖起來的抽屜也不安全，因為只要把它上面的抽屜整個拉出來就可拿到裡面的東西了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一個 $n$ 個抽屜的斗櫃，會有數個方式來確保剛好有 $s$ 個抽屜是安全的。以左圖的斗櫃為例，有六個方式可以確保剛好四個抽屜是安全的。這六個方式如下圖所示。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/UVa/11420/figure/fig2.jpeg\",\n      width: \"500\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"圖中的 L 表示那個抽屜是鎖著的，U 則表示沒上鎖。這就是可以確保剛好 4 個抽屜是安全的的六個組合。安全的抽屜以粗體字母來表示。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"給你 $n$ 和 $s$ 的值，請你算有多少個方式可以確保它們的安全。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/UVa/11420/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"最多 $5000$ 筆測資\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n\\\\leq 65$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$0\\\\leq s\\\\leq 65$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/3dmaxpath/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給定一張 $N\\\\times M\\\\times D$ 的三維數字表格 $a_{i, j, k}$，當你處在 $(i, j, k)$ 時，你只能走到 $(i+1, j, k), (i, j + 1, k)$ 或 $(i, j, k + 1)$，求 $(1, 1, 1)$ 走到 $(N, M, D)$ 的最佳路徑，使得路徑上經過的數字們總和最大。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/3dmaxpath/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N \\\\times M\\\\times D \\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^9\\\\leq a_{i, j, k}\\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"狀態不足","depth":1,"code":"狀態不足"},{"text":"二維 DP","depth":1,"code":"二維 DP"},{"text":"很多個 dp 式到底是怎樣？","depth":2,"code":"二維 DP-很多個 dp 式到底是怎樣？"},{"text":"增加維度的思考方式","depth":2,"code":"二維 DP-增加維度的思考方式"},{"text":"多維遞迴","depth":2,"code":"二維 DP-多維遞迴"},{"text":"最長共同子序列","depth":2,"code":"二維 DP-最長共同子序列"},{"text":"高維 DP","depth":1,"code":"高維 DP"},{"text":"小結","depth":1,"code":"小結"},{"text":"習題","depth":1,"code":"習題"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}