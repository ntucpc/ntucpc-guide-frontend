{"pageProps":{"props":{"mdxPath":"guide/content/BasicAlgorithm/enumerate/enumerate.mdx","code":"BasicAlgorithm/enumerate","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"廣度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"深度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","Implementation/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":true},{"code":"BasicDynamicProgramming/knapsack_and_rolling","article":"knapsack_and_rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":false,"title":"背包問題與滾動 DP","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":false,"title":"多個維度的 DP","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/partial_sum"],"coming":true},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":true},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","Implementation/buglist"],"coming":true},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":false,"title":"二分圖","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":false,"title":"圖論導論","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":false,"title":"單調隊列","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 II","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/basic_knowledge","article":"basic_knowledge","topic":"Implementation","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"Implementation/buglist","article":"buglist","topic":"Implementation","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/variable"],"coming":false},{"code":"Implementation/compiler","article":"compiler","topic":"Implementation","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/debug","article":"debug","topic":"Implementation","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["Implementation/buglist"],"coming":false},{"code":"Implementation/error_message","article":"error_message","topic":"Implementation","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/compiler"],"coming":false},{"code":"Implementation/float_error","article":"float_error","topic":"Implementation","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/input","article":"input","topic":"Implementation","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"Implementation/pseudo_pointer","article":"pseudo_pointer","topic":"Implementation","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/reference","article":"reference","topic":"Implementation","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/rngbased","article":"rngbased","topic":"Implementation","chapter":"III","valid":false,"title":"Range-Based for loop","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/structure_binding","article":"structure_binding","topic":"Implementation","chapter":"III","valid":false,"title":"Structure Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/variable","article":"variable","topic":"Implementation","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"Implementation","title":"實作技巧","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","Implementation/debug","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack_and_rolling"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["Implementation"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack_and_rolling","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicAlgorithm/enumerate/enumerate.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Info, Problem, Refcode, Theorem} = _components;\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"在解決一個問題的時候，常常最直接的作法就是「把所有解決方案都列出來看看」，像是決定午餐要吃哪家餐廳時，把附近所有的餐廳列出來，並且找到這些餐廳中現在最想吃的，這個「一一列出來」的作法就稱為枚舉。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"「列出所有可能性」在可能性很多的時候，人不太可能做到，雖然電腦的計算能力比人類好上許多，但要枚舉的東西可能會長得奇形怪狀，或者亂枚舉之下仍然有過多可能性，電腦也不能快速解決，因此如何正確且快速的枚舉我們想要的東西是一個問題。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"枚舉各式物件\",\n      children: \"枚舉各式物件\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最基本的枚舉，就是枚舉一些簡易的物件，像是題目輸入的東西們、某個範圍裡的整數之類的，只要一個簡單的迴圈就能舉出所有東西。不過枚舉的對象也可以很複雜，接下來我們會介紹兩種常見的枚舉對象：排列與集合。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"枚舉各式物件-排列\",\n      children: \"排列\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一個序列的排列（permutation）指的就是把這個序列中的元素亂換順序後，能得到的所有可能的序列，像是 $[1,2,2,4]$ 的排列就有\", _jsx(_components.br, {}), \"\\n\", \"\\\\[\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{array}{ccc}\", _jsx(_components.br, {}), \"\\n\", \"[1,2,2,4] &\", _jsx(_components.br, {}), \"\\n\", \"[1,2,4,2] &\", _jsx(_components.br, {}), \"\\n\", \"[1,4,2,2] \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"[2,1,2,4] &\", _jsx(_components.br, {}), \"\\n\", \"[2,1,4,2] &\", _jsx(_components.br, {}), \"\\n\", \"[2,2,1,4] \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"[2,2,4,1] &\", _jsx(_components.br, {}), \"\\n\", \"[2,4,1,2] &\", _jsx(_components.br, {}), \"\\n\", \"[2,4,2,1] \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"[4,1,2,2] &\", _jsx(_components.br, {}), \"\\n\", \"[4,2,1,2] &\", _jsx(_components.br, {}), \"\\n\", \"[4,2,2,1]\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{array}\", _jsx(_components.br, {}), \"\\n\", \"\\\\]\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"要枚舉所有的排列很簡單，\", _jsx(_components.code, {\n        children: \"<algorithm>\"\n      }), \" 裡的 \", _jsx(_components.code, {\n        children: \"next_permutation()\"\n      }), \" 都幫我們做好了：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int a[n] = { /* ... */ };\\nsort(a, a + n);\\ndo {\\n    // do something...\\n}\\nwhile(next_permutation(a, a + n));\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這樣一來每次 \", _jsx(_components.code, {\n        children: \"do\"\n      }), \" 裡面的區塊執行的時候，\", _jsx(_components.code, {\n        children: \"a\"\n      }), \" 都會是不同的 permutation，而且每個 permutation 都會被枚舉過一次。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"next_permutation(l, r)\"\n      }), \" 代表的是把 $[l,r)$ 範圍裡的部分，變成「下一個排列」，如果這個排列是「最後一個排列」的話，就會變成「第一個排列」並且回傳 \", _jsx(_components.code, {\n        children: \"false\"\n      }), \"，反之如果成功變成下一個排列，就會回傳 \", _jsx(_components.code, {\n        children: \"true\"\n      }), \"。也就是這個數列的所有排列們被排了一個順序，\", _jsx(_components.code, {\n        children: \"next_permutation()\"\n      }), \" 會幫我們拿到傳進去的排列的下一個（或變回第一個），這個順序是字典序（lexicographical order），像上面列出的 $[1,2,2,4]$ 的排列，就是按照字典序順序列出的。\"]\n    }), \"\\n\", _jsxs(Theorem, {\n      type: \"definition\",\n      title: \"字典序比較\",\n      number: \"1\",\n      children: [_jsx(_components.p, {\n        children: \"兩個數列 $a_1,a_2,\\\\dots,a_n$ 和 $b_1,b_2,\\\\dots,b_m$ 比較字典序的方法是，找到第一個滿足 $a_i \\\\neq b_i$ 的位置 $i$，看看 $a_i$ 和 $b_i$ 哪個比較小，$a_1$ 比較小的話就是數列 $a$ 字典序比較小、反之則是 $b$ 的字典序比較小。如果沒有 $a_i \\\\neq b_i$ 的位置，就是長度比較短的數列比較小。兩個長得一模一樣的話，字典序相等。\"\n      }), _jsx(_components.p, {\n        children: \"以下幾個例子，在上面的都比較小：\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"$\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{array}{l}\", _jsx(_components.br, {}), \"\\n\", \"3\\\\ 1\\\\ {\\\\color{red}4}\\\\ 5\\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"3\\\\ 1\\\\ {\\\\color{red}5}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{array}\", _jsx(_components.br, {}), \"\\n\", \"$\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"$\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{array}{l}\", _jsx(_components.br, {}), \"\\n\", \"\\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"2\\\\ 7\\\\ 1\\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"2\\\\ 7\\\\ 1\\\\ 8\\\\ 2\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{array}\", _jsx(_components.br, {}), \"\\n\", \"$\"]\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"舉例來說，$[2,1,2,4]$ 傳進 \", _jsx(_components.code, {\n        children: \"next_permutation()\"\n      }), \" 之後，就會變成 $[2,1,4,2]$ 並且回傳 \", _jsx(_components.code, {\n        children: \"true\"\n      }), \"、傳進 $[4,2,2,1]$ 會變成 $[1,2,2,4]$ 並且回傳 \", _jsx(_components.code, {\n        children: \"false\"\n      }), \"，因為它沒有下一個排列了。可以發現到第一個排列肯定是從小到大排序的那一個，這也是為什麼上面的程式碼一開始要先將 \", _jsx(_components.code, {\n        children: \"a\"\n      }), \" 排序，這樣子才會從第一個排列開始枚舉。（所以如果 \", _jsx(_components.code, {\n        children: \"a\"\n      }), \" 一開始就排序好，就不需要再排序了。）\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一次 \", _jsx(_components.code, {\n        children: \"next_permutation()\"\n      }), \" 的最差時間複雜度是 $O(N)$，聽起來如果枚舉所有的排列一次，複雜度最差會到 $O(N \\\\times N!)$（$1,2,\\\\dots,N$ 的排列有 $N!$ 個），不過總複雜度其實會神奇地是 $O(N!)$。（只是指單純跑過上面那個迴圈，當然你在迴圈裡有做別的事就另當別論了。）\"]\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=d913\",\n      src: \"全國賽 2010 pA\",\n      name: \"彈珠配置\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NHSPC/2010A/description.mdx\",\n      importMdx: \"guide/problems/NHSPC/2010A/description.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"既然題目要的是「字典序最小的可能的 $p$」，那麼我們可以從最小字典序的排列（也就是 $[1,2,3,4,5,6]$）開始，按照字典序枚舉所有長度為 6 的排列，枚舉一個排列時檢查它可不可以是 $p$，只要找到一個可以當作 $p$ 的排列就輸出答案。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint a[6][6];\\nint cnt[6];\\n\\nint main() {\\n    \\n    for (int i = 0; i < 6; i++) {\\n        for (int j = 0; j < 6; j++) cin >> a[i][j];\\n        cin >> cnt[i];\\n    }\\n\\n    int p[6] = {1, 2, 3, 4, 5, 6};\\n\\n    do {\\n        bool ok = true;\\n        for (int i = 0; i < 6; i++) {\\n            int tmp = 0;\\n            for (int j = 0; j < 6; j++) {\\n                if(p[j] == a[i][j]) tmp++;\\n            }\\n            if (tmp != cnt[i]) {\\n                ok = false;\\n                break;\\n            }\\n        }\\n        if (ok) {\\n            for (int i = 0; i < 6; i++) cout << p[i] << \\\" \\\\n\\\"[i == 5];\\n            break;\\n        }\\n    }\\n    while (next_permutation(p, p + 6));\\n\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"枚舉各式物件-集合\",\n      children: \"集合\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"集合是另一個經常需要枚舉的東西。具體來說，通常是要枚舉像是 $\\\\{0,1,\\\\dots,N-1\\\\}$ 這種集合的一個子集，也就是所有挑一些不重複東西出來的方法。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在處理集合相關的東西的時候，我們通常會使用一個非負整數來表示一個集合，這個數在二進位下的第 $i$ 個位數是 $1$ 就代表集合中包含 $i$。例如 $163_{(10)}=10100011_{(2)}$ 就代表 $\\\\{0,1,5,7\\\\}$ 這個集合。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在知道要用一個數字來表示集合之後，枚舉集合的方法就呼之欲出了！要枚舉 $\\\\{0,1,\\\\dots,N-1\\\\}$ 的一個子集合只需要枚舉 $0$ 到 $2^{N-1}$ 的所有整數，像是：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"for (int i = 0; i < (1 << n); i++) {\\n    for (int j = 0; j < n; j++) {\\n        if ((1 << j) & i) cout << j << \\\" \\\"\\n    }\\n    cout << \\\"\\\\n\\\";\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"(1 << j) & i\"\n      }), \" 可以檢查 $i$ 的第 $j$ 個 bit 是不是 1，\", _jsx(_components.code, {\n        children: \"1 << j\"\n      }), \" 就是 $2^j$，也就是二進位下只有第 $j$ 位是 1 的數字。\"]\n    }), \"\\n\", _jsx(Info, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"(1 << j) & i\"\n        }), \" 其實可以不用加括號，位元運算子的運算優先順序比較奇怪，像是 \", _jsx(_components.code, {\n          children: \"i & 1 << j\"\n        }), \" 的意思其實是 \", _jsx(_components.code, {\n          children: \"i & (1 << j)\"\n        }), \"、\", _jsx(_components.code, {\n          children: \"3 << 1 + 2\"\n        }), \" 的意思其實是 \", _jsx(_components.code, {\n          children: \"3 << (1 + 2)\"\n        }), \" 等等，如果不太確定的話就要記得加上括號。\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"聰明的枚舉\",\n      children: \"聰明的枚舉\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們學會怎麼枚舉奇怪的東西了，但也不能總是暴力地把所有東西都枚舉出來，而是要聰明地只枚舉其中一些東西。在枚舉的同時，也可以利用一些聰明的方式來加快。\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"\",\n      src: \"自編題\",\n      name: \"湊平方數\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/Misc/square/description.mdx\",\n      constraintsMdx: \"guide/problems/Misc/square/constraints.mdx\",\n      importMdx: \"guide/problems/Misc/square/description.mdx\",\n      importMdx: \"guide/problems/Misc/square/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"枚舉所有 $1$ 到 $N$ 之內的三個整數 $a,b,c$？顯然是有更好的作法，像是只要知道 $a,b$，就能知道 $c$ 一定只能是 $\\\\sqrt{a+b}$ 了，然而 $\\\\sqrt{a+b}$ 不見得會是整數，這樣我們不僅會浪費時間在不可能是答案的東西，這個浪費的時間還很多，$(a,b)$ 的數量可是多達 $O(N^2)$ 種。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但如果是枚舉 $a,c$ 的話，我們就會知道 $b=c^2-a$，這一定是個整數！所以這樣做的話，我們就不會浪費時間在枚舉不重要的東西了。$c$ 的最大值是 $\\\\sqrt{N}$，所以答案的數量以及我們花的時間就只有 $O(N \\\\sqrt{N})$ 而已。\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1643\",\n      src: \"CSES 1643\",\n      name: \"Maximum Subarray Sum\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/CSES/1643/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1643/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1643/description.mdx\",\n      importMdx: \"guide/problems/CSES/1643/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"既然這題問的是「最大總和的區間」，最直覺的想法就是直接枚舉全部的區間 $[l,r]$，如果先枚舉所有的左右界，然後再暴力掃過一次整個區間計算總和，把所有總和取 max，這樣總時間複雜度是 $O(n^3)$，實在是太久了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"要把時間降到 $O(n^2)$ 的方法有很多，像是固定左界的時候，可以從左到右枚舉右界，一邊維護現在枚舉的到區間的總和，把右界往右移一格時，把總和多加上加進來的那個數字就好，這樣就不需要對每一個區間的重算一次總和了。另一種方法是利用前綴和：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"\\\\[ \\\\begin{array}{cl}\", _jsx(_components.br, {}), \"\\n\", \"& \\\\phantom{(}x_1+x_2+\\\\dots+x_{l-1}+x_l+x_{l+1}+\\\\dots+x_r \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"-& (x_1+x_2+\\\\dots+x_{l-1}) \\\\\\\\ \\\\hline\", _jsx(_components.br, {}), \"\\n\", \"=& \\\\phantom{(x_1+x_2+\\\\dots+x_{l-1})+}x_l + x_{l+1} + \\\\dots + x_r\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{array}\\\\]\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以我們只要先算出所有的 $s_i=x_1+\\\\dots+x_i$（$s_0$ 就是什麼都沒加，所以 $s_0=0$），就可以在知道左右界 $l,r$ 的時候，馬上得出來 $[l,r]$ 這個區間的總和就是 $s_r-s_{l-1}$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果我們希望複雜度是 $O(n^2)$，計算 $s_i$ 當然可以對每個 $i$ 都暴力計算 $x_1+\\\\dots+x_i$，不過也有一個聰明一點的作法：$s_i=x_1+\\\\dots+x_{i-1}+x_i$ 其實就是 $s_i=s_{i-1}+x_i$，這樣就只要枚舉 $i=1$ 到 $n$，依序計算 $s_i$ 就可以在 $O(n)$ 的時間算出來了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過 $O(n^2)$ 還是太久了，要降到更低的時間複雜度，我們就不可能枚舉全部的區間。我們剛剛枚舉了兩個東西：$l$ 和 $r$，那如果我們只枚舉其中一個呢？假設我們選擇枚舉 $r$，沿用前綴和的想法，在固定 $r$ 的時候，$s_r$ 就是已知的，我們的目標是找到最大的 $s_r-s_{l-1}$，既然 $s_r$ 是固定的，那麼我們的目標其實就是找一個最小的 $s_{l-1}$，並且要滿足 $l - 1 < r$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"發現了嗎？只要我們是從小到大枚舉 $r$，我們在處理一個 $r$ 之前，就已經看過所有 $<r$ 的位置了，所以我們只要記錄下之前看過的最小的 $s_i$，直接拿它來當 $s_{l-1}$ 就可以了。甚至我們還不需要把整個前綴和存下來，只要一邊計算前綴和，一邊記下看過的最小前綴和，再拿去和目前的前綴和相減，整個過程拿到的最大值就是答案了。如此一來我們就在 $O(n)$ 的時間解決了這個問題。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nint main() {\\n    int n;\\n    cin >> n;\\n\\n    ll s = 0;\\n    ll mn = 0;\\n    ll ans = -LLONG_MAX;\\n    for (int i = 1; i <= n; i++) {\\n        ll x;\\n        cin >> x;\\n        s += x;\\n        ans = max(ans, s - mn);\\n        mn = min(mn, s);\\n    }\\n    cout << ans << \\\"\\\\n\\\";\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"總結\",\n      children: \"總結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這裡幫讀者總結一些枚舉的思考策略：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"讓一些東西固定：像是在枚舉排列或集合時，我們做的事情是「每次都固定一個排列或者集合，只思考這個排列或集合有關的事情」、在找最大連續和時，我們每次都固定右界，然後思考選哪個左界比較好。在枚舉的時候，可以暫時不用在意目前枚舉的項目之外的可能性，專注於目前枚舉到的東西上。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"選擇好的枚舉物件：像是在找 $a+b=c^2$ 的解時，我們應該要選擇枚舉 $a,c$ 而不是枚舉 $a,b$，在想怎麼枚舉時，可以想想如果有些資訊是已知的，那是不是有其他資訊我們直接就可以知道，不需要再另外枚舉，以及枚舉哪一些東西可以比較省時間或是比較好處理。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"用正確的枚舉順序：像是在算前綴和時，從前算到後的話，就可以簡單又快速地算出來。在後面的許多主題裡，都會需要使用特定的順序去枚舉東西。除了正著掃、倒著掃等等的順序以外，也有可能是要先排序再枚舉之類的特殊順序。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=c435\",\n      src: \"ZeroJudge c435\",\n      name: \"MAX ! MAX ! MAX !\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/ZeroJudge/c435/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/c435/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/c435/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/c435/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://codeforces.com/problemset/problem/1352/E\",\n      src: \"Codeforces 1352E\",\n      name: \"Special Elements\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/Codeforces/1352E/description.mdx\",\n      constraintsMdx: \"guide/problems/Codeforces/1352E/constraints.mdx\",\n      importMdx: \"guide/problems/Codeforces/1352E/description.mdx\",\n      importMdx: \"guide/problems/Codeforces/1352E/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=c412\",\n      src: \"ZeroJudge c412\",\n      name: \"多麼OwO\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/ZeroJudge/c412/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/c412/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/c412/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/c412/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/2060\",\n      src: \"TIOJ 2060\",\n      name: \"Rejudge!\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/TIOJ/2060/description.mdx\",\n      constraintsMdx: \"guide/problems/TIOJ/2060/constraints.mdx\",\n      importMdx: \"guide/problems/TIOJ/2060/description.mdx\",\n      importMdx: \"guide/problems/TIOJ/2060/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1913\",\n      src: \"全國賽 2015 pC\",\n      name: \"框架區間\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/NHSPC/2015C/description.mdx\",\n      constraintsMdx: \"guide/problems/NHSPC/2015C/constraints.mdx\",\n      importMdx: \"guide/problems/NHSPC/2015C/description.mdx\",\n      importMdx: \"guide/problems/NHSPC/2015C/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2010A/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有一個隱藏的長度為 6 的排列 $p$，另外告訴你 6 個長度為 6 的排列以及它們各自和 $p$ 有幾個位置一樣，輸出字典序最小的可能的 $p$。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/square/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"給一個數 $N$，求所有的 $(a,b,c)$ 滿足：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$a,b,c$ 都是整數\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$1 \\\\leq a,b,c \\\\leq N$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$a+b=c^2$\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/square/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$N \\\\leq 10^4$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1643/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"有一個數列 $x_1,x_2,\\\\dots,x_n$，求所有\", _jsx(_components.strong, {\n      children: \"非空\"\n    }), \"區間之中，最大的總和是多少。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1643/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^9 \\\\leq x_i \\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/c435/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $n$ 個數 $a[1],a[2],\\\\dots,a[n]$，輸出最大的 $a[i]-a[j]$（$i<j$）。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/c435/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Codeforces/1352E/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"給一個序列 $a_1,a_2,\\\\dots,a_n$，對於一個元素 $a_i$，如果有一個\", _jsx(_components.strong, {\n      children: \"長度至少為 2\"\n    }), \"的區間總和 $a_l+a_{l+1}+\\\\dots+a_r$ 等於 $a_i$，我們就說 $a_i$ 是特別的。求這個序列裡有幾個特別的元素。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Codeforces/1352E/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 8000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq a_i \\\\leq n$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/c412/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"給一個字串 $S$，求這個字串有幾個子序列（抓出字串中的一些字元，不改變順序，可以不連續）是 \", _jsx(_components.code, {\n      children: \"OwO\"\n    }), \"。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/c412/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"有 $T$ 筆輸入，字串長度總和 $\\\\leq 10^8$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/2060/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有一場簡化規則的 ICPC 比賽，有 $N$ 支隊伍、$M$ 道題目，整場比賽中有 $S$ 筆 submission，這場比賽每一題的測資都是爛的，告訴你每筆 submission 的上傳時間、隊伍、題號、爛的測資的結果和好的測資的結果，求如果你可以挑最多 $K$ 題，用好的測資全部重測一遍，那麼隊伍 0 的名次最高可以是多少。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/TIOJ/2060/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"有 $T$ 筆輸入，$T \\\\leq 10$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$N \\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$K \\\\leq M \\\\leq 15$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$S \\\\leq 10^4$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2015C/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給一個序列 $S$，對於一個區間 $[a,b]$，如果 $S_a,S_{a+1},\\\\dots,S_{b}$ 之中出現的數字集合恰好是 $\\\\{a,a+1,\\\\dots,b\\\\}$，我們就說 $[a,b]$ 是一個框架區間，求有幾個框架區間。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2015C/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"有 $T$ 筆輸入，$T \\\\leq 20$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 5000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"枚舉各式物件","depth":1,"code":"枚舉各式物件"},{"text":"排列","depth":2,"code":"枚舉各式物件-排列"},{"text":"集合","depth":2,"code":"枚舉各式物件-集合"},{"text":"聰明的枚舉","depth":1,"code":"聰明的枚舉"},{"text":"總結","depth":1,"code":"總結"},{"text":"習題","depth":1,"code":"習題"}]}},"__N_SSG":true}