{"pageProps":{"props":{"mdxPath":"guide/content/BasicAlgorithm/partial_sum/partial_sum.mdx","code":"BasicAlgorithm/partial_sum","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"廣度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"深度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/rngbased","Implementation/structure_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","Implementation/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":true},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":true},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":true},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":true},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":true},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","Implementation/buglist"],"coming":true},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 II","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/basic_knowledge","article":"basic_knowledge","topic":"Implementation","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"Implementation/buglist","article":"buglist","topic":"Implementation","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/variable"],"coming":false},{"code":"Implementation/compiler","article":"compiler","topic":"Implementation","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/debug","article":"debug","topic":"Implementation","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["Implementation/buglist"],"coming":false},{"code":"Implementation/error_message","article":"error_message","topic":"Implementation","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/compiler"],"coming":false},{"code":"Implementation/float_error","article":"float_error","topic":"Implementation","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/input","article":"input","topic":"Implementation","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"Implementation/pseudo_pointer","article":"pseudo_pointer","topic":"Implementation","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/reference","article":"reference","topic":"Implementation","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/rngbased","article":"rngbased","topic":"Implementation","chapter":"III","valid":false,"title":"Range-Based for loop","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/structure_binding","article":"structure_binding","topic":"Implementation","chapter":"III","valid":false,"title":"Structure Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/variable","article":"variable","topic":"Implementation","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"Implementation","title":"實作技巧","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","Implementation/debug","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["Implementation"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicAlgorithm/partial_sum/partial_sum.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ContentReference, Figure, Problem} = _components;\n  if (!ContentReference) _missingMdxReference(\"ContentReference\", true);\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"前綴和\",\n      children: \"前綴和\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"BasicAlgorithm/enumerate\",\n        mode: \"article\",\n        topicTitle: \"基礎演算法\",\n        articleTitle: \"枚舉\"\n      }), \"中，我們已經看過了這道例題：\"]\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1643\",\n      src: \"CSES 1643\",\n      name: \"Maximum Subarray Sum\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/CSES/1643/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1643/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1643/description.mdx\",\n      importMdx: \"guide/problems/CSES/1643/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們的作法中，需要用到「快速計算某個區間的總和」這件事，當時我們就已經提到過前綴和了。這裡複習一下，當我們想要計算一個序列 $[a_1,a_2,\\\\dots,a_N]$ 的一個區間總和 $a_l+a_{l+1}+\\\\dots+a_r$ 時，等同於要計算\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"\\\\[\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{array}{rl}\", _jsx(_components.br, {}), \"\\n\", \"& (\\\\color{blue}{a_1 + a_2 + \\\\cdots + a_{l-1}} + \\\\color{red}{a_l + a_{l + 1} + \\\\cdots + a_r}) \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"-& (\\\\color{blue}{a_1 + a_2 + \\\\cdots + a_{l-1}}) \\\\\\\\ \\\\hline\", _jsx(_components.br, {}), \"\\n\", \"=& \\\\phantom{(a_1 + a_2 + \\\\cdots + a_{l-1} +}\\\\ \\\\ \\\\color{red}{a_l + a_{l + 1} + \\\\cdots + a_r}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{array}\", _jsx(_components.br, {}), \"\\n\", \"\\\\]\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在補上 $a_1+a_2+\\\\dots+a_{l-1}$ 之後，就會發現我們需要的東西都是長成 $a_1+a_2+\\\\cdots$ 的形式，也就是一段前綴的總和，因此只要我們事先算出所有的\", _jsx(_components.br, {}), \"\\n\", \"\\\\[s_i=\\\\sum_{k=1}^i s_k=a_1+a_2+\\\\dots+a_i, \\\\quad s_0=0\\\\]\", _jsx(_components.br, {}), \"\\n\", \"之後每次我們想知道 $a_l+a_{l+1}+\\\\dots+a_r$ 是多少，就只要算 $s_r-s_{l-1}$ 就可以馬上得到了。這樣只需要花上 $O(N)$ 的預處理時間，之後每次的這種詢問都可以在 $O(1)$ 時間內回答。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我們把 $[s_0,s_1,\\\\dots,s_N]$ 這個序列稱作 $[a_1,a_2,\\\\dots,a_N]$ 的\", _jsx(_components.strong, {\n        children: \"前綴和序列\"\n      }), \"，通常會直接簡稱前綴和。注意到這裡我們的序列 $a$ 下標都是從 1 開始寫的，而 $s$ 多一個元素 $s_0$，這樣在詢問的區間本身是一個前綴時（$l=1$ 時），也可以直接寫 $s_r-s_{l-1}$，如果寫程式時也都使用從 1 開始的 index，就不用擔心使用前綴和的陣列時會戳出陣列範圍。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"前綴和-不只有加法\",\n      children: \"不只有加法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"用前綴和計算區間和的核心精神是，當我們想知道的東西可能會長得奇形怪狀，就把它稍微變個形狀，讓我們可以用一些形式更為統一、更容易計算的東西來湊出我們想要的答案。套用到區間和上，這個「奇形怪狀的東西」就是「一個區間的總和」（有 $O(N^2)$ 種，感覺就很難算），而「形式更為統一」的東西就是前綴的總和（只有 $O(N)$ 種，超級好算），用兩個前綴的總和相減，就可以拼湊出我們想要的區間總和。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這種想法不只可以用在總和，只要是像加法這種「有辦法扣回去」的運算，就可以用一樣的方法算出區間的答案。像是假設我們改成要算區間乘法 $a_l \\\\times \\\\dots \\\\times a_r$，能把乘法「扣回去」的操作當然就是除法了，因此只要先算好 $s_i=a_1 \\\\times \\\\dots \\\\times a_i$，答案就是 $\\\\frac{a_r}{a_{l-1}}$ 了，不過要小心一下序列裡有 0 時會不能這樣做。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過，有些操作是不能「扣回去」的，就像乘以 0 的操作是不能反悔的，另一個例子是，如果今天要算的是「區間裡面數字的最大值」，取最大值這個操作是不能「扣掉」的，這種操作就不能這樣做了。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"前綴和-不只有一維\",\n      children: \"不只有一維\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那麼這些奇形怪狀的東西還能不能是其他奇怪的形狀呢？當然可以，有時候我們也會想知道一個二維表格上，某個矩形範圍的格子數字總和是多少。\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=a694\",\n      src: \"ZeroJudge a694\",\n      name: \"吞食天地二\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/ZeroJudge/a694/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/a694/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/a694/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/a694/constraints.mdx\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicAlgorithm/partial_sum/figure/matrix1.png\",\n      width: \"400\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設我們想要的是紅色範圍的數字總和，那麼可以這樣算出來：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicAlgorithm/partial_sum/figure/matrix2.png\",\n      width: \"600\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"注意黃色的部分會被扣到兩次，所以最後要加回去。這樣一來我們就把所有需要的東西變成「左上角在 $(1,1)$ 的矩形範圍總和」，假設 $s_{x,y}$ 是左上角在 $(1,1)$、右下角在 $(x,y)$ 的範圍總和，那麼我們要的答案就是\", _jsx(_components.br, {}), \"\\n\", \"\\\\[ s_{x_2,y_2}-s_{x_2,y_1-1}-s_{x_1-1,y_2}+s_{x_1-1,y_1-1} \\\\]\", _jsx(_components.br, {}), \"\\n\", \"如此一來，先花 $O(n^2)$ 的時間算出所有的 $s_{x,y}$ 後，就可以 $O(1)$ 時間回答一個矩形範圍的和了。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"差分\",\n      children: \"差分\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"先看一道例題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=g597\",\n      src: \"APCS 2021/11 P3\",\n      name: \"生產線\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/APCS/202111P3/description.mdx\",\n      constraintsMdx: \"guide/problems/APCS/202111P3/constraints.mdx\",\n      importMdx: \"guide/problems/APCS/202111P3/description.mdx\",\n      importMdx: \"guide/problems/APCS/202111P3/constraints.mdx\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"簡單來說，就是每個位子的機器會有各自需要產生的資料量，如果在位置 $i$ 的機器是 $p_i$、需要產生 $d_i$ 單位的資料，那答案就是 $\\\\sum_{i=1}^n t[p_i] \\\\times d_i$。很直覺地，要是我們知道全部 $d_i$，那越快的機器放在需要生產越多的資料當然越好，因此把 $t[i]$ \", _jsx(_components.strong, {\n        children: \"小到大\"\n      }), \"排序、$d_i$ \", _jsx(_components.strong, {\n        children: \"大到小\"\n      }), \"排序，然後兩兩相乘再加總就是答案。問題在於，題目並沒有直接告訴我們 $d_i$ 是多少，我們可以這樣描述我們需要解決的問題：一開始所有的 $d_i$ 都是 0，每個工作的意思是把 $d_{l[i]}$ 到 $d_{r[i]}$ 都加上 $w[i]$，我們最後需要知道所有 $d_i$ 是多少。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣一來就變成一個我們要講的經典問題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"\",\n      src: \"經典題\",\n      name: \"區間加值問題\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/Misc/segment_add/description.mdx\",\n      importMdx: \"guide/problems/Misc/segment_add/description.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"剛剛那題的符號比較複雜，所以我們接下來都使用上面這個框框裡用的符號。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這乍聽之下有點困難，我們先來做一件看似無關的事。考慮一個序列 $b_1,b_2,\\\\dots,b_N$，和它的前綴和 $s_0,s_1,\\\\dots,s_N$，要是我們把某個 $b_i$ 加上 $x$，那 $s$ 會怎麼改變？以下新的 $b$ 和 $s$ 我們記作 $b'$ 和 $s'$。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"假設 $b$ 是 $[3,1,4,1,5,9]$，$s$ 就是 $[3,4,8,9,14,23]$（$s_0=0$ 就不寫出來了），我們把 $b_3$ 加上 $5$，就會得到\", _jsx(_components.br, {}), \"\\n\", \"\\\\[b'=[3,1,9,1,5,9] \\\\qquad s'=[3,4,13,14,19,28]\\\\]\", _jsx(_components.br, {}), \"\\n\", \"發現了嗎？$s'$ 之中，$s'_3$ 以後的都加上了 $5$，前面則都不變。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也就是說，把 $b_i$ 加上 $x$ 的結果是，$s_0$ 到 $s_{i-1}$ 都不變，$s_i$ 到 $s_N$ 都加上 $x$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果我們把 $b_l$ 加上 $x$，再把 $b_{r+1}$ 減去 $x$（如果 $r<N$ 的話，$r=N$ 就不做這件事）……\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"\\\\[\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{align*}\", _jsx(_components.br, {}), \"\\n\", \"s'_{l-1} &= s_{l-1} \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"s'_{l} &= s_{l} + x \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"s'_{l+1} &= s_{l+1} + x \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"&\\\\vdots \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"s'_r &= s_r + x \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"s'_{r+1} & = s_r + x - x = s_{r+1}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{align*}\", _jsx(_components.br, {}), \"\\n\", \"\\\\]\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"$s_l$ 到 $s_r$ 都被加上了 $x$、其他都不變，只修改 $b$ 的兩個元素，就可以改變 $s$ 的一個區間！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"回到本來的問題，我們要支援 $q$ 次將 $a_1,a_2,\\\\dots,a_n$ 的一個區間加上一個數值，然後輸出最終的 $a_1,a_2,\\\\dots,a_n$。用我們剛剛的發現，要是我們有個序列 $d_1,d_2,\\\\dots,d_n$，使得 $a$ 是 $d$ 的前綴和（特別令 $a_0=0$），那我們每個操作都只需要修改 $d$ 的兩個元素，最後再算出 $d$ 的前綴和，就是我們要的答案了！$a$ 一開始全都是 $0$，所以這個我們希望的序列 $d$ 的起始值，很明顯只要全都是 $0$ 就可以了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果今天問題進化一點，$a_i$ 的初始值不一定是 $0$ 呢？這樣我們就要好好找出序列 $d$ 了。這件事情其實非常容易，我們知道：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"\\\\[\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{align*}\", _jsx(_components.br, {}), \"\\n\", \"a_{i-1} &= d_1 + d_2 + \\\\dots + d_{i-1} \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"a_i &= d_1 + d_2 + \\\\dots + d_{i-1} + d_i\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{align*}\", _jsx(_components.br, {}), \"\\n\", \"\\\\]\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以 $d_i$ 就是 $a_i-a_{i-1}$ 囉。整理一下過程，一開始我們算出 $d_i=a_i-a_{i-1}$ 之後，對於每筆操作 $l,r,x$，把 $d_l$ 加上 $x$、把 $d_{r+1}$ 減去 $x$，所有操作做完以後，再算出 $d$ 的前綴和，就是最終修改完的 $a$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣一來，只要在一開始和最後各花 $O(n)$ 的時間算出 $d$ 和算出 $a$，每筆操作就可以只花 $O(1)$ 的時間。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$d$ 這個序列我們稱作 $a$ 的\", _jsx(_components.strong, {\n        children: \"差分序列\"\n      }), \"，每個序列都是它的前綴和序列的差分序列、也是它的差分序列的前綴和序列。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們介紹了前綴和與差分，實際上它們根本就是同一件事，只是我們在對不同的東西操作而已。它們的核心精神都是一樣的，都是在把「可能性很多」的要求，轉化成可能性比較少、更好處理的要求，用前綴和計算區間和是「將區間和變成兩個前綴和相減」，而用差分辦到區間加值是「將區間加值變成兩次的後綴加值」。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=e346\",\n      src: \"ZeroJudge e346\",\n      name: \"區間和練習\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/ZeroJudge/e346/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/e346/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/e346/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/e346/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=e367\",\n      src: \"ZeroJudge e367\",\n      name: \"區間 Xor\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/ZeroJudge/e367/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/e367/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/e367/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/e367/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"\",\n      src: \"經典變形題\",\n      name: \"區間加等差數列問題\",\n      expanded: \"false\",\n      difficulty: \"4\",\n      descriptionMdx: \"guide/problems/Misc/segment_add_ap_sequence/description.mdx\",\n      constraintsMdx: \"guide/problems/Misc/segment_add_ap_sequence/constraints.mdx\",\n      importMdx: \"guide/problems/Misc/segment_add_ap_sequence/description.mdx\",\n      importMdx: \"guide/problems/Misc/segment_add_ap_sequence/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1643/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"有一個數列 $x_1,x_2,\\\\dots,x_n$，求所有\", _jsx(_components.strong, {\n      children: \"非空\"\n    }), \"區間之中，最大的總和是多少。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1643/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^9 \\\\leq x_i \\\\leq 10^9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/a694/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給一個 $n \\\\times n$ 的二維表格，每個格子有一個數字，有 $m$ 筆詢問，每筆詢問給四個數字 $x_1,y_1,x_2,y_2$，求以 $(x_1,y_1)$ 為左上角、$x_2,y_2$ 為右下角的矩形範圍中，格子裡的數字總和是多少。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/a694/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 500$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$m \\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/APCS/202111P3/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"有 $n$ 台機器和 $n$ 個位子，第 $i$ 台機器要產生一單位的資料需要 $t[i]$ 分鐘。你要給每一台機器分配一個不同的位子，接下來會有 $m$ 項工作，第 $i$ 個工作會需要在位子 $l[i]$ 到位子 $r[i]$ 的機器產生出 $w[i]$ 單位的資料，你要好好分配機器的位置，使得每台機器產生資料所花費的時間\", _jsx(_components.strong, {\n      children: \"總和\"\n    }), \"最小。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/APCS/202111P3/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n,m \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$w[i],t[i] \\\\leq 100$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/segment_add/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"一開始序列 $a_1,a_2,\\\\ldots,a_n$ 都是 $0$，接下來會有 $q$ 次操作，每次操作會給你 $l,r,x$，代表要把 $a_l,a_{l+1},\\\\ldots,a_r$ 的每一項都加上 $x$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請輸出最後的 $a_1,a_2,\\\\ldots,a_n$。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/e346/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給一個長度 $n$ 的整數序列 $A$，有 $q$ 筆詢問，每筆詢問求 $A$ 的一段區間總和。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/e346/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n,q \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/e367/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有一個無限長陣列 $A$，$A[0]=0$、對於 $x>0$，$A[x]=A[x-1] \\\\oplus x$。有很多筆詢問，每筆詢問給兩個數字 $a,b$，求 $A[a] \\\\oplus A[a+1] \\\\oplus \\\\dots \\\\oplus A[b]$。$\\\\oplus$ 是 xor 的意思。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/e367/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$0 < a \\\\leq b \\\\leq 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/segment_add_ap_sequence/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"一開始序列 $a_1,a_2,\\\\ldots,a_n$ 都是 $0$，接下來會有 $q$ 次操作，每次操作會給你四個數字 $l,r,x,d$，代表要將 $a_l,a_{l+1},\\\\ldots,a_r$ 依序加上 $x,x+d,x+2d,\\\\ldots,x+(r-l)d$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"請輸出最後的 $a_1,a_2,\\\\ldots,a_n$。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/segment_add_ap_sequence/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\le n,q\\\\le 200000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\le l\\\\le r\\\\le n$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^6\\\\le x,d\\\\le 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"前綴和","depth":1,"code":"前綴和"},{"text":"不只有加法","depth":2,"code":"前綴和-不只有加法"},{"text":"不只有一維","depth":2,"code":"前綴和-不只有一維"},{"text":"差分","depth":1,"code":"差分"},{"text":"小結","depth":1,"code":"小結"},{"text":"習題","depth":1,"code":"習題"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}