{"pageProps":{"props":{"mdxPath":"guide/content/BasicDynamicProgramming/knapsack/knapsack.mdx","code":"BasicDynamicProgramming/knapsack","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"廣度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 II","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"coming":false},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"Structured Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"coming":false},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"]},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicDynamicProgramming/knapsack/knapsack.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    br: \"br\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Problem, Refcode, Theorem} = _components;\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"背包問題\",\n      children: \"背包問題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/801\",\n      src: \"NCOJ 801\",\n      name: \"01 背包問題\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/801/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/801/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/801/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/801/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上面的題目敘述，是動態規劃最經典的題型之一——背包問題。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"題目敘述簡單易懂，但如果我們貿然的定義 $dp[i]$ 是「前 $i$ 個物品的最大總價值」，會發生什麼事呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果試圖考慮第 $i$ 個物品的選取與否，去試圖從 $dp[i - 1]$ 轉移過來的話，就會發現一個重大的問題：如果只存最佳的價值總和的話，我們無法知道現在拿取第 $i$ 個物品是否會超出限制 $W$！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那如果我們定義 $dp[i]$ 是「前 $i$ 個物品的最佳解」呢？意思就是，$dp[i]$ 至少同時存著「總重量」和「總價值」。這樣會如何呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其實還是會錯！考慮以下輸入：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{array}{|c|c|c|c|}\", _jsx(_components.br, {}), \"\\n\", \"\\\\hline\", _jsx(_components.br, {}), \"\\n\", \"\\\\text{物品編號} & 1 & 2 & 3\\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\hline\", _jsx(_components.br, {}), \"\\n\", \"\\\\text{重量} & 1 & 1 & 1 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\hline\", _jsx(_components.br, {}), \"\\n\", \"\\\\text{價值} & 1 & 2 & 3 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\hline\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{array}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果總重限制是 $W=2$，那麼每個 $dp$ 值應該的答案為\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$dp[1]=$ 選擇物品 $1$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$dp[2]=$ 選擇物品 $1$ 和 $2$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$dp[3]=$ 選擇物品 $2$ 和 $3$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這時候，對於最佳答案的 $dp[3]$，就會沒辦法從「只有物品 $2$」的狀態轉移過來，造成答案錯誤！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以該怎麼做呢？答案是——直接把當前重量放在狀態裡！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"令 $dp[i][j]$ 是「前 $i$ 個物品中，湊出總重量為 $j$ 的最大總價值」，豁然開朗，整個轉移式的寫法就很直接了：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"不取第 $i$ 個物品：對應到子問題 $dp[i - 1][j]$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"取了第 $i$ 個物品：對應到子問題 $dp[i - 1][j - w_i] + v_i$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"由於重量的資訊被紀錄在狀態上，因此「是否超出重量限制」的判斷就變得非常簡單了。當然，最後別忘記答案必須要是 $dp[N][0\\\\sim W]$ 中的最大值，因為很有可能最佳解會發生在「故意不讓背包重量恰好是 $W$」的時候。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如此一來，因為我們不需要紀錄總重量超過 $W$ 的狀態答案，因此狀態數量就是 $O(NW)$，而轉移又是 $O(1)$，整體的時間複雜度就是 $O(NW)$，這時看一下範圍，明顯可以通過！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下提供程式碼給讀者，讀者可以自行思考看看其餘的細節，包含初始狀態、負無限大的定義等：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\nconst int MAXN = 105;\\nconst int MAXW = 100005;\\nconst long long INF = MAXN * 1000000000ll;\\n\\nlong long dp[MAXN][MAXW];\\nint w[MAXN], v[MAXN];\\n\\nint main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    int n, wmax;\\n    cin >> n >> wmax;\\n    for (int i = 1; i <= n; ++i)\\n        cin >> w[i] >> v[i];\\n\\n    // 初始化\\n    dp[0][0] = 0;\\n    for (int i = 1; i <= wmax; ++i)\\n        dp[0][i] = -INF; // 0 個東西湊不出重量 i > 0\\n\\n    for (int i = 1; i <= n; ++i) {\\n        for (int j = 0; j < w[i]; ++j)\\n            dp[i][j] = dp[i - 1][j];\\n        for (int j = w[i]; j <= wmax; ++j)\\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i]);\\n    }\\n\\n    cout << *max_element(dp[n], dp[n] + wmax + 1) << \\\"\\\\n\\\";    \\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"將「數值」放在狀態裡面，是動態規劃上一個經典又稍微不直觀的技巧，但熟悉了之後相信讀者能很快上手。這類技巧的使用時機，有時候甚至可以從題目範圍限制直接「猜出來」，例如在我們這道例題中，可以很明顯的發現 $NW$ 的上限是 $10^7$，這時候就可以試著朝這方向的時間複雜度去構思演算法，甚至就直接是狀態的大小總和。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當然，這招用範圍猜作法的小技巧不是每次都通用的！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"背包問題-應用\",\n      children: \"應用\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/802\",\n      src: \"NCOJ 802\",\n      name: \"鐵棒問題\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/802/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/802/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/802/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/802/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"像這樣「若干個整數能不能湊出指定整數」的問題，其實也是一種背包問題的簡化版。只是因為現在沒有「最大價值」，所以 $dp[i][j]$ 的定義其實就變成「前 $i$ 條鐵棒能不能湊出長度為 $j$ 的鐵棒」。至於其餘細節就交給讀者自行揣摩了。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"背包問題的變形\",\n      children: \"背包問題的變形\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"背包問題的變形-另一種範圍的背包問題\",\n      children: \"另一種範圍的背包問題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/157/\",\n      src: \"NEOJ 157\",\n      name: \"高棕櫚農場\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NEOJ/157/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/157/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/157/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/157/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不就是一般的背包問題嗎？但先別急著開始寫，看一下範圍，$O(NM)$ 是不是好像不太對勁？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"僅管 $NM$ 只有 $10^8$，背包問題的程式碼常數也小，看起來好像能通過，但可別忘了有至多 $10$ 筆測資，如果 $10$ 筆測資都放 $NM=10^8$，這樣很有可能是會超時的！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一般而言，背包問題其實是不存在所謂「跟數值沒關係」的多項式時間演算法的，因此我們一定可以在範圍限制中找到一些蛛絲馬跡讓我們設計出足夠快的演算法。\"\n    }), \"\\n\", _jsxs(Theorem, {\n      type: \"tips\",\n      title: \"從特殊條件找出蛛絲馬跡\",\n      number: \"1\",\n      children: [_jsxs(_components.p, {\n        children: [\"實際上，有沒有一個「跟數值沒關係」的多項式時間演算法能解決背包問題仍然是一個未解之謎，許多這類的問題通常被世人認為「非常困難」，因而得名「\", _jsx(_components.a, {\n          href: \"https://zh.wikipedia.org/wiki/NP%E5%AE%8C%E5%85%A8\",\n          children: \"NP 完全\"\n        }), \"」問題。而我們所設計的 $O(NM)$ 演算法，由於把數值大小放在了時間複雜度內，又被稱為「\", _jsx(_components.a, {\n          href: \"https://zh.wikipedia.org/zh-tw/%E4%BC%AA%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%97%B6%E9%97%B4\",\n          children: \"偽多項式時間\"\n        }), \"」，至於為什麼有一個「偽」呢？讀者可以想像在現實世界中，每個物品的價值有可能根本不是整數，而是小數點後可能會有很多位的浮點數，這可以當成 $M$ 其實非常的大，進一步造成問題，可是實際上輸入的大小並沒有變太多！\"]\n      }), _jsx(_components.p, {\n        children: \"有關於「NP 完全」和「偽多項式時間」，在未來的章節會有更詳細的解說。讀者在這裡可以先有個基礎的認識就好。若知道哪些問題是「困難」的，其實就可以在理解題目時，快速找到「與原問題不相同」的地方，這些相異之處很可能就會是解題的關鍵！\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"仔細一看，發現作為「價值」的 $B_i$ 特別地小，只有 $100$ 而已！我們不妨把歪腦筋動到價值身上，來設計出一個跟價值有關的狀態，具體如下：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"$dp[i][j]$ 代表「前 $i$ 個物品中，湊出滿足感 $j$ 的\", _jsx(_components.strong, {\n          children: \"最小飽足感\"\n        }), \"」\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯，我們換個方向設計狀態，而這也確實能寫出轉移式：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"不取第 $i$ 個物品：$dp[i - 1][j]$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"取了第 $i$ 個物品：$dp[i - 1][j - B_i] + A_i$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"只是現在從「最大價值」變成了「最小重量」而已。不過最終的答案當然不是 $dp[N][i]$ 的最小值，由於我們所求依然是「被飽足感上限 $M$ 限制下的最大滿足感」，也因此，我們應該要找到「最大的滿足感」使得「湊出該滿足感的最小飽足感不超過 $M$」，而這就變成了找到最大的 $i$ 使得 $dp[N][i]\\\\leq M$ 了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那麼時間複雜度呢？重點是狀態數量，而注意到最大的總滿足感也不過就是 $\\\\sum^{N}_{i=1}{B_i}$，頂多 $10^4$ 而已，乘上 $N$ 再乘上 $T$ 後，也就只有 $10^7$，那肯定能穩定通過這題。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這種「將答案數值放進狀態內」的技巧雖然相對不那麼常見，但也是值得一學的小技巧。同時也想告訴讀者，動態規劃的最終答案並不總是都存在「陣列」內，而是有可能是「表示狀態用的參數」。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這題的實作細節與前面的背包問題非常的相似，就不特別寫出來，讓讀者自行改寫。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"背包問題的變形-多一道限制\",\n      children: \"多一道限制\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://neoj.sprout.tw/problem/158/\",\n      src: \"NEOJ 158\",\n      name: \"高棕櫚農場 2\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NEOJ/158/description.mdx\",\n      constraintsMdx: \"guide/problems/NEOJ/158/constraints.mdx\",\n      importMdx: \"guide/problems/NEOJ/158/description.mdx\",\n      importMdx: \"guide/problems/NEOJ/158/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果又多了一個「拿取物品的數量上限」，這時候該怎麼辦呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"可別忘記增加狀態的精髓為何：能夠更準確的維護構造答案的過程。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也因此，在「拿取物品」的過程中，我們會多在意一個參數是「我們拿了幾個物品」，也就能自然的把「目前的物品數量」放進狀態內，得到一個三維的 DP。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一樣，這裡就交給讀者自行改寫了。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"背包問題的變形-無限背包問題\",\n      children: \"無限背包問題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/825\",\n      src: \"NCOJ 825\",\n      name: \"無限背包問題\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/825/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/825/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/825/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/825/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"與一般的背包問題不同，現在每一種物品有無限多個，這樣會有什麼差別呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們一樣考慮看看原本的狀態定義，$dp[i][j]$ 是「前 $i$ 個物品中，湊出總重量為 $j$ 的最大總價值」，會發現這個狀態定義似乎在無限背包問題還是可行，那關鍵差別就一定是在轉移身上了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有一個直觀的想法是這樣的：既然我們想知道「第 $i$ 個物品」的轉移過程，那我們可以乾脆去窮舉「第 $i$ 個物品拿了幾個」，也因此可以寫出\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i][j] = \\\\max\\\\{dp[i - 1][j], dp[i - 1][j - w_i] + v_i, dp[i - 1][j - 2\\\\cdot w_i] + 2\\\\cdot v_i, \\\\ldots\\\\}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這種轉移式。並且，由於 $j$ 是有限的整數，所以只要窮舉到 $j - k\\\\cdot w_i$ 小於 $0$ 的瞬間就可以停下來了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過，這樣的時間複雜度在轉移上就硬生生了多了一個量級，不是很舒服，有沒有比較簡短的轉移方法呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"事實上，我們可以想得乾淨一些：不要想成我們是一口氣把 $dp[i][1\\\\sim W]$ 一口氣算出來，而是專心的把單一的 $dp[i][j]$ 算出來！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這時候，你在拿取第 $i$ 個物品轉移到 $dp[i][j]$ 時，概念就可以是\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"從 $dp[{\\\\color{red}{i-1}}][j - w_i]$ 轉移過來：你剛開始拿第 $i$ 個物品\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"從 $dp[{\\\\color{red}{i}}][j - w_i]$ 轉移過來：你\", _jsx(_components.strong, {\n          children: \"可能\"\n        }), \"已經拿過第 $i$ 個物品了\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而因為「無限」的設定，所以我們當然就不再在乎第 $i$ 個物品有沒有拿過，才會能夠從 $dp[i][j-w_i]$ 這種同一排的狀態轉移過來。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，再整理一遍式子後我們可以得出：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i][j] = \\\\max\\\\{dp[i - 1][j], dp[i][j - w_i] + v_i\\\\}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這邊可以注意到我們直接省略先前有提到過的了 $dp[i - 1][j - w_i]$，這是因為該狀態的最佳解也會被 $dp[i][j - w_i]$ 這個狀態考慮到，就不用再重複考慮一次了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，整體時間複雜度就還是 $O(NW)$：$O(NW)$ 個狀態、乘上 $O(1)$ 的轉移時間。\"\n    }), \"\\n\", _jsx(_components.h4, {\n      refId: \"背包問題的變形-無限背包問題-另一種做法\",\n      children: \"另一種做法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其實，在無限背包的設定中，我們也可以直接考慮 $dp[i]$ 是重量總和為 $i$ 的最大價值總和，進而得到\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"dp[i] = \\\\max_{w_j\\\\leq i}\\\\{dp[i - w_j] + v_j\\\\}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一樣，因為物品可以重複拿，所以自然就不用在乎「拿取物品的順序」這種資訊來保證每個物品只拿一次了——讀者可以想想看這個狀態定義不適用於一般背包問題的理由來感受到他們的差別。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣的方向會帶來 $O(W)$ 的狀態數、$O(N)$ 的轉移時間，時間複雜度也同樣是 $O(NW)$。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在這個章節中，我們以「背包問題」作為主軸，認識了不同感覺的狀態設計方法，知道「數值」本身也是可以被放在狀態上的參數。甚至放在參數的數字不只是題目給的限制，也可以是所求的答案。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過若讀者嘗試在網路上針對背包問題做搜尋的話，可以找到若干種不同看起來很厲害的寫法，似乎看上去還只用了一個維度當狀態！？還請先別擔心，在下一個章節，我們就會來介紹一下這個厲害的 DP 實作技巧——滾動 DP。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/803\",\n      src: \"NCOJ 803\",\n      name: \"電車遊戲\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/NCOJ/803/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/803/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/803/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/803/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/804\",\n      src: \"APCS 2018/10 P4\",\n      name: \"置物櫃出租\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/APCS/201810P4/description.mdx\",\n      constraintsMdx: \"guide/problems/APCS/201810P4/constraints.mdx\",\n      importMdx: \"guide/problems/APCS/201810P4/description.mdx\",\n      importMdx: \"guide/problems/APCS/201810P4/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1634\",\n      src: \"CSES 1634\",\n      name: \"Minimizing Coins\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/CSES/1634/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1634/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1634/description.mdx\",\n      importMdx: \"guide/problems/CSES/1634/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1635\",\n      src: \"CSES 1635\",\n      name: \"Coin Combinations I\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/CSES/1635/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1635/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1635/description.mdx\",\n      importMdx: \"guide/problems/CSES/1635/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1636\",\n      src: \"CSES 1636\",\n      name: \"Coin Combinations II\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/CSES/1636/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1636/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1636/description.mdx\",\n      importMdx: \"guide/problems/CSES/1636/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://atcoder.jp/contests/dp/tasks/dp_m\",\n      src: \"AtCoder Educational DP Contest Problem M\",\n      name: \"Candies\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/AtCoder/dp_m/description.mdx\",\n      constraintsMdx: \"guide/problems/AtCoder/dp_m/constraints.mdx\",\n      importMdx: \"guide/problems/AtCoder/dp_m/description.mdx\",\n      importMdx: \"guide/problems/AtCoder/dp_m/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/2256\",\n      src: \"全國賽 2021 pF\",\n      name: \"挑水果\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/NHSPC/2021F/description.mdx\",\n      constraintsMdx: \"guide/problems/NHSPC/2021F/constraints.mdx\",\n      importMdx: \"guide/problems/NHSPC/2021F/description.mdx\",\n      importMdx: \"guide/problems/NHSPC/2021F/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/801/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $N$ 個物品編號 $1 \\\\sim N$，第 $i$ 個物品的重量和價值分別是 $w_i$ 和 $v_i$。學姐打算從這 $N$ 個物品選其中一些帶走，但她只有大小為 $W$ 的背包，也就是說她選擇的物品總重不能超過 $W$。請問背包能容納的物品的總價值最大是多少？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/801/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le N \\\\le 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le W \\\\le 10^ {5}$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le w_i \\\\le W$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\le v_i \\\\le 10^ {9}$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/802/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"現在地上有 $N$ 條鐵棒，第 $i$ 條的長度為 $l_i$。你的目標是要利用這些鐵棒，焊出一條長度為 $L$ 的長鐵棒，請問有辦法嗎？兩條鐵棒如果長度分別為 $a$ 和 $b$，那它們兩個焊起來之後就會變成一條長度為 $a + b$ 的鐵棒，而且這些鐵棒可以任意焊接。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"此外，你必須要回答出 $T$ 種這個問題。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/802/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$T\\\\leq 50$ 筆測資\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq L\\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N\\\\leq 30$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq l_i \\\\leq 1000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/157/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $N$ 個高棕櫚，經過円円分析後，吃下第 $i$ 個高棕櫚會得到 $A_i$ 的飽足感和 $B_i$ 的滿足感，但円円有一個能承受的飽足感上限 $M$，試找出円円在飽足感不超過 $M$ 時能獲得的滿足感最大值。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/157/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$T\\\\leq 10$ 筆測資\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq M\\\\leq 10^6$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq A_i\\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq B_i\\\\leq 100$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/158/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $N$ 個高棕櫚，經過円円分析後，吃下第 $i$ 個高棕櫚會得到 $A_i$ 的飽足感和 $B_i$ 的滿足感，但円円有一個能承受的飽足感上限 $M$，同時還有吃下的高棕櫚數量上限 $K$，試找出円円在不違反所有限制下能獲得的滿足感最大值。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NEOJ/158/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$T\\\\leq 10$ 筆測資\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq K\\\\leq N\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq M\\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq A_i\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq B_i\\\\leq 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/825/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"現在有 $N$ 個物品，第 $i$ 個物品的重量為 $w_i$，價值為 $v_i$。每個物品都有無限多個。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"你有一個重量限制為 $W$ 的背包，你希望可以在不超過這個背包重量限制的前提下，盡可能塞入價值總和最高的物品。請問你可以塞入最高的物品總價值是多少？\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/825/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N \\\\leq 1000, 1\\\\leq W\\\\leq 200$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq w_i \\\\leq W$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq v_i \\\\leq 10^ 9$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/803/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"小峰在玩電車遊戲，這個遊戲規則相當簡單。玩家一共要移動 $N$ 次，每次抽出一個數字 $a_i$，小峰可以選擇往左走或往上走 $a_i$ 公尺，小峰需要最小化遊戲結束時所在位置與起點的距離，請問這個最短距離為何？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/803/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N\\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq a_i\\\\leq 500$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/APCS/201810P4/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"王老先生有一個置物櫃，共有 $M$ 個相同大小的格子，置物櫃目前已經租給 $n$ 個客戶，第 $i$ 位客戶所租的大小為 $f(i)$ 個格子（$1 \\\\le i \\\\le n$）。目前的承租量總和不超過 $M$，但是現在王老先生自己需要使用 $S$ 個格子的置物櫃，如果剩下的容量不夠，就必須退掉某些客戶的租約。假設每個客戶所租容量只能全退或全不退，而退租第 $i$ 個客戶損失的利益與其所租容量 $f(i)$ 相同，請寫一支程式計算王老先生最小的損失利益，如果不須退租，則損失為 $0$。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/APCS/201810P4/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq n \\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\le S\\\\le M \\\\leq 2\\\\times 10^ 5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\le f(i)\\\\le M$，且 $f(i)$ 總和不超過 $M$。\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1634/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給定 $n$ 種硬幣面額 $c_1, c_2, \\\\ldots, c_n$，試求湊出指定總和 $x$ 需要最少幾枚硬幣？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1634/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq x\\\\leq 10^6$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq c_i\\\\leq 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1635/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"給定 $n$ 種硬幣面額 $c_1, c_2, \\\\ldots, c_n$，試求有幾種用硬幣湊出指定總和 $x$ 的方法？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"兩種方法不一樣的定義為「使用硬幣的\", _jsx(_components.strong, {\n        children: \"順序\"\n      }), \"不同即不同」。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1635/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq x\\\\leq 10^6$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq c_i\\\\leq 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1636/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"給定 $n$ 種硬幣面額 $c_1, c_2, \\\\ldots, c_n$，試求有幾種用硬幣湊出指定總和 $x$ 的方法？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"兩種方法不一樣的定義為「使用硬幣的\", _jsx(_components.strong, {\n        children: \"集合\"\n      }), \"不同即不同」。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1636/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq n\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq x\\\\leq 10^6$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq c_i\\\\leq 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/AtCoder/dp_m/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"有 $N$ 個小孩要分 $K$ 顆糖果，其中第 $i$ 個小孩收到的糖果數必須介於 $0\\\\sim a_i$ 之間。若所有的糖果都必須要分完，試求有幾種分糖果的方法？\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/AtCoder/dp_m/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N\\\\leq 100$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$0\\\\leq K\\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$0\\\\leq a_i\\\\leq K$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2021F/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"一開始船上有 $c$ 個種類的水果，第 $i$ 種類有 $n_i$ 顆。現在依序經過 $c$ 個城市，每經過一個城市 $i$ 可以決定要不要把船上\", _jsx(_components.strong, {\n        children: \"所有前 $i$ 種類\"\n      }), \"的水果給當地盤商賣，其中\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"積載每顆水果經過都市 $i$ 需要積載成本 $p_i$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"把每顆水果給都市 $i$ 的盤商賣需要成本 $s_i$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"在都市 $i$ 賣種類 $j$ 的水果最後只會賣出 $r_{i,j}$ 顆\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"問若積載成本和銷售成本總和不超過 $T$ 的前提下，最多能賣幾顆水果？\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2021F/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq c, n_i \\\\leq 40$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq p_i, s_i \\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$T \\\\leq 10^7$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"背包問題","depth":1,"code":"背包問題"},{"text":"應用","depth":2,"code":"背包問題-應用"},{"text":"背包問題的變形","depth":1,"code":"背包問題的變形"},{"text":"另一種範圍的背包問題","depth":2,"code":"背包問題的變形-另一種範圍的背包問題"},{"text":"多一道限制","depth":2,"code":"背包問題的變形-多一道限制"},{"text":"無限背包問題","depth":2,"code":"背包問題的變形-無限背包問題"},{"text":"另一種做法","depth":3,"code":"背包問題的變形-無限背包問題-另一種做法"},{"text":"小結","depth":1,"code":"小結"},{"text":"習題","depth":1,"code":"習題"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}