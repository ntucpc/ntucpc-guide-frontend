{"pageProps":{"props":{"mdxPath":"guide/content/ImplementationKnowledge/structured_binding/structured_binding.mdx","code":"ImplementationKnowledge/structured_binding","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"coming":false},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"coming":false},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"倍增法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo","AlgorithmTechnique/dc"],"coming":false},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter","WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":true,"title":"樹","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":true,"title":"拓撲排序","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"Game/intro","article":"intro","topic":"Game","chapter":null,"valid":true,"title":"賽局導論","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 III","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/unintuitive_greedy","BasicDataStructure/set_map","BasicAlgorithm/partial_sum","BasicAlgorithm/binary_search_answer"],"coming":false},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"coming":false},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Structured binding","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased"],"coming":false},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"coming":false},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":true,"title":"偽指標","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/linked_list"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"]},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/ImplementationKnowledge/structured_binding/structured_binding.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ContentReference, Info, Problem, Refcode} = _components;\n  if (!ContentReference) _missingMdxReference(\"ContentReference\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      refId: \"first 跟 second 真的很長\",\n      children: [_jsx(_components.code, {\n        children: \"first\"\n      }), \" 跟 \", _jsx(_components.code, {\n        children: \"second\"\n      }), \" 真的很長\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們來做做這個簡單的小例題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"\",\n      src: \"經典題\",\n      name: \"區間交集\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/Misc/interval_intersection/description.mdx\",\n      constraintsMdx: \"guide/problems/Misc/interval_intersection/constraints.mdx\",\n      importMdx: \"guide/problems/Misc/interval_intersection/description.mdx\",\n      importMdx: \"guide/problems/Misc/interval_intersection/constraints.mdx\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這題沒有什麼演算法，就是單純窮舉 $O(N^2)$ 組區間對計算交集就對了。不過要計算兩個區間的交集會怎麼寫呢？如果我們用 \", _jsx(_components.code, {\n        children: \"std::pair<int, int>\"\n      }), \" 來存區間們的話，就會變成：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int intersection(pair<int, int> a, pair<int, int> b) {\\n    return max(0, min(a.second, b.second) - max(a.first, b.first));\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在比競程時，如果是 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 愛好者，這些 \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"second\"\n      }), \" 其實會很常被打出來。又因為這兩個單字的長度有點長，所以許多競賽選手都會在他們的 default code 加上：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"plaintext\",\n      lineno: \"false\",\n      code: \"#define f first\\n#define s second\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"等諸如此類的 macro。不過，這樣其實存在一些缺點：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"如果我們同時宣告兩個變數 \", _jsx(_components.code, {\n          children: \"f\"\n        }), \" 和 \", _jsx(_components.code, {\n          children: \"first\"\n        }), \"，這樣會直接 CE。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"當 \", _jsx(_components.code, {\n          children: \"pair\"\n        }), \" 描述的物件是區間、平面上的二維點這種物件時，使用 \", _jsx(_components.code, {\n          children: \"f\"\n        }), \" 和 \", _jsx(_components.code, {\n          children: \"s\"\n        }), \" 其實相對不直覺，也許在這時候我們會比較喜歡使用 \", _jsx(_components.code, {\n          children: \"l, r\"\n        }), \" 或 \", _jsx(_components.code, {\n          children: \"x, y\"\n        }), \"。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"因此，如果有一些替代方法來讓我們省去打一堆 \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"second\"\n      }), \" 的時間就太好了——這時候就要搬出我們的 Structured binding！請直接看看以下範例：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int intersection(pair<int, int> a, pair<int, int> b) {\\n    auto [al, ar] = a;\\n    auto [bl, br] = b;\\n    return max(0, min(ar, br) - max(al, bl));\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"沒錯，一段語法 \", _jsx(_components.code, {\n        children: \"auto [name1, name2] = pair\"\n      }), \" 就可以把 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 內的兩個變數分別提取出來放到 \", _jsx(_components.code, {\n        children: \"name1\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"name2\"\n      }), \" 兩個變數中！也因此我們能自由的取新的名字來撰寫相關程式。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"雖然這段程式碼看起來比前面長了一點，但首先在可讀性上就大幅的增加了，而且可想而知，如果未來我們要設計的函式需要大量呼叫 \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"second\"\n      }), \" 時，使用 Structured binding 也會大幅減少我們打字的時間。\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsx(_components.p, {\n        children: \"Structured binding 在 C++17 後才正式成為 C++ 的標準，因此在更低的版本有可能會不適用。不過如果不幸遇到很舊的 C++ 版本，其實可以找時間測看看競賽使用的編譯器認不認得這個功能，有時候即使版本不對，編譯器看得懂的話只會跳警告但還是會幫你編譯完成。\"\n      }), _jsx(_components.p, {\n        children: \"儘管實務上不太建議，但競程中如果因為舊版本綁手綁腳就有點太虧了，所以機器測試是很重要的！\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"與 reference 和 const 做搭配\",\n      children: \"與 reference 和 const 做搭配\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"也許有讀者會發現一個問題：如果我們要對 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 內部的物件做修改的話，不就還是得呼叫那個變數本身的 \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"second\"\n      }), \" 嗎？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"實際上還是可以使用 Structured binding 的，其方法就是使用我們之前學過用來取「別名」的 reference：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"auto &[l, r] = itv;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"像上面這樣一樣加個 \", _jsx(_components.code, {\n        children: \"&\"\n      }), \" 在前面，\", _jsx(_components.code, {\n        children: \"l, r\"\n      }), \" 就會分別對應到 \", _jsx(_components.code, {\n        children: \"itv\"\n      }), \" 內兩個元素的「本體」，直接對 \", _jsx(_components.code, {\n        children: \"l, r\"\n      }), \" 進行修改就會同時改到 \", _jsx(_components.code, {\n        children: \"itv\"\n      }), \" 內部的元素！\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"也因此，如果你的 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 是形如 \", _jsx(_components.code, {\n        children: \"pair<vector<int>, vector<int>>\"\n      }), \" 這種龐大的型別，那麼像上面這樣寫也會讓你的時間複雜度是 $O(1)$，能夠放心使用。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"同時，既然能加 reference，在前面加上 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 當然也是可以的：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"const auto &[l, r] = itv;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣就可以在 $O(1)$ 時間拿出兩個元素，且鎖定在唯獨狀態，某些情況下這會是寫程式的好習慣。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"搭配 Range-based for loop\",\n      children: \"搭配 Range-based for loop\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有了前面的和 reference 的結合，我們在撰寫最一開始提到的「區間交集」這道題目時，其輸入就可以這樣寫：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int n;\\ncin >> n;\\nvector<pair<int, int>> itv(n);\\nfor (auto &[l, r] : itv)\\n    cin >> l >> r;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"與我們介紹 Range-based for loop 時一樣，我們可以直接在宣告變數型別的時候使用 Structured binding，就可以持續省下打出 \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"second\"\n      }), \" 的時間。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"當然，因為這樣的用法不僅限於輸入，所以平常遍歷 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 陣列時也可以這樣寫：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"for (auto [l, r] : itv) {\\n    // do something\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"退一步來說，如果需要索引值，由於 Range-based for loop 在 C++17 以前不支援變數宣告就會有些困擾，但還是能這樣寫：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"for (int i = 0; i < n; ++i) {\\n    auto [l, r] = itv[i];\\n    // do something\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所以只要運氣好的話，整份 code 都不見得需要看見 \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"second\"\n      }), \"！\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      refId: \"搭配 Range-based for loop-遍歷 std::map\",\n      children: [\"遍歷 \", _jsx(_components.code, {\n        children: \"std::map\"\n      })]\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"這一小段的內容需要稍微了解過後面文章才會學到的 \", _jsx(_components.code, {\n          children: \"std::map\"\n        }), \"，若讀者有興趣可以先去看看 \", _jsx(ContentReference, {\n          type: \"content\",\n          code: \"BasicDataStructure/set_map\",\n          mode: \"full\",\n          topicTitle: \"基礎資料結構\",\n          articleTitle: \"Set 與 Map\"\n        }), \"。\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果寫出了以下的迴圈來遍歷 \", _jsx(_components.code, {\n        children: \"map\"\n      }), \"：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"map<int, int> mp;\\n// insert something into mp\\nfor (auto &[key, value] : mp) {\\n    // do something\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這時候，想像中 \", _jsx(_components.code, {\n        children: \"key\"\n      }), \" 跟 \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" 會是 \", _jsx(_components.code, {\n        children: \"mp\"\n      }), \" 內部每一個 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 前後兩個元素的 reference，但在 \", _jsx(_components.code, {\n        children: \"map\"\n      }), \" 中，作為鍵值的第一個元素其實是不可修改的。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"而這時候，即使我們沒有加上 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 這個 specifier，Structured binding 還是會自動幫我們繼承他 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 的屬性，來讓我們得到的 \", _jsx(_components.code, {\n        children: \"key\"\n      }), \" 是唯獨的。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"同樣的道理其實也適用於要提取的變數自帶 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 或 reference 等屬性，這裡讀者可以想像是 Structured binding 會自動保留這些屬性就好。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不過反過來說，如果要提取的變數們本身都沒有 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \"，我們卻只想讓其中一個提取的變數有 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 屬性的話，這就是 Structured binding 辦不到的了——這是因為這些 specifier 必須加在中括號前面，也就只能一口氣影響所有要提取的變數。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"Structured binding 實際上適用於什麼型別？\",\n      children: \"Structured binding 實際上適用於什麼型別？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"前面我們都只有舉過 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 當例子，甚至 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 內的兩個型別都是一樣的，Structured binding 當然沒有這麼遜只能支援這樣的型別。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"首先，對於型別 \", _jsx(_components.code, {\n        children: \"pair<A, B>\"\n      }), \"，\", _jsx(_components.code, {\n        children: \"A\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"B\"\n      }), \" 的型別不一樣是完全可以的，例如將 \", _jsx(_components.code, {\n        children: \"pair<int, double>\"\n      }), \" 提取出來後，就會確實的分別得到 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"double\"\n      }), \" 兩個型別的變數。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"再來，不是只有 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 適用於這個語法，實際上在 C++ 的規範中，有三種類型可以被支援：\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"array\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"tuple-like 的型別\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"以 \", _jsx(_components.code, {\n          children: \"struct\"\n        }), \" 或 \", _jsx(_components.code, {\n          children: \"class\"\n        }), \" 描述的 data members\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"上面的描述其實省略了一些特殊狀況，不過在競程中通常不會遇到，因此省略之。\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們來一一介紹他們。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"Structured binding 實際上適用於什麼型別？-array\",\n      children: \"array\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"對於宣告好的一條陣列，只要使用相同個數的元素，就可以對他使用 Structured binding 來提取出裡面的元素，例如：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int arr[5] = {1, 2, 3, 4, 5};\\nauto [a, b, c, d, e] = arr;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"上面這段語法，\", _jsx(_components.code, {\n        children: \"a, b, c, d, e\"\n      }), \" 就會分別對應到 \", _jsx(_components.code, {\n        children: \"arr\"\n      }), \" 的五個元素。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過用在陣列上，就得打出相應數量的元素量，所以更多時候只適用於短的陣列。\"\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"C++ 預計從 C++26 後開始支援將部分元素「打包」成一個 pack 的 Structured binding，來放寬這種每次都得打出對應元素量的限制。\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"Structured binding 實際上適用於什麼型別？-tuple-like 的型別\",\n      children: \"tuple-like 的型別\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"就像 \", _jsx(_components.code, {\n        children: \"std::pair\"\n      }), \" 一樣，這種把多種型別打包在一起的組合型別就是我們這裡稱呼的 tuple-like 型別，他們的共同點就是有 \", _jsx(_components.code, {\n        children: \"std::get\"\n      }), \" 這個功能可以提取單一變數中特定位置型別的功能。不過其實只要大於兩種型別，在 C++ 中就會必須得使用 \", _jsx(_components.code, {\n        children: \"std::tuple\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"因此，與 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 一樣，\", _jsx(_components.code, {\n        children: \"tuple\"\n      }), \" 也可以使用 Structured binding：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"tuple<int, double, bool> tup = {1, 0.5, true};\\nauto [a, b, c] = tup;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這樣 \", _jsx(_components.code, {\n        children: \"a, b, c\"\n      }), \" 三個變數就會對應到 \", _jsx(_components.code, {\n        children: \"tup\"\n      }), \" 所包含的三個不同變數型別。概念與 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 基本上是一樣的，就不再多解釋。\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      refId: \"Structured binding 實際上適用於什麼型別？-以 struct 或 class 描述的 data members\",\n      children: [\"以 \", _jsx(_components.code, {\n        children: \"struct\"\n      }), \" 或 \", _jsx(_components.code, {\n        children: \"class\"\n      }), \" 描述的 data members\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"相信一定也有一派的選手不喜歡使用 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 或 \", _jsx(_components.code, {\n        children: \"tuple\"\n      }), \"，而是會自己果斷的實作一個 \", _jsx(_components.code, {\n        children: \"struct\"\n      }), \" 或 \", _jsx(_components.code, {\n        children: \"class\"\n      }), \" 來打包一坨變數，例如：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"struct my_struct {\\n    int x = 1, y = 2;\\n    vector<int> v = {3, 4, 5};\\n};\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"即使你設計的 \", _jsx(_components.code, {\n        children: \"struct\"\n      }), \" 包含若干種不同型別的變數，使用 Structured binding\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"my_struct S;\\nauto [x, y, z] = S;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"還是能正確的按照順序提取內部的變數！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所以，千萬別以為 Structured binding 是什麼只適用於 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \" 的語法，他的用途可多了。\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      refId: \"Structured binding 實際上適用於什麼型別？-以 struct 或 class 描述的 data members-std::array vs std::vector\",\n      children: [_jsx(_components.code, {\n        children: \"std::array\"\n      }), \" vs \", _jsx(_components.code, {\n        children: \"std::vector\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"前面我們有提過陣列也能使用 Structured binding，但如果對 \", _jsx(_components.code, {\n        children: \"std::array\"\n      }), \" 或 \", _jsx(_components.code, {\n        children: \"std::vector\"\n      }), \" 使用，會發生什麼事呢？直接看看下面兩種範例：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"array<int, 3> arr1 = {1, 2, 3};\\nvector<int> arr2 = {4, 5, 6};\\nauto [a, b, c] = arr1;\\nauto [d, e, f] = arr2; // compile error\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"實際測試的結果會發現，第三行的編譯是會過的，第四行則不會。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"其實不會過反而比較合邏輯，這是因為我們通常會把這兩個東西當成一個單一的 \", _jsx(_components.code, {\n        children: \"class\"\n      }), \"，而想像中他們的內容物應該已經被打包成一個變數了，所以用 Structured binding 時，元素的個數應該得是一個才會編譯成功。就好像：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"struct array_struct {\\n    int a[2] = {0, 1};  \\n};\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"上面這個 \", _jsx(_components.code, {\n        children: \"array_struct\"\n      }), \" 其實要寫成 \", _jsx(_components.code, {\n        children: \"auto [a] = array_struct{};\"\n      }), \" 編譯才會成功，因為 Structured binding 按照這個邏輯只能提取 \", _jsx(_components.code, {\n        children: \"int a[]\"\n      }), \" 這個型別的變數而已。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不過為什麼 \", _jsx(_components.code, {\n        children: \"std::array\"\n      }), \" 卻是用元素個數來提取呢？其理由是因為，\", _jsx(_components.code, {\n        children: \"std::array\"\n      }), \" 支援 \", _jsx(_components.code, {\n        children: \"std::get\"\n      }), \" 等 tuple-like 的操作，所以在這裡，Structured binding 才把他當成了 tuple-like 的類型來提取。這算是一個比較不直觀的個案。\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      refId: \"Structured binding 實際上適用於什麼型別？-以 struct 或 class 描述的 data members-std::pair of std::pair\",\n      children: [_jsx(_components.code, {\n        children: \"std::pair\"\n      }), \" of \", _jsx(_components.code, {\n        children: \"std::pair\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果出現 \", _jsx(_components.code, {\n        children: \"pair<pair<int, int>, pair<int, int>>\"\n      }), \" 這種型別的變數，有辦法用 Structured binding 一口氣提取四個變數嗎？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"答案是不行，雖然有點可惜，但目前就是這樣，我們可以期待 C++ 未來做出有可能可以處理這種狀況的改版 :)\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在本文章中我們學到了 Structured binding 的用法和用途，Structured binding 在競程上時常會是省下 coding 時間、增加可讀性的好工具，讀者可以多加利用。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"而且 Structured binding 還不只適用於 \", _jsx(_components.code, {\n        children: \"pair\"\n      }), \"，不管是陣列還是自定義的 \", _jsx(_components.code, {\n        children: \"struct\"\n      }), \" 或 \", _jsx(_components.code, {\n        children: \"class\"\n      }), \"，只要元素數量吻合都是可以做使用的。若覺得記憶起來麻煩的話，讀者可以在使用 Structured binding 時試圖以「如果我是編譯器的話，我看得懂嗎？」這樣的方式來做思考。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"當然，由於本文只介紹在競程中常見的用途，實際上 Structured binding 還有更多細節是在這種小篇幅不好解釋的，如果有興趣的讀者，可以自行去 \", _jsx(_components.a, {\n        href: \"https://en.cppreference.com/w/cpp/language/structured_binding\",\n        children: \"cppreference\"\n      }), \" 參考。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"參考資料\",\n      children: \"參考資料\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://en.cppreference.com/w/cpp/language/structured_binding\",\n          children: \"cppreference.com - Structured binding declaration\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/interval_intersection/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給定 $N$ 組區間 $[l_i, r_i]$，請找出交集最大的兩個區間。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/Misc/interval_intersection/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N\\\\leq 5000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"first 跟 second 真的很長","depth":1,"code":"first 跟 second 真的很長"},{"text":"與 reference 和 const 做搭配","depth":1,"code":"與 reference 和 const 做搭配"},{"text":"搭配 Range-based for loop","depth":1,"code":"搭配 Range-based for loop"},{"text":"遍歷 std::map","depth":2,"code":"搭配 Range-based for loop-遍歷 std::map"},{"text":"Structured binding 實際上適用於什麼型別？","depth":1,"code":"Structured binding 實際上適用於什麼型別？"},{"text":"array","depth":2,"code":"Structured binding 實際上適用於什麼型別？-array"},{"text":"tuple-like 的型別","depth":2,"code":"Structured binding 實際上適用於什麼型別？-tuple-like 的型別"},{"text":"以 struct 或 class 描述的 data members","depth":2,"code":"Structured binding 實際上適用於什麼型別？-以 struct 或 class 描述的 data members"},{"text":"std::array vs std::vector","depth":3,"code":"Structured binding 實際上適用於什麼型別？-以 struct 或 class 描述的 data members-std::array vs std::vector"},{"text":"std::pair of std::pair","depth":3,"code":"Structured binding 實際上適用於什麼型別？-以 struct 或 class 描述的 data members-std::pair of std::pair"},{"text":"小結","depth":1,"code":"小結"},{"text":"參考資料","depth":1,"code":"參考資料"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}