{"pageProps":{"props":{"mdxPath":"guide/content/BasicAlgorithm/searching/searching.mdx","code":"BasicAlgorithm/searching","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"廣度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"深度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/rngbased","Implementation/structure_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","Implementation/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","Implementation/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 II","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/basic_knowledge","article":"basic_knowledge","topic":"Implementation","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"Implementation/buglist","article":"buglist","topic":"Implementation","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/variable"],"coming":false},{"code":"Implementation/compiler","article":"compiler","topic":"Implementation","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/debug","article":"debug","topic":"Implementation","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["Implementation/buglist"],"coming":false},{"code":"Implementation/error_message","article":"error_message","topic":"Implementation","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/compiler"],"coming":false},{"code":"Implementation/float_error","article":"float_error","topic":"Implementation","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/input","article":"input","topic":"Implementation","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"Implementation/pseudo_pointer","article":"pseudo_pointer","topic":"Implementation","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/reference","article":"reference","topic":"Implementation","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/rngbased","article":"rngbased","topic":"Implementation","chapter":"III","valid":false,"title":"Range-Based for loop","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/structure_binding","article":"structure_binding","topic":"Implementation","chapter":"III","valid":false,"title":"Structure Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/variable","article":"variable","topic":"Implementation","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"Implementation","title":"實作技巧","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","Implementation/debug","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["Implementation"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicAlgorithm/searching/searching.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Info, Problem, Refcode} = _components;\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"引言\",\n      children: \"引言\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"大家有玩過猜數字遊戲嗎？遊戲的規則是這樣的：主持人會在心中默想一個特定範圍的數字、玩家的任務就是要猜出主持人心中想的那個數字。而每當玩家猜一個數字時，主持人就會告訴玩家他想的數字跟玩家猜的數字之間的大小關係。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"你會採用什麼樣的策略來猜呢？換句話說，你會如何「搜尋」出答案呢？接下來我們就要來探討幾種關於搜尋的演算法：線性搜尋法與二分搜尋法。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"線性搜尋法\",\n      children: \"線性搜尋法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"對於剛剛的猜數字遊戲，我們有一種最粗暴的作法：從第一個數字一路猜到最後一個數字，我們總有一天會猜中！而這樣的作法有一個正式的名稱，叫做線性搜尋法，顯然在目標存在的狀況下都不會出錯，那麼效率如何呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"對於一個長度為 $N$ 的序列，若是我們想要找到裡面的某個元素，由於我們是一個一個找，因此在最糟的情況下會需要將序列中的 $N$ 個元素都檢查過一次，因此時間複雜度為 $O(N)$。非常直覺的作法，只可惜...效率好像有點差強人意。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"寫成程式碼大概像這個樣子：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"// arr 是我們要搜尋的序列、len 是序列的長度、tar 是我們要搜尋的目標。\\n// 回傳值為目標的索引值。\\nint linear_search (int arr[], int len, int tar) {\\n    for (int i = 0; i < len; ++i) {  // 暴力檢查每個位置\\n        if (arr[i] == tar) return i;   // 找到答案後直接回傳\\n    }\\n    return len;                       // 沒找到，回傳 len。\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"二分搜尋法\",\n      children: \"二分搜尋法\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"然而我們會發現剛剛的作法根本就沒有用到主持人提供的資訊。因此我們接下來就來看看猜數字遊戲最廣為人知的一種策略，也就是每次都猜一半，舉例來說，假設這次的數字範圍是 0 到 100，我們就會猜中間的數字，也就是 50、此時如果主持人說要再大一點，我們就會挑選 50 與 100 的中間，也就是 75 作為我們的第二次猜測。以此類推，直到猜出答案為止。這樣的作法就是所謂的\", _jsx(_components.strong, {\n        children: \"二分搜尋法\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜尋法-二分搜的原理\",\n      children: \"二分搜的原理\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們很直覺的會覺得這樣做會比線性搜尋法更好，但究竟好了多少呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們會發現每次猜測之後，可能是答案的範圍就會少一半。舉例來說，一樣是 0 到 100，我們只要猜 50，那麼不管主持人說大於還是小於，可能會是答案的數字範圍都會從 100 個變成 50 個。那麼，對於一個長度為 $N$ 的序列，我們最慘只要猜錯 $\\\\lceil\\\\log_2 N\\\\rceil=O(\\\\log N)$ 次，就會只剩下唯一的答案候選人，而他就會是我們要找的答案。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此我們得到了 $O(\\\\log N)$ 的複雜度，比線性搜尋法快上不少，既然如此，那為什麼會需要線性搜尋法呢？原因是二分搜的目標序列必須要是有「單調性」，如果序列是雜亂無章的，那就無法從一次猜測的結果來砍半答案的可能範圍，因此我們會需要排序，但某些時候為了一次的搜尋而排序實在是太浪費了，這時候就直接暴力搜尋就可以了！\"\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"什麼是單調性呢？\", _jsx(_components.br, {}), \"\\n\", \"簡單來說就是要保持某一種次序性，像是數字由小到大、分數由高到低排列等等這樣的次序性，只要保持這樣的次序性我們就會說他是具有單調性的。\", _jsx(_components.br, {}), \"\\n\", \"以我們現在在看序列的角度來說，就是對於序列上任意兩個位置 $x, y$，只要 $x\\\\le y$ 我們就一定可以保證某種性質，那這樣的序列就是有單調性的，前述猜數字遊戲中所保證的性質就是只要 $x \\\\le y$ 就代表序列中 $x$ 位置上的值一定會小於等於 $y$ 位置上的值。\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜尋法-二分搜的實作\",\n      children: \"二分搜的實作\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"利用前述的概念，寫出來的二分搜就像這個樣子：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"// arr 是我們要搜尋的序列 (由小到大排列好的)、len 是序列的長度、tar 是\\n// 我們要搜尋的目標。\\n// 回傳值為目標的索引值。\\nint bin_search (int arr[], int len, int tar) {\\n    int l = 0, r = len;         // 答案候選區間 (左閉右開)。\\n\\n    while (l < r) {\\n        int m = l + (r - l) / 2;  // 猜中間的。\\n        if (arr[m] < tar)\\n            l = m + 1;              // 猜的太小，更新候選區間為右半邊。\\n        else if (arr[m] > tar)\\n            r = m;                  // 猜的太大，更新候選區間為左半邊。\\n        else\\n            return m;               // 猜中了。\\n    }\\n\\n    return len;                 // 沒找到，回傳 len。\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"實做上我們通常會專注於維護可能的答案區間，在這裡要特別注意到邊界的定義，像範例程式碼就是「左閉右開」（包含左邊，但不包含右邊），不同的邊界定義會產生不同的寫法，在實做時需要特別注意。\"\n    }), \"\\n\", _jsx(Info, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [\"小心無窮迴圈！請特別注意左右界定義、中止條件、與更新答案區間的方式，三者之間的關係，以範例程式碼而言，因為一些數學理由，\", _jsx(_components.code, {\n          children: \"m\"\n        }), \" 一定不會等於 \", _jsx(_components.code, {\n          children: \"r\"\n        }), \"，因此每次迴圈左右界的距離是嚴格遞減的，所以才可以保障我們的迴圈會停下來。\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"然而，在大部份的情況下，我們會採用更泛用的作法：找出第一個大於等於目標的位置而非目標的位置，程式碼如下：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"// arr 是我們要搜尋的序列 (由小到大排列好的)、len 是序列的長度、tar 是\\n// 我們要搜尋的目標。\\n// 回傳值為第一個大於等於目標的索引值。\\nint lower_bound_bin_search (int arr[], int len, int tar) {\\n    int l = 0, r = len;         // 左界是不確定狀態。\\n                                // 右界是保證大於等於 tar。\\n\\n    while (l < r) {\\n        int m = l + (r - l) / 2;  // 猜中間的。\\n        if (arr[m] < tar)\\n            l = m + 1;              // 猜的太小，更新左界。\\n        else if (arr[m] >= tar)\\n            r = m;                  // 猜的太大，更新右界。\\n    }\\n\\n    return r;                   // 回傳結果。\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"同樣的，我們也要良好的定義左、右界，範例程式碼中，左界被定義為「不確定是小於還是大於等於的位置」，因此在更新時不能更新為 \", _jsx(_components.code, {\n        children: \"m\"\n      }), \"（他是確認小於的位置），而程式中止在左右界相同時（也就是不確定大小關係的位置已經不存在了）。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜尋法-二分搜 in STL\",\n      children: \"二分搜 in STL\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"看完前面的內容，應該不難發現二分搜在實做上超級容易出錯，但別擔心，STL 已經幫我們寫好了好用的二分搜函式囉！\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"lower_bound(first, last, val, cmp)\"\n        }), \"：從 \", _jsx(_components.code, {\n          children: \"[first, last)\"\n        }), \" 中找到第一個元素 \", _jsx(_components.code, {\n          children: \"element\"\n        }), \" 使得 \", _jsx(_components.code, {\n          children: \"cmp(element, val)\"\n        }), \" 為 \", _jsx(_components.code, {\n          children: \"false\"\n        }), \" 的位置。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"upper_bound(first, last, val, cmp)\"\n        }), \"：從 \", _jsx(_components.code, {\n          children: \"[first, last)\"\n        }), \" 中找到第一個元素 \", _jsx(_components.code, {\n          children: \"element\"\n        }), \" 使得 \", _jsx(_components.code, {\n          children: \"cmp(val, element)\"\n        }), \" 為 \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" 的位置。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsx(_components.p, {\n        children: \"如果上面關於兩個函式的說明有點難以理解的話，不妨這麼想像看看：\"\n      }), _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"cmp\"\n        }), \" 是我們新定義的大小關係，如果 \", _jsx(_components.code, {\n          children: \"cmp(a, b)\"\n        }), \" 為 \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" 就代表 \", _jsx(_components.code, {\n          children: \"a\"\n        }), \" 比 \", _jsx(_components.code, {\n          children: \"b\"\n        }), \" 小（可以把布林運算式的 \", _jsx(_components.code, {\n          children: \"a < b\"\n        }), \" 想像為 \", _jsx(_components.code, {\n          children: \"<(a, b)\"\n        }), \" 也許會比較好理解）。\"]\n      }), _jsxs(_components.p, {\n        children: [\"那麼，我們可以按照 \", _jsx(_components.code, {\n          children: \"cmp\"\n        }), \" 這樣的大小關係為序列進行排序並進行二分搜，此時的 \", _jsx(_components.code, {\n          children: \"lower_bound\"\n        }), \" 就是在 \", _jsx(_components.code, {\n          children: \"cmp\"\n        }), \" 這樣的大小關係下，找出第一個\", _jsx(_components.strong, {\n          children: \"大於等於\"\n        }), \" \", _jsx(_components.code, {\n          children: \"val\"\n        }), \" 的位置；而 \", _jsx(_components.code, {\n          children: \"upper_bound\"\n        }), \" 則是找出第一個\", _jsx(_components.strong, {\n          children: \"大於\"\n        }), \" \", _jsx(_components.code, {\n          children: \"val\"\n        }), \" 的位置。\"]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"關於 \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" 與 \", _jsx(_components.code, {\n        children: \"last\"\n      }), \"，我們可以傳入一個陣列的兩個位置，也可以利用 STL 容器的 \", _jsx(_components.code, {\n        children: \"begin()\"\n      }), \" 與 \", _jsx(_components.code, {\n        children: \"end()\"\n      }), \" 來代表，另外，\", _jsx(_components.code, {\n        children: \"cmp\"\n      }), \" 的意義與 \", _jsx(_components.code, {\n        children: \"std::sort()\"\n      }), \" 的 \", _jsx(_components.code, {\n        children: \"cmp\"\n      }), \" 相同，而傳入的序列必須要以這個 \", _jsx(_components.code, {\n        children: \"cmp\"\n      }), \" 的規則排序，至於 \", _jsx(_components.code, {\n        children: \"cmp\"\n      }), \" 的寫法這裡就不再贅述，以下提供一組範例：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <algorithm>\\n#include <vector>\\n#include <iostream>\\n\\nusing namespace std;\\n\\nbool cmp (int a, int b) {\\n    return a > b;\\n}\\n\\nint main () {\\n    int arr[5] = {1, 3, 3, 5, 8};\\n    int *lower_pos = lower_bound(arr, arr + 5, 3);\\n    int *upper_pos = upper_bound(arr, arr + 5, 3);\\n    cout << \\\"lower_bound of ascending: \\\" << lower_pos - arr << '\\\\n';\\n    cout << \\\"upper_bound of ascending: \\\" << upper_pos - arr << '\\\\n';\\n\\n    vector<int> vec = {8, 5, 3, 3, 1};\\n    auto lo_vec_pos = lower_bound(vec.begin(), vec.end(), 3, cmp);\\n    auto up_vec_pos = upper_bound(vec.begin(), vec.end(), 3, cmp);\\n    cout << \\\"lower_bound of descending: \\\" << lo_vec_pos - vec.begin() << '\\\\n';\\n    cout << \\\"upper_bound of descending: \\\" << up_vec_pos - vec.begin() << '\\\\n';\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"二分搜應用\",\n      children: \"二分搜應用\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"看完了二分搜的寫法，緊接著讓我們來看一下二分搜會如何出現在題目裡吧！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜應用-小試身手\",\n      children: \"小試身手\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"先從我們熟悉的開始看起，也就是在一個序列中進行二分搜：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://leetcode.com/problems/3sum/\",\n      src: \"LeetCode 15\",\n      name: \"3Sum\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/LeetCode/3sum/description.mdx\",\n      constraintsMdx: \"guide/problems/LeetCode/3sum/constraints.mdx\",\n      importMdx: \"guide/problems/LeetCode/3sum/description.mdx\",\n      importMdx: \"guide/problems/LeetCode/3sum/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一開始還看不出這道題目與二分搜有什麼關係，但我們可以立刻想到一個 $O(N^3)$ 的暴力作法，但想當然爾會超時，仔細觀察一下，我們會發現當我們在枚舉其中兩個數字時，第三個數字其實也就已經被定下來了，也就是說，我們只要暴力的窮舉其中兩個數字，然後確認我們需要的第三個數字有幾個就可以了！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"那麼，我們要如何計算第三個數字的數量呢？這時候就輪到二分搜上場了！我們只要把所有的數字由小到大排好，然後利用 \", _jsx(_components.code, {\n        children: \"lower_bound()\"\n      }), \" 就可以找到我們的目標了。然而，單用 \", _jsx(_components.code, {\n        children: \"lower_bound()\"\n      }), \" 我們只能確認我們的目標是否存在、以及在序列中的哪裡而已，萬一我們的目標數字有好幾個該怎麼辦呢？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這個時候我們就可以利用 \", _jsx(_components.code, {\n        children: \"upper_bound()\"\n      }), \" 了，\", _jsx(_components.code, {\n        children: \"lower_bound()\"\n      }), \" 會告訴我們第一個大於等於目標的位置、\", _jsx(_components.code, {\n        children: \"upper_bound()\"\n      }), \" 則會告訴我們第一個大於目標的位置，將兩者相減，我們就可以得到等於目標的長度、也就是目標數字的個數了！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最後只要注意一些使用到重複數字的細節並加以處理就可以通過這一題囉！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜應用-習題們\",\n      children: \"習題們\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://leetcode.com/problems/sqrtx/\",\n      src: \"LeetCode 69\",\n      name: \"Sqrt(x)\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/LeetCode/sqrtx/description.mdx\",\n      constraintsMdx: \"guide/problems/LeetCode/sqrtx/constraints.mdx\",\n      importMdx: \"guide/problems/LeetCode/sqrtx/description.mdx\",\n      importMdx: \"guide/problems/LeetCode/sqrtx/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=f581\",\n      src: \"ZeroJudge f581\",\n      name: \"圓環出口\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/ZeroJudge/f581/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/f581/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/f581/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/f581/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"結語\",\n      children: \"結語\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"搜尋是個大家常常都會需要的功能，不同的搜尋方法有不同的特色，像是線性搜簡單無腦但慢、二分搜有效率但也有所限制。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其中二分搜雖然是個基礎的演算法，但他非常好用，而「把東西切一半」這樣的想法還會在未來的許多資料結構與演算法之中一而再、再而三的出現，所以希望各位讀者看文本文後可以對二分搜有基本的認識，並準備好面對接下來的挑戰！\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/LeetCode/3sum/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給定一個長度為 $N$ 的序列 $a$，請找出所有的 $a_i, a_j, a_k (i\\\\ne j, j\\\\ne k, i\\\\ne k)$ 使得 $a_i + a_j + a_k = 0$。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/LeetCode/3sum/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$3\\\\le N\\\\le 3000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^5 \\\\le a_i \\\\le 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/LeetCode/sqrtx/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給定一個非負整數 $x$，請找出 $\\\\sqrt{x}$ 並向下取整。因為是練習，所以請不要使用任何的內建指數、根號函式。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/LeetCode/sqrtx/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$0\\\\le x\\\\le 2^{31}-1$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/f581/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"有 $n$ 個房間排成一個圓環，編號從 $0$ 到 $n-1$，編號 $i$ 的房間有一條單向道路到編號 $(i+1) \\\\bmod n$ 的房間，每次走進房間 $i$ 時可以獲得 $p_i$ 個點數（最一開始待的房間也可以獲得點數），點數可以重複獲得。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一開始你在編號 $0$ 的房間，接下來依序有 $m$ 個任務，第 $i$ 個任務需要蒐集 $q_i$ 個點數，你會先獲得當下所在房間給的點數，然後不斷走到下一個房間、獲得那個房間的點數，直到拿到至少 $q_i$ 個點數為止，\", _jsx(_components.strong, {\n        children: \"最後停在再下一個房間\"\n      }), \"（這個房間的點數留到下次任務使用）。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"求最後停留的房間是哪一個。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/f581/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$m \\\\leq 20000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"引言","depth":1,"code":"引言"},{"text":"線性搜尋法","depth":1,"code":"線性搜尋法"},{"text":"二分搜尋法","depth":1,"code":"二分搜尋法"},{"text":"二分搜的原理","depth":2,"code":"二分搜尋法-二分搜的原理"},{"text":"二分搜的實作","depth":2,"code":"二分搜尋法-二分搜的實作"},{"text":"二分搜 in STL","depth":2,"code":"二分搜尋法-二分搜 in STL"},{"text":"二分搜應用","depth":1,"code":"二分搜應用"},{"text":"小試身手","depth":2,"code":"二分搜應用-小試身手"},{"text":"習題們","depth":2,"code":"二分搜應用-習題們"},{"text":"結語","depth":1,"code":"結語"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}