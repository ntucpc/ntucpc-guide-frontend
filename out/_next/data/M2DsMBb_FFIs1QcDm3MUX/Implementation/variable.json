{"pageProps":{"props":{"mdxPath":"guide/content/Implementation/variable/variable.mdx","code":"Implementation/variable","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"廣度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/structure_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/rngbased","Implementation/structure_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","Implementation/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","Implementation/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 II","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/basic_knowledge","article":"basic_knowledge","topic":"Implementation","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"Implementation/buglist","article":"buglist","topic":"Implementation","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/variable"],"coming":false},{"code":"Implementation/compiler","article":"compiler","topic":"Implementation","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/debug","article":"debug","topic":"Implementation","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["Implementation/buglist"],"coming":false},{"code":"Implementation/error_message","article":"error_message","topic":"Implementation","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/compiler"],"coming":false},{"code":"Implementation/float_error","article":"float_error","topic":"Implementation","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/input","article":"input","topic":"Implementation","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"Implementation/pseudo_pointer","article":"pseudo_pointer","topic":"Implementation","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/reference","article":"reference","topic":"Implementation","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/rngbased","article":"rngbased","topic":"Implementation","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/reference","BasicDataStructure/vector"],"coming":false},{"code":"Implementation/structure_binding","article":"structure_binding","topic":"Implementation","chapter":"III","valid":false,"title":"Structure Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/variable","article":"variable","topic":"Implementation","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"Implementation","title":"實作技巧","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","Implementation/debug","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["Implementation"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/Implementation/variable/variable.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ContentReference, Info, Refcode} = _components;\n  if (!ContentReference) _missingMdxReference(\"ContentReference\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"本文介紹一些全域、區域變數的基本概念。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"變數初始化\",\n      children: \"變數初始化\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這個小節我們討論一些關於「變數會怎麼被初始化」的事情，如果你在宣告變數時，直接明確寫出變數的值，例如 \", _jsx(_components.code, {\n        children: \"int x = 123\"\n      }), \"，那變數的初始值當然就是你一開始指定的值了，但是如果沒有指定的話，狀況就會複雜一些。C++ 的變數初始化規則非常複雜，這裡我們只提一些程式競賽中常見的狀況，有興趣暸解運作細節的讀者可以參考 \", _jsx(_components.a, {\n        href: \"https://en.cppreference.com/w/cpp/language/initialization\",\n        children: \"cppreference 上的說明\"\n      }), \"。為了方便理解，這裡的說明會簡化一些初始化時的細節步驟和原理。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"雖然像是 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 這種數字型態，指定個初始值非常容易，但如果今天我們要用的變數是一個陣列、甚至是一個 class，就比較難在宣告的時候就把它的初始值整個打出來，因此我們還是得稍微暸解一下變數初始化是如何運作，寫程式時也可以省去一些不必要的麻煩以及避免 bug。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"變數初始化-全域與區域變數的差異\",\n      children: \"全域與區域變數的差異\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"變數初始化是全域與區域變數的一個很大的差別，先看看下面這段程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int global_x;\\nvoid f1() { \\n    int x;\\n    cout << x << \\\"\\\\n\\\"; // ???\\n    cout << global_x << \\\"\\\\n\\\"; // 0\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"global_x\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" 分別是沒有被指定初始值的全域和區域變數，\", _jsx(_components.code, {\n        children: \"global_x\"\n      }), \" 一定會是 0，但 \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" 卻不一定，也就是說全域變數會被自動初始化成 0，但區域變數不會，沒有指定初始值的區域變數，一開始的值是不確定的，在為它賦予一個明確的值之前也不應該讀取它。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"要注意沒有初始化的區域變數，不幸地好像很容易在本機跑出 0 的結果，因此要是不小心用了沒初始化過的區域變數，自己測試的時候有可能不容易觀察到這個問題，在編譯時加上選項 \", _jsx(_components.code, {\n        children: \"-Wall\"\n      }), \" 就可以在忘記初始化區域變數時獲得警告。\"]\n    }), \"\\n\", _jsx(Info, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"用全域和區域變數來區分這兩種不同的行為，實際上是不精準的分法，例如本文後面會介紹到的 static 區域變數，初始化的規則其實會和全域變數一樣。\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"變數初始化-陣列\",\n      children: \"陣列\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int global_arr[5];\\nvoid f2() {\\n    int arr[5];\\n    cout << arr[1] << \\\"\\\\n\\\"; // ???\\n    cout << global_arr[1] << \\\"\\\\n\\\"; // 0\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"和剛剛的例子類似，全域的 \", _jsx(_components.code, {\n        children: \"global_arr\"\n      }), \" 之中每一個元素都會自動被填成 0，但是區域的 \", _jsx(_components.code, {\n        children: \"arr\"\n      }), \" 和剛剛一樣，不會被自動初始化。蛤我只是想要一個區域的全都是 0 的陣列怎麼那麼麻煩，有個簡單的方法是 \", _jsx(_components.code, {\n        children: \"int arr[5] = {}\"\n      }), \"，這樣就可以得到一個每個元素都是 0 的區域陣列了，大括號裡面也可以只打前幾個元素，後面會被自動填成 0，例如 \", _jsx(_components.code, {\n        children: \"int arr[5] = {1, 2}\"\n      }), \"，這樣一來 \", _jsx(_components.code, {\n        children: \"arr\"\n      }), \" 的初始值會是 \", _jsx(_components.code, {\n        children: \"{1, 2, 0, 0, 0}\"\n      }), \"，反正有打東西就會全部初始化了。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"static\",\n      children: \"static\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有時候我們會希望在一個函式之中，某個變數最後的狀態可以保留到下一次執行這個函式時使用，也就是下一次函式執行時變數不會被重置，這個時候一種容易想到的解決方法就是直接把這個變數開成全域變數。舉例來說，你想要寫一個函式，每次執行時都會輸出這個函式是第幾次被執行，可能就會這樣寫：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int cnt = 0;\\nvoid f() {\\n    cnt++;\\n    cout << \\\"f: \\\" << cnt << \\\"\\\\n\\\";\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這麼做的缺點是，\", _jsx(_components.code, {\n        children: \"cnt\"\n      }), \" 只被 \", _jsx(_components.code, {\n        children: \"f()\"\n      }), \" 使用到，但它仍然是一個全域變數，會影響到整份程式碼，例如其他函式可能會不小心改到它，或是其他全域變數不能也叫 \", _jsx(_components.code, {\n        children: \"cnt\"\n      }), \"。這個時候，就是 \", _jsx(_components.code, {\n        children: \"static\"\n      }), \" 這個關鍵字出場的時候了！我們把 \", _jsx(_components.code, {\n        children: \"cnt\"\n      }), \" 的宣告移到 \", _jsx(_components.code, {\n        children: \"f()\"\n      }), \" 裡面，並且改成 \", _jsx(_components.code, {\n        children: \"static int cnt = 0\"\n      }), \"，這樣一來 \", _jsx(_components.code, {\n        children: \"cnt\"\n      }), \" 的作用區域就只在 \", _jsx(_components.code, {\n        children: \"f()\"\n      }), \" 裡面，而且它的值會一直保留。\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"void f() {\\n    static int cnt = 0;\\n    cnt++;\\n    cout << \\\"f: \\\" << cnt << \\\"\\\\n\\\";\\n}\\n\\nvoid g() {\\n    static int cnt = 0;\\n    cnt++;\\n    cout << \\\"g: \\\" << cnt << \\\"\\\\n\\\";\\n}\\n\\nint main() {\\n    f(); // f: 1\\n    f(); // f: 2\\n    g(); // g: 1\\n    f(); // f: 3\\n    g(); // g: 2\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"f()\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"g()\"\n      }), \" 裡面各有一個宣告成 \", _jsx(_components.code, {\n        children: \"static\"\n      }), \" 的 \", _jsx(_components.code, {\n        children: \"cnt\"\n      }), \" 變數，它們兩個之間互不干擾，修改過後的數值也可以一直保留到函式下一次執行，完美達到了我們的需求。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"const\",\n      children: \"const\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"很多時候我們會用到一個固定的數字，例如有些題目會要求把答案 mod $10^9+7$ 或 $998244353$ 之類的數字後輸出，這個時候就很適合把這些固定的數字宣告成變數，免得每次用到都得完整重打數字，還有可能會打錯。除了宣告成變數之外，也可以在型態前面加上 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \"，例如 \", _jsx(_components.code, {\n        children: \"const int MOD = 1000000007\"\n      }), \"，全域或區域變數都可以用。\", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 的意思是這個變數宣告之後就不能改變了，所以如果你宣告之後寫了 \", _jsx(_components.code, {\n        children: \"MOD = 123123\"\n      }), \" 之類的，就會直接獲得一個 compile error。這麼做除了可以避免不小心修改到以外，還有一個好處是能告訴編譯器這個變數永遠不會改變，編譯器就可以根據這點偷偷進行一些優化，讓程式碼執行得更快。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"舉例來說：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\\n\\nusing namespace std;\\n\\nconst int MOD = 1000000007;\\nint main() {\\n    int n;\\n    cin >> n;\\n    int total = 0;\\n    for (int i = 0; i < n; i++) {\\n        total = (total + i) % MOD;\\n    }\\n    cout << total << \\\"\\\\n\\\";\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"把第 5 行的 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 拔掉的話，就會慢一些些，讀者可以自己試試看。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"const\"\n      }), \" 還有另一個好用的用法，是加在函式的參數型態前面，例如：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\\n\\nusing namespace std;\\n\\nvoid f(const vector<int> &a) {\\n    a[0] = 2; // compile error!   \\n}\\nint main() {\\n    vector<int> a = {1, 2, 3, 4, 5};\\n    f(a);\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不管是不是 reference 都可以加上 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \"，這個參數傳入函式後就不能被修改，可以用來防止不小心改到參數。就像這個例子，這通常會和 reference 一起使用，在希望用 reference 避免參數傳入函式時還要複製一份浪費時間，但又不希望改到它，就可以這麼做。這樣還有一個好處是，如果參數宣告成 \", _jsx(_components.code, {\n        children: \"vector<int> &a\"\n      }), \" 而沒有 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \"，那傳入的參數 \", _jsx(_components.code, {\n        children: \"a\"\n      }), \" 一定得是一個可以被 reference 的東西（正式術語是一個 lvalue），像是如果直接寫 \", _jsx(_components.code, {\n        children: \"f({1, 2, 3, 4, 5})\"\n      }), \" 的話是不行的，但有加 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 的話就可以直接這樣做。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"命名空間\",\n      children: \"命名空間\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"Implementation/basic_knowledge\",\n        mode: \"article\",\n        topicTitle: \"實作技巧\",\n        articleTitle: \"基本常識\"\n      }), \"中，有提過 C++ 把大多數的標準函式放在一個叫作 \", _jsx(_components.code, {\n        children: \"std\"\n      }), \" 的命名空間（namespace）裡頭，這麼做的好處是防止名稱到處撞來撞去，而我們當然也可以自己這麼做，例如：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\\n\\nusing namespace std;\\n\\nnamespace Test {\\n    int a = 456;\\n}\\nint a = 123;\\nint main() {\\n    cout << a << \\\"\\\\n\\\"; // 123\\n    cout << Test::a << \\\"\\\\n\\\"; // 456\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Test\"\n      }), \" 就是一個我們自己定義的命名空間，裡面可以有變數，也可以有函式、struct 等等，在那個命名空間之外使用裡面的東西時要加上 \", _jsx(_components.code, {\n        children: \"Test::\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"Stack Overflow\",\n      children: \"Stack Overflow\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果你在自己的電腦上執行這份程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <bits/stdc++.h>\\n\\nusing namespace std;\\n\\nvoid f(int n) {\\n    if (n == 0) return;\\n    f(n - 1);\\n    cout << n << \\\"\\\\n\\\";\\n}\\n\\nint main() {\\n    f(10000000);\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"很有可能會得到 runtime error，這是因為這個程式碼會發生一個叫作「stack overflow」的錯誤。簡單來說，程式在執行的時候，不同東西會被分別放在記憶體的不同區域裡，而呼叫函式的資訊，包含目前哪些函式正在執行中、傳給函式的參數、函式裡面的區域變數等等，被統一放在一個稱作 stack 的區域裡面，而且大多數的作業系統預設都會限制程式使用的 stack 區域的大小，而且還很小（在 Ubuntu 上預設是 8192KB）。開一個區域的超大陣列也有可能遇到這個問題，這就是為什麼許多競賽選手都會把超大陣列放在全域。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在大部分的 Online Judge 上，都會把 stack 區域的大小限制調成無限制，所以傳上 Online Judge 後通常是不會有問題的。只不過在本機測試的話，有 stack 限制會有點麻煩，這時可以自己調 stack 限制，在 Windows 的話是編譯時加上一個選項 \", _jsx(_components.code, {\n        children: \"-Wl,--stack,268435456\"\n      }), \"、Mac 是 \", _jsx(_components.code, {\n        children: \"-Wl,-stack_size -Wl,268435456\"\n      }), \"，\", _jsx(_components.code, {\n        children: \"268435456\"\n      }), \" 是新的 stack 大小限制，單位是 Byte，268435456 是 256MB；Linux 的話是打一個指令 \", _jsx(_components.code, {\n        children: \"ulimit -s 262144\"\n      }), \"，這個指令會把 stack 大小上限直接改掉，單位是 KB。\"]\n    }), \"\\n\", _jsx(Info, {\n      type: \"danger\",\n      children: _jsx(_components.p, {\n        children: \"常見比賽用的 Online Judge，例如 OI 比賽常用的 CMS、ICPC 比賽常用的 DOMjudge，stack 的大小都沒有限制，但遇到比較特殊的 judge 的話，最好還是稍微注意一下會不會有 stack 大小限制很小的問題。\"\n      })\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"在 Linux 中，\", _jsx(_components.code, {\n          children: \"ulimit\"\n        }), \" 只在目前的 terminal session 裡有用，所以如果重開 terminal 或開另一個，是需要重打這個指令的，可以把它放進 \", _jsx(_components.code, {\n          children: \".bashrc\"\n        }), \" 之類的檔案裡，就不需要每次重打。不過這個指令的效果會套用在所有你執行的指令上，畢竟這個限制是一種防止程式使用過多資源的防護，這可能會衍伸一些安全性問題。\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"補充\",\n      children: \"補充\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這裡是一些進階一點的概念。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"補充-class type 變數的初始化\",\n      children: \"class type 變數的初始化\"\n    }), \"\\n\", _jsx(Info, {\n      type: \"info\",\n      children: _jsxs(_components.p, {\n        children: [\"這裡的 class type 包含用 \", _jsx(_components.code, {\n          children: \"class\"\n        }), \" 或 \", _jsx(_components.code, {\n          children: \"struct\"\n        }), \" 宣告的型態。non-class type 包含所有的數字型態，含整數（\", _jsx(_components.code, {\n          children: \"char\"\n        }), \"、\", _jsx(_components.code, {\n          children: \"int\"\n        }), \"、……）也含浮點數（\", _jsx(_components.code, {\n          children: \"float\"\n        }), \"、\", _jsx(_components.code, {\n          children: \"double\"\n        }), \"、……），還有對於任何東西的指標都是 non-class type。一些 class type 的例子有 STL 中的各種容器（vector、set 等等），還有你自己寫的 struct 也是。\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"嗯嗯，全域會被初始化但區域不會，好像也沒有很難……不，事情遇到了 class type 就會真的複雜許多。舉例來說：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"struct Test {\\n    int x = 5;\\n};\\n\\nTest global_test;\\nvoid f3() {\\n    Test test;\\n    cout << test.x << \\\"\\\\n\\\"; // 5\\n    cout << global_test.x << \\\"\\\\n\\\"; // 5\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"明明 \", _jsx(_components.code, {\n        children: \"test\"\n      }), \" 就是區域變數，它卻自己被初始化了！當變數是 class type 時，就一定會自動初始化，陣列裡的也會，如果型態有定義預設建構子（default constructor，如 \", _jsx(_components.code, {\n        children: \"Test()\"\n      }), \"）的話，就會用預設建構子初始化。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"新的問題又來了，那些在 struct 裡的成員變數是區域還是全域呢？\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"struct Item {\\n    int x;\\n    int a[5];\\n    Test test;\\n    Test arr[5];\\n};\\n\\nItem global_item;\\nvoid f4() {\\n    Item item;\\n    // ??? ??? 5 5\\n    cout << item.x << \\\" \\\" << item.a[1] << \\\" \\\" << item.test.x << \\\" \\\" << item.arr[3].x << \\\"\\\\n\\\";\\n    // 0 0 5 5\\n    cout << global_item.x << \\\" \\\" << global_item.a[1] << \\\" \\\" << global_item.test.x << \\\" \\\" << global_item.arr[3].x << \\\"\\\\n\\\";\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當 struct 出現在區域或全域時會有不一樣的結果，總之大致的規則是，如果你宣告了一個 class type 的全域變數，有預設建構子的話一定會自動執行預設建構子，至於它的成員變數，如果既沒有在宣告時指定初始值，也沒有用預設建構子賦值，那 non-class type 的變數會初始化成 0，class type 的變數會用相同的規則遞迴地初始化。至於 class type 的區域變數，也是類似的原理，但是 non-class type 的成員變數就會如同直接在區域裡的 non-class 變數一樣，沒有被初始化。陣列的部分，取決於它裡面的型態是什麼，適用一樣的規則。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最好的作法是確定 struct 裡的所有 non-class 成員變數都有指定初始值，打個 \", _jsx(_components.code, {\n        children: \"= 0\"\n      }), \" 或 \", _jsx(_components.code, {\n        children: \"= {}\"\n      }), \" 應該不是什麼困難的事情，這樣你的 struct 就無論出現在區域還是全域，你都不用多費心思想是不是需要另外初始化它裡面的變數們，也不用怕忘記。至於 class type 的所有變數，都可以放心地相信它們會好好被初始化，只要顧好裡面的 non-class type 變數就好了。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"變數初始化","depth":1,"code":"變數初始化"},{"text":"全域與區域變數的差異","depth":2,"code":"變數初始化-全域與區域變數的差異"},{"text":"陣列","depth":2,"code":"變數初始化-陣列"},{"text":"static","depth":1,"code":"static"},{"text":"const","depth":1,"code":"const"},{"text":"命名空間","depth":1,"code":"命名空間"},{"text":"Stack Overflow","depth":1,"code":"Stack Overflow"},{"text":"補充","depth":1,"code":"補充"},{"text":"class type 變數的初始化","depth":2,"code":"補充-class type 變數的初始化"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}