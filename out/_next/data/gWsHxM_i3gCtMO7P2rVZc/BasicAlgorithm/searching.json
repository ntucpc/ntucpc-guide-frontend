{"pageProps":{"props":{"mdxPath":"guide/content/BasicAlgorithm/searching/searching.mdx","code":"BasicAlgorithm/searching","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"廣度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["AlgorithmTechnique/dfs"],"coming":false},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"分治法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting","BasicAlgorithm/recursion","BasicAlgorithm/two_pointers"],"coming":false},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":true,"title":"深度優先搜尋","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/structured_binding","BasicAlgorithm/recursion","BasicAlgorithm/enumerate","BasicDataStructure/binary_tree"],"coming":false},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter","WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","ImplementationKnowledge/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","ImplementationSkill/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":true,"title":"拓撲排序","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 III","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/unintuitive_greedy","BasicDataStructure/set_map","BasicAlgorithm/partial_sum","BasicAlgorithm/binary_search_answer"],"coming":false},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":true,"title":"貪心法 II","authors":["baluteshih"],"contributors":[],"prerequisites":["GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/basic_knowledge","article":"basic_knowledge","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"ImplementationKnowledge/compiler","article":"compiler","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/float_error","article":"float_error","topic":"ImplementationKnowledge","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"ImplementationKnowledge/input","article":"input","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge"],"coming":false},{"code":"ImplementationKnowledge/reference","article":"reference","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"ImplementationKnowledge/rngbased","article":"rngbased","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/reference","BasicDataStructure/vector"],"coming":false},{"code":"ImplementationKnowledge/structured_binding","article":"structured_binding","topic":"ImplementationKnowledge","chapter":"III","valid":true,"title":"Structured binding","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased"],"coming":false},{"code":"ImplementationKnowledge/variable","article":"variable","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/reference","ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationKnowledge/variable_declare","article":"variable_declare","topic":"ImplementationKnowledge","chapter":"II","valid":true,"title":"常用變數宣告方法","authors":["WiwiHo","baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/buglist","article":"buglist","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["ImplementationKnowledge/variable"],"coming":false},{"code":"ImplementationSkill/debug","article":"debug","topic":"ImplementationSkill","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["ImplementationSkill/buglist"],"coming":false},{"code":"ImplementationSkill/error_message","article":"error_message","topic":"ImplementationSkill","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["ImplementationKnowledge/compiler"],"coming":false},{"code":"ImplementationSkill/pseudo_pointer","article":"pseudo_pointer","topic":"ImplementationSkill","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"ImplementationKnowledge","title":"實作知識","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error"]},{"code":"ImplementationSkill","title":"實作技巧","contents":["ImplementationSkill/error_message","ImplementationSkill/buglist","ImplementationSkill/debug","ImplementationSkill/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["ImplementationKnowledge"]},{"single":true,"title":"","topics":["ImplementationSkill"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["ImplementationKnowledge/basic_knowledge","ImplementationKnowledge/input","ImplementationKnowledge/reference","ImplementationKnowledge/compiler","ImplementationKnowledge/variable","ImplementationKnowledge/variable_declare","ImplementationSkill/error_message","ImplementationSkill/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","ImplementationKnowledge/rngbased","ImplementationKnowledge/structured_binding","ImplementationKnowledge/float_error","ImplementationSkill/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicAlgorithm/searching/searching.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure, Info, Problem, Refcode, Theorem} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"引言\",\n      children: \"引言\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"大家有玩過猜數字遊戲嗎？遊戲的規則是這樣的：主持人會在心中默想一個特定範圍的數字、玩家的任務就是要猜出主持人心中想的那個數字。而每當玩家猜一個數字時，主持人就會告訴玩家他想的數字跟玩家猜的數字之間的大小關係。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"你會採用什麼樣的策略來猜呢？換句話說，你會如何「搜尋」出答案呢？接下來我們就要來探討幾種關於搜尋的演算法：線性搜尋法與二分搜尋法。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"線性搜尋法\",\n      children: \"線性搜尋法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"對於剛剛的猜數字遊戲，我們有一種最粗暴的作法：從第一個數字一路猜到最後一個數字，我們總有一天會猜中！而這樣的作法有一個正式的名稱，叫做線性搜尋法，顯然在目標存在的狀況下都不會出錯，那麼效率如何呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"對於一個長度為 $N$ 的序列，若是我們想要找到裡面的某個元素，由於我們是一個一個找，因此在最糟的情況下會需要將序列中的 $N$ 個元素都檢查過一次，因此時間複雜度為 $O(N)$。非常直覺的作法，只可惜……效率好像有點差強人意。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"寫成程式碼大概像這個樣子：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"// arr 是我們要搜尋的序列、len 是序列的長度、tar 是我們要搜尋的目標。\\n// 回傳值為目標的索引值。\\nint linear_search (int arr[], int len, int tar) {\\n    for (int i = 0; i < len; ++i) {  // 暴力檢查每個位置\\n        if (arr[i] == tar) return i;   // 找到答案後直接回傳\\n    }\\n    return len;                       // 沒找到，回傳 len。\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"二分搜尋法\",\n      children: \"二分搜尋法\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜尋法-猜數字遊戲\",\n      children: \"猜數字遊戲\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"然而我們會發現剛剛的作法根本就沒有用到主持人提供的資訊。因此我們接下來就來看看猜數字遊戲最廣為人知的一種策略，也就是每次都猜一半，舉例來說，假設這次的數字範圍是 0 到 100，我們就會猜中間的數字，也就是 50、此時如果主持人說要再大一點，我們就會挑選 50 與 100 的中間，也就是 75 作為我們的第二次猜測。以此類推，直到猜出答案為止。這樣的作法就是所謂的\", _jsx(_components.strong, {\n        children: \"二分搜尋法\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"為了讓我們等一下把這個過程寫成程式時輕鬆一點，我們先模擬一次整個過程好了，假設真正的答案是 42，我們一開始知道答案是 $0,1,\\\\dots,100$ 之間的某個數，那麼過程是：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$0,1,\\\\dots,100$ 正中間的數是 $50$，猜 $50$，主持人說要小一點，所以答案在 $0,1,\\\\dots,49$ 裡面。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$0,1,\\\\dots,49$ 正中間的數是 $24$（我們直接用 $\\\\lfloor \\\\frac{0+49}{2} \\\\rfloor$ 算），猜 $24$，主持人說要大一點，所以答案在 $25,\\\\dots,49$ 裡面。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$25,\\\\dots,49$ 正中間的數是 $37$，猜 $37$，主持人說要大一點，所以答案在 $38,\\\\dots,49$ 裡面。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$38,\\\\dots,49$ 正中間的數是 $43$，猜 $43$，主持人說要小一點，所以答案在 $38,\\\\dots,42$ 裡面。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$38,\\\\dots,42$ 正中間的數是 $40$，猜 $40$，主持人說要大一點，所以答案在 $41,42$ 裡面。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$41,42$ 正中間的數是 $41$，猜 $41$，主持人說要大一點，所以答案在 $42$ 裡面。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"候選答案只剩下 $42$ 了，所以答案就是 $42$。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"系統化描述一下我們做的事情，在每次要猜的時候，我們都知道答案在一些連續數字 $\\\\ell,\\\\ell + 1, \\\\dots, r$ 之間，要是 $\\\\ell = r$ 也就是「候選答案」裡面只剩一個數字了，那也就只有它可以是答案了，否則我們就猜中間的數字 $m=\\\\lfloor \\\\frac{\\\\ell + r}{2} \\\\rfloor$，然後：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"如果猜中了，那就猜中了。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如果主持人說小一點，那新的候選答案是 $\\\\ell,\\\\ell+1,\\\\dots,m-1$，讓 $r=m-1$。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如果主持人說大一點，那新的候選答案是 $m+1,m+2,\\\\dots,r$，讓 $\\\\ell=m+1$。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜尋法-第一個 $\\\\geq k$ 的數\",\n      children: \"第一個 $\\\\geq k$ 的數\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"換一個遊戲，主持人有一個藏起來的非嚴格遞增陣列 $x_1,x_2,\\\\dots,x_n$，它滿足 $x_1 \\\\leq x_2 \\\\leq \\\\dots \\\\leq x_n$，主持人要你猜這裡面第一個 $\\\\geq k$ 的數字是哪一個，一開始你知道的只有陣列的長度 $n$ 和 $k$，然後你每次可以問主持人某一個 $x_i$ 是多少。這個遊戲其實跟猜數字遊戲差不多，作為答案的那個 $x_i$ 的 index $i$ 就像是我們在原版猜數字遊戲裡要猜的那個答案，而一開始的候選答案是 $1,2,\\\\dots,n$，我們每次問主持人一個數字 $m$，我們可以從 $x_m$ 的大小來判斷真正的答案是比較後面還是比較前面。假設我們現在的候選答案是 $\\\\ell,\\\\ell+1,\\\\dots,m$，那麼：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"如果 $x_m < k$，那答案當然是要比 $m$ 還後面了，新的候選答案是 $m+1,m+2,\\\\dots,r$，讓 $\\\\ell=m+1$。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如果 $x_m \\\\geq k$，好像跟剛才有點不一樣，其實 $m$ 還是有可能會是答案，我們只知道 $m+1,m+2,\\\\dots,r$ 都不會是答案了，所以新的候選答案是 $\\\\ell,\\\\ell+1,\\\\dots,m$，讓 $r=m$。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"唯一跟原版猜數字遊戲不一樣的點，就是在原版的遊戲裡面，猜中答案時主持人會告訴我們猜中了，但是在這裡不會，就算是看到一個 $x_m=k$ 的數字，我們也不能直接說 $m$ 就是答案，因為有可能 $x_{m-1}=x_m$。當然也有一種方法是如果 $x_m \\\\geq k$ 的話就也問一下 $x_{m-1}$，如果 $x_{m-1} < k$ 我們就知道答案是 $x_m$ 了，反之 $x_m$ 絕不是答案，可以就像原版遊戲那樣把 $r$ 改成 $m-1$，缺點是問問題的次數會變成本來的兩倍，太虧了。不過答案總是存在的，照上述的作法，總有一天候選答案會只剩一個，也就是當 $\\\\ell=r$ 時，這個數字就是答案了。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"// 在 arr[1] <= arr[2] <= ... <= arr[len] 中找第一個 >= k 的數字\\nint binary_search_1(int arr[], int len, int k) {\\n    int l = 1, r = len;\\n    while (l < r) {\\n        int m = (l + r) / 2;\\n        if (arr[m] < k) l = m + 1;\\n        else r = m;\\n    }\\n    return l;\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"總之，核心概念就是在詢問 $m$ 之後決定一下候選答案的區間會怎麼改變，每次都有其中一半會被砍掉，至於中間我們的詢問點 $m$，要多想一下它還可不可以是答案，這會根據題目而有點不同，像是我們把目標改成找「最後一個 $< k$ 的 $x_i$」，就會變成\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"如果 $x_m < k$，那新的候選答案變成 $m,m+1,\\\\dots,r$。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如果 $x_m \\\\geq k$，那新的候選答案變成 $\\\\ell,\\\\ell+1,\\\\dots,m-1$。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"有一個要注意的點是如果 $m$ 取 $\\\\lfloor \\\\frac{\\\\ell + r}{2} \\\\rfloor$，那 $r=\\\\ell+1$ 時，$m$ 會是 $\\\\ell$，這個時候要是 $x_m < k$，我們就會把 $\\\\ell$ 改成 $m$……從此陷入無窮迴圈，所以要取 $m=\\\\lceil \\\\frac{\\\\ell + r}{2} \\\\rceil$ 才不會壞掉。還有一件更可怕的事情是，要是哪天候選答案有負數，然後寫成 \", _jsx(_components.code, {\n        children: \"m = (l + r) / 2\"\n      }), \"，因為除法是向零取整，這在 \", _jsx(_components.code, {\n        children: \"l + r >= 0\"\n      }), \" 時是下高斯，反之是上高斯，太可怕了！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"想那麼多不覺得很麻煩嗎？我們接下來介紹一個更通用也比較不容易出事的寫法。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜尋法-二分搜的本質\",\n      children: \"二分搜的本質\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"原版的猜數字問題中，數字有三類：比答案小、答案、比答案大，而找到第一個 $x_i \\\\geq k$ 的版本中，數字只有兩類：$< k$、$\\\\geq k$，答案是第一個 $\\\\geq k$ 的。其實原版猜數字問題中，我們也可以只分兩類：$< $ 答案 和 $\\\\geq$ 答案，而答案就是 $\\\\geq$ 答案之中的第一個（當然也可以把答案分到左邊那一類，變成找左邊的最後一個）。這樣一說，我們做的事情一直都是「把所有候選答案分成兩類，一類都在左邊、另一類都在右邊，目標是找到左邊的最後一個或右邊的第一個」。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"剛剛會造成到底是把 $\\\\ell$ 改成 $m$ 還是 $m+1$、$r$ 改成 $m-1$ 還是 $m$、要取上高斯還是下高斯這些問題的最大禍源，就是答案是左邊最後一個還是右邊第一個的差別，所以不如我們就先不要想答案要找哪一個，我們就專注於在找「左邊那類最後一個」和「右邊那類第一個」，稍微修改一下 $\\\\ell$、$r$ 的意思，$\\\\ell$ 是「我們已知的屬於左邊那類的最後一個數字」、$r$ 是「我們已知的屬於右邊那類的第一個數字」，$\\\\leq \\\\ell$ 的我們知道都是左邊那類、$\\\\geq r$ 的都是右邊那類，而中間的都不知道，所以我們就在中間問一個數字 $m$，根據它在哪一類，決定要改 $\\\\ell$ 還是 $r$，$m$ 該是左邊就把 $\\\\ell$ 改成 $m$、該在右邊就把 $r$ 改成 $m$。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicAlgorithm/searching/figure/binary_search_static.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"$f(i)$ 的意思是 $x_i$ 這個數字應該屬於左邊那一類還是右邊那一類，$0$ 代表左邊、$1$ 代表右邊，問號代表還不知道。（示意圖，非當事二分搜，這張圖裡的狀態實際上不會在過程中出現，真正的二分搜過程可以看下面的動圖。）\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"直到 $\\\\ell+1=m$ 時，我們就知道全部的數字在哪一類，左邊的最後一個是 $\\\\ell$、右邊的第一個是 $r$，這時再去想我們要哪一個：第一個 $\\\\geq k$ 的數字就是右邊那類的第一個，也就是 $r$。\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"// 在 arr[1] <= arr[2] <= ... <= arr[len] 中找第一個 >= k 的數字\\nint binary_search_2(int arr[], int len, int k) {\\n    int l = 0, r = len + 1;\\n    while (l + 1 < r) {\\n        int m = (l + r) / 2;\\n        if (arr[m] < k) l = m; // m 在左邊\\n        else r = m; // m 在右邊\\n    }\\n    return r; // 我們要的是右邊那類的第一個\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"注意到我們要搜尋的範圍只有 $x_1,x_2,\\\\dots,x_n$，在這個程式碼裡我們卻讓一開始 $\\\\ell=0$、$r=n+1$，這麼做是因為一開始的 $\\\\ell$ 一定要是在左邊那類、$r$ 一定要是在右邊那類，但其實我們在問問題之前，是不能確定 $x_1$ 或 $x_n$ 在哪一類的，這非常好解決，只要假裝 $0$ 一定是左邊那類、$n+1$ 一定是右邊那類就沒有問題了（同理，在 index 是 $0,1,\\\\dots,n-1$ 時，也可以讓 $\\\\ell=-1,r=n$）。讀者可以自己驗證看看，$m$ 無論是取 $\\\\lfloor\\\\frac{\\\\ell+r}{2}\\\\rfloor$ 還是 $\\\\lceil\\\\frac{\\\\ell+r}{2}\\\\rceil$，都會滿足 $\\\\ell < m < r$，所以往外多開一格並不會造成戳到陣列外面之類的問題，甚至要向哪邊取整都隨便，非常安全，不容易寫錯。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下這張圖是一個 $n=14$、$k=15$、$x_i$ 如圖所示的範例過程。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicAlgorithm/searching/figure/binary_search.gif\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"二分搜的本質其實就只有這樣：把數字分成左邊和右邊兩類，然後試圖找出左右兩類的交界點，要寫二分搜時，先好好指出左右兩類的分類依據是什麼，就可以輕鬆寫出程式碼了。剛才說的 $f(i)$ 就是程式碼裡的 \", _jsx(_components.code, {\n        children: \"arr[m] < k\"\n      }), \" 為 true 時是 $0$，反之是 $1$。當判斷條件比較複雜時，也可以把 $f(i)$ 單獨寫成一個函數。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜尋法-二分搜的原理\",\n      children: \"二分搜的原理\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們很直覺的會覺得這樣做會比線性搜尋法更好，但究竟好了多少呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每次問問題之後，「不知道」的數量就少了一半，舉例來說，本來 $\\\\ell=0$、$r=100$ 的話，中間本來有 99 個不知道在左邊還是右邊的東西，只要問 $m=50$，我們馬上就會知道 $1 \\\\sim 50$ 都是屬於左邊，或者 $50 \\\\sim 99$ 都屬於右邊，馬上就多知道了 50 個！當一開始的搜尋範圍是 $N$（有 $N$ 個未知的東西），那最慘只要用 $\\\\lceil \\\\log_2 N \\\\rceil = O(\\\\log N)$ 次，就可以問清楚每個數字屬於哪一側了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此我們得到了 $O(\\\\log N)$ 的複雜度，比線性搜尋法快上不少，既然如此，那為什麼會需要線性搜尋法呢？原因是二分搜的目標序列，必須能好好地被分成左右兩半，舉例來說，如果今天是在一個雜亂無章、沒有排序的序列上，想要找到第一個 $\\\\geq k$ 的數字，因為 $< k$ 和 $\\\\geq k$ 的數字交錯穿插在序列之中，我們就不能用像剛才的方式只問一次問題，就得知某一半的數字都是屬於同一邊了。\"\n    }), \"\\n\", _jsxs(Theorem, {\n      type: \"definition\",\n      title: \"單調性\",\n      number: \"1\",\n      children: [_jsx(_components.p, {\n        children: \"某種「可以二分搜」的性質被稱為單調性，意思簡單來說就是要保持某一種次序性，像是數字由小到大、分數由高到低排列等等這樣的次序性，只要保持這樣的次序性我們就會說他是具有單調性的。以我們現在在看序列的角度來說，就是對於序列上任意兩個位置 $x, y$，只要 $x\\\\le y$ 我們就一定可以保證某種性質，那這樣的序列就是有單調性的，前述猜數字遊戲中所保證的性質就是只要 $x \\\\le y$ 就代表序列中 $x$ 位置上的值一定會小於等於 $y$ 位置上的值。\"\n      }), _jsx(_components.p, {\n        children: \"在這樣有單調性的序列，像我們想要找「某一個東西會被排序在哪裡」的時候，就可以根據和目標的次序關係，把整個序列分成左右兩邊，二分搜出交界就能得到答案。\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜尋法-二分搜 in STL\",\n      children: \"二分搜 in STL\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其實，在一個有排序的序列上，找到第一個 $\\\\geq k$ 的數這類的需求很常見，難道每次都要寫自己一次二分搜嗎？別擔心，STL 已經幫我們寫好了好用的二分搜函式囉！\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"lower_bound(first, last, val, cmp)\"\n        }), \"：從 \", _jsx(_components.code, {\n          children: \"[first, last)\"\n        }), \" 中找到第一個元素 \", _jsx(_components.code, {\n          children: \"element\"\n        }), \" 使得 \", _jsx(_components.code, {\n          children: \"cmp(element, val)\"\n        }), \" 為 \", _jsx(_components.code, {\n          children: \"false\"\n        }), \" 的位置。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"upper_bound(first, last, val, cmp)\"\n        }), \"：從 \", _jsx(_components.code, {\n          children: \"[first, last)\"\n        }), \" 中找到第一個元素 \", _jsx(_components.code, {\n          children: \"element\"\n        }), \" 使得 \", _jsx(_components.code, {\n          children: \"cmp(val, element)\"\n        }), \" 為 \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" 的位置。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsx(_components.p, {\n        children: \"如果上面關於兩個函式的說明有點難以理解的話，不妨這麼想像看看：\"\n      }), _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"cmp\"\n        }), \" 是我們新定義的大小關係，如果 \", _jsx(_components.code, {\n          children: \"cmp(a, b)\"\n        }), \" 為 \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" 就代表 \", _jsx(_components.code, {\n          children: \"a\"\n        }), \" 比 \", _jsx(_components.code, {\n          children: \"b\"\n        }), \" 小（可以把布林運算式的 \", _jsx(_components.code, {\n          children: \"a < b\"\n        }), \" 想像為 \", _jsx(_components.code, {\n          children: \"<(a, b)\"\n        }), \" 也許會比較好理解）。\"]\n      }), _jsxs(_components.p, {\n        children: [\"那麼，我們可以按照 \", _jsx(_components.code, {\n          children: \"cmp\"\n        }), \" 這樣的大小關係為序列進行排序並進行二分搜，此時的 \", _jsx(_components.code, {\n          children: \"lower_bound\"\n        }), \" 就是在 \", _jsx(_components.code, {\n          children: \"cmp\"\n        }), \" 這樣的大小關係下，找出第一個\", _jsx(_components.strong, {\n          children: \"大於等於\"\n        }), \" \", _jsx(_components.code, {\n          children: \"val\"\n        }), \" 的位置；而 \", _jsx(_components.code, {\n          children: \"upper_bound\"\n        }), \" 則是找出第一個\", _jsx(_components.strong, {\n          children: \"大於\"\n        }), \" \", _jsx(_components.code, {\n          children: \"val\"\n        }), \" 的位置。\"]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"關於 \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" 與 \", _jsx(_components.code, {\n        children: \"last\"\n      }), \"，我們可以傳入一個陣列的兩個位置，也可以利用 STL 容器的 \", _jsx(_components.code, {\n        children: \"begin()\"\n      }), \" 與 \", _jsx(_components.code, {\n        children: \"end()\"\n      }), \" 來代表，另外，\", _jsx(_components.code, {\n        children: \"cmp\"\n      }), \" 的意義與 \", _jsx(_components.code, {\n        children: \"std::sort()\"\n      }), \" 的 \", _jsx(_components.code, {\n        children: \"cmp\"\n      }), \" 相同，而傳入的序列必須要以這個 \", _jsx(_components.code, {\n        children: \"cmp\"\n      }), \" 的規則排序，至於 \", _jsx(_components.code, {\n        children: \"cmp\"\n      }), \" 的寫法這裡就不再贅述，以下提供一組範例：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <algorithm>\\n#include <vector>\\n#include <iostream>\\n\\nusing namespace std;\\n\\nbool cmp (int a, int b) {\\n    return a > b;\\n}\\n\\nint main () {\\n    int arr[5] = {1, 3, 3, 5, 8};\\n    int *lower_pos = lower_bound(arr, arr + 5, 3);\\n    int *upper_pos = upper_bound(arr, arr + 5, 3);\\n    cout << \\\"lower_bound of ascending: \\\" << lower_pos - arr << '\\\\n';\\n    cout << \\\"upper_bound of ascending: \\\" << upper_pos - arr << '\\\\n';\\n\\n    vector<int> vec = {8, 5, 3, 3, 1};\\n    auto lo_vec_pos = lower_bound(vec.begin(), vec.end(), 3, cmp);\\n    auto up_vec_pos = upper_bound(vec.begin(), vec.end(), 3, cmp);\\n    cout << \\\"lower_bound of descending: \\\" << lo_vec_pos - vec.begin() << '\\\\n';\\n    cout << \\\"upper_bound of descending: \\\" << up_vec_pos - vec.begin() << '\\\\n';\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"二分搜應用\",\n      children: \"二分搜應用\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"看完了二分搜的寫法，緊接著讓我們來看一下二分搜會如何出現在題目裡吧！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜應用-小試身手\",\n      children: \"小試身手\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"先從我們熟悉的開始看起，也就是在一個序列中進行二分搜：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://leetcode.com/problems/3sum/\",\n      src: \"LeetCode 15\",\n      name: \"3Sum\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/LeetCode/3sum/description.mdx\",\n      constraintsMdx: \"guide/problems/LeetCode/3sum/constraints.mdx\",\n      importMdx: \"guide/problems/LeetCode/3sum/description.mdx\",\n      importMdx: \"guide/problems/LeetCode/3sum/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一開始還看不出這道題目與二分搜有什麼關係，雖然我們可以立刻想到一個 $O(N^3)$ 的暴力作法，但想當然爾會超時，仔細觀察一下，我們會發現當我們在枚舉其中兩個數字時，第三個數字其實也就已經被定下來了，也就是說，我們只要暴力的窮舉其中兩個數字，然後確認我們需要的第三個數字有幾個就可以了！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"那麼，我們要如何計算第三個數字的數量呢？這時候就輪到二分搜上場了！我們只要把所有的數字由小到大排好，然後利用 \", _jsx(_components.code, {\n        children: \"lower_bound()\"\n      }), \" 就可以找到我們的目標了。然而，單用 \", _jsx(_components.code, {\n        children: \"lower_bound()\"\n      }), \" 我們只能確認我們的目標是否存在、以及在序列中的哪裡而已，萬一我們的目標數字有好幾個該怎麼辦呢？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這個時候我們就可以利用 \", _jsx(_components.code, {\n        children: \"upper_bound()\"\n      }), \" 了，\", _jsx(_components.code, {\n        children: \"lower_bound()\"\n      }), \" 會告訴我們第一個大於等於目標的位置、\", _jsx(_components.code, {\n        children: \"upper_bound()\"\n      }), \" 則會告訴我們第一個大於目標的位置，將兩者相減，我們就可以得到等於目標的長度、也就是目標數字的個數了！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最後只要注意一些使用到重複數字的細節並加以處理就可以通過這一題囉！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"二分搜應用-習題們\",\n      children: \"習題們\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://leetcode.com/problems/sqrtx/\",\n      src: \"LeetCode 69\",\n      name: \"Sqrt(x)\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/LeetCode/sqrtx/description.mdx\",\n      constraintsMdx: \"guide/problems/LeetCode/sqrtx/constraints.mdx\",\n      importMdx: \"guide/problems/LeetCode/sqrtx/description.mdx\",\n      importMdx: \"guide/problems/LeetCode/sqrtx/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=f581\",\n      src: \"ZeroJudge f581\",\n      name: \"圓環出口\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/ZeroJudge/f581/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/f581/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/f581/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/f581/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"結語\",\n      children: \"結語\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"搜尋是個大家常常都會需要的功能，不同的搜尋方法有不同的特色，像是線性搜簡單無腦但慢、二分搜有效率但也有所限制。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其中二分搜雖然是個基礎的演算法，但他非常好用，而「把東西切一半」這樣的想法還會在未來的許多資料結構與演算法之中一而再、再而三的出現，所以希望各位讀者看文本文後可以對二分搜有基本的認識，並準備好面對接下來的挑戰！\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/LeetCode/3sum/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給定一個長度為 $N$ 的序列 $a$，請找出所有的 $a_i, a_j, a_k (i\\\\ne j, j\\\\ne k, i\\\\ne k)$ 使得 $a_i + a_j + a_k = 0$。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/LeetCode/3sum/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$3\\\\le N\\\\le 3000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$-10^5 \\\\le a_i \\\\le 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/LeetCode/sqrtx/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給定一個非負整數 $x$，請找出 $\\\\sqrt{x}$ 並向下取整。因為是練習，所以請不要使用任何的內建指數、根號函式。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/LeetCode/sqrtx/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$0\\\\le x\\\\le 2^{31}-1$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/f581/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"有 $n$ 個房間排成一個圓環，編號從 $0$ 到 $n-1$，編號 $i$ 的房間有一條單向道路到編號 $(i+1) \\\\bmod n$ 的房間，每次走進房間 $i$ 時可以獲得 $p_i$ 個點數（最一開始待的房間也可以獲得點數），點數可以重複獲得。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一開始你在編號 $0$ 的房間，接下來依序有 $m$ 個任務，第 $i$ 個任務需要蒐集 $q_i$ 個點數，你會先獲得當下所在房間給的點數，然後不斷走到下一個房間、獲得那個房間的點數，直到拿到至少 $q_i$ 個點數為止，\", _jsx(_components.strong, {\n        children: \"最後停在再下一個房間\"\n      }), \"（這個房間的點數留到下次任務使用）。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"求最後停留的房間是哪一個。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/f581/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 2 \\\\times 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$m \\\\leq 20000$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"引言","depth":1,"code":"引言"},{"text":"線性搜尋法","depth":1,"code":"線性搜尋法"},{"text":"二分搜尋法","depth":1,"code":"二分搜尋法"},{"text":"猜數字遊戲","depth":2,"code":"二分搜尋法-猜數字遊戲"},{"text":"第一個 $\\geq k$ 的數","depth":2,"code":"二分搜尋法-第一個 $\\geq k$ 的數"},{"text":"二分搜的本質","depth":2,"code":"二分搜尋法-二分搜的本質"},{"text":"二分搜的原理","depth":2,"code":"二分搜尋法-二分搜的原理"},{"text":"二分搜 in STL","depth":2,"code":"二分搜尋法-二分搜 in STL"},{"text":"二分搜應用","depth":1,"code":"二分搜應用"},{"text":"小試身手","depth":2,"code":"二分搜應用-小試身手"},{"text":"習題們","depth":2,"code":"二分搜應用-習題們"},{"text":"結語","depth":1,"code":"結語"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}