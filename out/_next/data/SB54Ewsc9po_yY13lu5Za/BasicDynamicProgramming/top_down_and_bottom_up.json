{"pageProps":{"props":{"mdxPath":"guide/content/BasicDynamicProgramming/top_down_and_bottom_up/top_down_and_bottom_up.mdx","code":"BasicDynamicProgramming/top_down_and_bottom_up","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"廣度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"深度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/sweep","article":"sweep","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"一維掃描線","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/rngbased","Implementation/structure_binding","BasicAlgorithm/enumerate","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","Implementation/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/backtracking","article":"backtracking","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 回溯","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/basic_optimization","article":"basic_optimization","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"DP 的基本優化","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/structure"],"coming":true},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicDynamicProgramming/knapsack","article":"knapsack","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"背包問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/multidimensional"],"coming":false},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":false},{"code":"BasicDynamicProgramming/range_dp","article":"range_dp","topic":"BasicDynamicProgramming","chapter":null,"valid":true,"title":"區間 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":true},{"code":"BasicDynamicProgramming/rolling","article":"rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"滾動 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/knapsack","BasicDataStructure/vector"],"coming":false},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":false},{"code":"BasicDynamicProgramming/structure","article":"structure","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"動態規劃的必要元素","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/rolling"],"coming":false},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":false},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","Implementation/buglist"],"coming":false},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":true,"title":"二分圖","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicGraph/graph_concepts"],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":true,"title":"圖論基礎","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicAlgorithm/searching","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","AlgorithmTechnique/bfs","AlgorithmTechnique/dfs"],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":true,"title":"單調隊列","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicDataStructure/stack_queue_deque","BasicAlgorithm/sweep"],"coming":false},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 II","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/basic_knowledge","article":"basic_knowledge","topic":"Implementation","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"Implementation/buglist","article":"buglist","topic":"Implementation","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/variable"],"coming":false},{"code":"Implementation/compiler","article":"compiler","topic":"Implementation","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/debug","article":"debug","topic":"Implementation","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["Implementation/buglist"],"coming":false},{"code":"Implementation/error_message","article":"error_message","topic":"Implementation","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/compiler"],"coming":false},{"code":"Implementation/float_error","article":"float_error","topic":"Implementation","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/input","article":"input","topic":"Implementation","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"Implementation/pseudo_pointer","article":"pseudo_pointer","topic":"Implementation","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/reference","article":"reference","topic":"Implementation","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/rngbased","article":"rngbased","topic":"Implementation","chapter":"III","valid":true,"title":"Range-based for loop","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/reference","BasicDataStructure/vector"],"coming":false},{"code":"Implementation/structure_binding","article":"structure_binding","topic":"Implementation","chapter":"III","valid":false,"title":"Structure Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/variable","article":"variable","topic":"Implementation","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"Implementation","title":"實作技巧","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","Implementation/debug","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","BasicDynamicProgramming/basic_optimization","BasicDynamicProgramming/range_dp","BasicDynamicProgramming/backtracking"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["Implementation"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/sweep","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack","BasicDynamicProgramming/rolling","BasicDynamicProgramming/structure","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/BasicDynamicProgramming/top_down_and_bottom_up/top_down_and_bottom_up.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ContentReference, Info, Problem, Refcode, Theorem, TheoremReference} = _components;\n  if (!ContentReference) _missingMdxReference(\"ContentReference\", true);\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  if (!TheoremReference) _missingMdxReference(\"TheoremReference\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"遞迴過深！？\",\n      children: \"遞迴過深！？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們直接來檢驗一下大家在上一個章節學到的線性遞迴：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/94\",\n      src: \"NCOJ 94\",\n      name: \"[Tutorial] 別離太遠\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/94/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/94/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/94/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/94/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設我們要計算 $n$ 個人的解，我們只要試圖窮舉站在第 $n$ 個人左邊的人是誰，不就得到一個子問題了嗎？這裡我們就廢話不多說，直接寫出完整的遞迴式：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"f(n) =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"1 & n = 1 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"1 & n = 2 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"f(n - 1) + f(n - 2) & \\\\text{otherwise}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"原來又是費式數列啊！正當我們興高采烈的貼上我們熟悉的費氏數列程式碼、小改一下基底執行後，卻意識到了哪裡不對勁──我們必須輸出方法數除以 $10^9 + 7$ 的餘數？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"直接算出 $f(n)$ 之後再使用 \", _jsx(_components.code, {\n        children: \"%\"\n      }), \" 運算子是不行的，光是在 $n=93$ 時，這題的答案就會正式超出 \", _jsx(_components.code, {\n        children: \"long long int\"\n      }), \" 可以儲存的範圍，那用大數運算呢？恐怕也不行，費氏數列的成長速度是非常快的，很可能還碰不到 $n=10^5$ 就會因為位數太多造成 TLE。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以該怎麼辦呢？這裡就要提到一個數學小技巧──先取餘數再進行運算、和先運算後再取餘數，得到的結果其實是一樣的！\"\n    }), \"\\n\", _jsx(Theorem, {\n      type: \"lemma\",\n      title: \"模運算小技巧\",\n      refId: \"module_computation\",\n      number: \"1\",\n      children: _jsx(_components.p, {\n        children: \"當我們要計算一堆整數經過「加法、減法、乘法」的運算結果除以 $d$ 的餘數時，我們可以在運算過程中隨意的將數字先行變成除以 $d$ 的餘數，也不影響最終的結果。\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"（更詳細的數學原理，可以參考\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"BasicMath/basicalgo\",\n        mode: \"default\",\n        topicTitle: \"基礎數學\",\n        articleTitle: \"常用數學演算法\"\n      }), \"）\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也就是說，我們可以在計算完一個 dp 值時，直接將其變成除以 $10^9 + 7$ 的餘數，再進行後續的運算，如下列程式碼所寫的：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"const int MOD = 1000000007;\\n\\nint cal_dp(int n) {\\n    if (n == 1) return 1;\\n    if (n == 2) return 1;\\n    if (visited[n] == 1) return dp[n];\\n    visited[n] = 1;\\n    dp[n] = (cal_dp(n - 1) + cal_dp(n - 2)) % MOD;\\n    return dp[n];\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsxs(_components.p, {\n        children: [\"輸出方法數除以 $p$ 的餘數其實是競賽程式中的一個不成文傳統，通常因為真正答案的計算過於困難（例如位數過多等），導致無法設計出合乎該題時間複雜度的範圍時，就會希望能利用 \", _jsx(TheoremReference, {\n          type: \"lemma\",\n          refId: \"module_computation\",\n          number: \"1\",\n          title: \"模運算小技巧\",\n          mode: \"default\"\n        }), \" 來降低計算數值上的難度。\"]\n      }), _jsx(_components.p, {\n        children: \"當然，現實中其實沒有人在乎數字除以 $10^9+7$ 的餘數，只能說這是競賽程式的一個有趣的現象 :P\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"太好了，解決了取餘數的問題後看起來沒問題了，正當我們這麼想時在本地測試了一下最大的範例測資 $n=10^7$ 時，本地卻出現了疑似 RE 的錯誤！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣的程式怎麼會出錯呢？若嘗試不信邪的傳到 Online Judge 上，竟然可以發現他神奇 AC 了，到底是什麼詭異的理由導致了這樣的結果？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"實際上，我們在本地遭遇的問題是程式中一個經典的問題──「stack overflow」。若讀者已經先讀過章節\", _jsx(ContentReference, {\n        type: \"content\",\n        code: \"Implementation/variable\",\n        mode: \"default\",\n        topicTitle: \"實作技巧\",\n        articleTitle: \"全域、區域變數\"\n      }), \"相信就知道這裡在講什麼了。但白話一點說的話，就是一般在程式設計中，函式呼叫所使用到的空間是較沒有防護措施的，也因此在執行程式時為了安全性作業系統通常都會預設一個較小的上限值，這時候使用一個遞迴太多層──我們稱做「遞迴過深」──的函式時，就會踩到這個上限值導致 RE。為了避免這個問題，Online Judge 通常會特別把這個上限值調大，才不會在 Judge 上吃 RE，但本地可沒有做任何處理，這也是為什麼會發生這樣的差異。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"雖然好像傳上去就會過了，可是如果本地都沒辦法好好測試的話就麻煩了，當然，雖然我們可以試圖調大上限值來解決這個問題，但能不能不要仰賴過深的遞迴解決這個問題呢？\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"Bottom up\",\n      children: \"Bottom up\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"遞迴過深的問題可不只有會遇到上限值不夠的 Online Judge 而已，在「演算法常數」的部分，遞迴所製造的常數往往都比非遞迴來得大，尤其在動態規劃的題目中，我們常常都會用另一種非遞迴方法來實作一個動態規劃的演算法──我們稱之為 Bottom up。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Bottom up 顧名思義就是希望「從底下算上來」；而相對起來，我們之前教的遞迴實作方法則是被稱作「Top down」。拿費式數列當例子，當我們要計算 $f(4)$ 時，使用 Top down 的感覺是這樣的：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"呼叫 $f(4)$ $\\\\xrightarrow{\\\\text{發現 }f(3)\\\\text{ 和 }f(2)\\\\text{ 都還沒計算過 }}$ 呼叫 $f(3)$ 和 $f(2)$ $\\\\rightarrow$ $\\\\ldots$ $\\\\xrightarrow{\\\\text{等待子問題計算完畢}}$ 算出 $f(4)$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這個「發現還沒計算過」的步驟其實有點多餘，如果我們事先把 $f(3)$ 和 $f(2)$ 都算好，不就可以一步直接提取 $f(3)$ 和 $f(2)$ 的值加總起來了嗎？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，Bottom up 的核心就是「試圖從最基礎的 case 一路算上來」，例如上述計算出 $f(4)$ 的過程就是\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"已知 $f(0)$ 和 $f(1)$ $\\\\xrightarrow{\\\\text{直接得到值計算總和}}$ 算出 $f(2)$ $\\\\xrightarrow{\\\\text{直接得到值計算總和}}$ 算出 $f(3)$ $\\\\xrightarrow{\\\\text{直接得到值計算總和}}$ 算出 $f(4)$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那 Bottom up 寫成程式碼之後又會如何呢？其實非常乾淨：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"const int MOD = 1000000007;\\n\\nint cal_dp(int n) {\\n    dp[1] = dp[2] = 1;\\n    for (int i = 3; i <= n; ++i)\\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD;\\n    return dp[n];\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯，一個迴圈就能解決所有！不僅解決了遞迴過深造成的問題，連寫法上都簡單不少，有沒有覺得 Bottom up 優點非常多呢？\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"不是 $O(1)$ 計算的線性遞迴？\",\n      children: \"不是 $O(1)$ 計算的線性遞迴？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們再來看看下面這道例題：\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://oj.ntucpc.org/problems/95\",\n      src: \"NCOJ 95\",\n      name: \"[Tutorial] 別離太近\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/NCOJ/95/description.mdx\",\n      constraintsMdx: \"guide/problems/NCOJ/95/constraints.mdx\",\n      importMdx: \"guide/problems/NCOJ/95/description.mdx\",\n      importMdx: \"guide/problems/NCOJ/95/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"老樣子，我們一樣在計算 $n$ 個人的解時，窮舉站在第 $n$ 個人左邊的人是誰就可以得到一個子問題。但第 $n$ 個人左邊的人可以是誰？可以是第 $n-2$ 個人、第 $n-3$ 個人、……、到第 $1$ 個人都有可能！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，如果列出遞迴式，會是這樣的：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"f(n) =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"1 & n = 1 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"0 & n = 2 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\sum_{i=1}^{n-2} f(i) & \\\\text{otherwise}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"可以發現，為了計算「總和」，我們在計算出一個 $f(n)$ 的值時，會需要花費的時間是 $O(n)$ 的，寫成 Bottom up 的程式碼的話可能會更加明確：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"const int MOD = 998244353;\\n\\nint cal_dp(int n) {\\n    dp[1] = 1, dp[2] = 0;\\n    for (int i = 3; i <= n; ++i) {\\n        dp[i] = 0;\\n        for (int j = 1; j <= i - 2; ++j)\\n            dp[i] = (dp[i] + dp[j]) % MOD;\\n    }\\n    return dp[n];\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"很明顯，總共的時間複雜度就是 $O(n^2)$，這是肯定會超時的！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"要怎麼進一步優化時間複雜度呢？仔細觀察一下就可以發現，當我們計算完 \", _jsx(_components.code, {\n        children: \"dp[i - 1]\"\n      }), \" 的值後 \", _jsx(_components.code, {\n        children: \"dp[i]\"\n      }), \" 所要計算的值其實差不了多少：\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"dp[i - 1]\"\n        }), \"：計算從 \", _jsx(_components.code, {\n          children: \"dp[1]\"\n        }), \" 到 \", _jsx(_components.code, {\n          children: \"dp[i - 3]\"\n        }), \" 的總和\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"dp[i]\"\n        }), \"：計算從 \", _jsx(_components.code, {\n          children: \"dp[1]\"\n        }), \" 到 \", _jsx(_components.code, {\n          children: \"dp[i - 2]\"\n        }), \" 的總和\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"兩者的差距只有在 \", _jsx(_components.code, {\n        children: \"dp[i]\"\n      }), \" 的時候多了一個 \", _jsx(_components.code, {\n        children: \"dp[i - 2]\"\n      }), \" 而已！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"既然他們要計算的總和差異這麼小，我們不妨多開一個變數紀錄當前的總和，在計算新的一個 dp 值時，把差異補上去就好了，具體寫起來如下：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"const int MOD = 998244353;\\n\\nint cal_dp(int n) {\\n    int sum = 0;\\n    dp[1] = 1, dp[2] = 0;\\n    for (int i = 3; i <= n; ++i) {\\n        sum = (sum + dp[i - 2]) % MOD;\\n        dp[i] = sum;\\n    }\\n    return dp[n];\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"程式碼裡面的 \", _jsx(_components.code, {\n        children: \"sum\"\n      }), \" 變數就是在紀錄該次 dp 值算完時的總和，我們只要透過這個變數的輔助，就能「省下」那些重複的計算，進而把每次計算 dp 值的時間優化至 $O(1)$！\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這同時也是 Bottom up 的優勢之一，在 Top down 的實作裡，若要這樣實作，我們得額外開的就是一個 \", _jsx(_components.code, {\n        children: \"sum\"\n      }), \" 陣列，用來儲存「每個 dp 值計算完時的 \", _jsx(_components.code, {\n        children: \"sum\"\n      }), \" 值」，會變得麻煩一些。\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsxs(_components.p, {\n        children: [\"其實開一個額外變數只是為了引導讀者這個「維護差異」的概念，實際上這題是可以更簡單的解決。由於可以發現 \", _jsx(_components.code, {\n          children: \"sum\"\n        }), \" 變數其實就是前一個 \", _jsx(_components.code, {\n          children: \"dp\"\n        }), \" 值，所以整個遞迴式可以寫成\"]\n      }), _jsxs(_components.p, {\n        children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"f(n) =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"1 & n = 1 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"0 & n = 2 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"f(n - 1) + f(n - 2) & \\\\text{otherwise}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n      }), _jsx(_components.p, {\n        children: \"就又又又又是費氏數列的遞迴式了。\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"再複雜一點的線性遞迴\",\n      children: \"再複雜一點的線性遞迴\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=c434\",\n      src: \"ZeroJudge c434\",\n      name: \"連續正整數\",\n      expanded: \"false\",\n      difficulty: \"0\",\n      descriptionMdx: \"guide/problems/ZeroJudge/c434/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/c434/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/c434/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/c434/constraints.mdx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這題比前面的題目都還要複雜一些，為何這麼說呢？如果我們直接採用前面的老方法的話：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"首先定義 $g(n)$ 是當集合的最後一個數字是 $n$ 時的方法數\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"也就是說，$f(n) = \\\\sum^n_{i=1} g(i)$\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"計算 $g(n)$ 時，窮舉集合內倒數第二個數字是誰……\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"卡住了，那三個連續正整數到底應該出現在哪呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們先別急著換一個方向思考，來檢討一下現在這個老方法產生的問題：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"在先前的題目中，我們總是仰賴著\", _jsx(_components.strong, {\n          children: \"最後一個區塊\"\n        }), \"的長相來寫出遞迴式\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"在 Brick Wall Patterns 中，我們找到\", _jsx(_components.strong, {\n              children: \"最後一小塊不能切開的小磚牆\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"在 別離太遠/別離太近 中，我們找到\", _jsx(_components.strong, {\n              children: \"最後一個人\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"有了最後一個區塊之後，我們知道\", _jsx(_components.strong, {\n          children: \"更前面的區塊答案恰好是子問題的答案\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"在 Brick Wall Patterns 中，拿走最後一小塊不能切開的小磚牆，就是一個更小的子問題\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"在 別離太遠/別離太近 中，拿走最後一個人，就是一個更小的子問題\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以不妨思考看看：計算 $g(n)$ 拿走了集合內的 $n$ 時，假設倒數第二個數字是 $i$ 好了，這真的是一個更小的子問題、$g(i)$ 嗎？答案是不對的！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"考慮以下這個會被算進去 $g(5)$ 的集合\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"\\\\{1, 3, 4, 5\\\\}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當我們拿走了 $5$，會得到 $\\\\{1, 3, 4\\\\}$，這可不是 $g(4)$ 會算到的東西，這也就造成我們的老方法行不通了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那該怎麼辦呢？是時候動點手腳了！既然我們不太擅長計算「存在三個連續正整數」的集合個數，不如來算算「不存在三個連續正整數」的集合個數。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣有什麼用呢？非常有用！因為：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"所有的集合很好算：有 $n$ 個數字，每個數字取或不取，因此總共有 $2^n$ 種集合\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"「存在三個連續正整數的集合個數」，就是「所有的集合個數」\", _jsx(_components.strong, {\n          children: \"扣掉\"\n        }), \"「不存在三個連續正整數的集合個數」\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"info\",\n      children: [_jsx(_components.p, {\n        children: \"在程式競賽中，遇到「正著數」方法數比較困難的問題時，常常可以看到像上面這樣「反著數」方法數、再去從更容易計算的「全部方法數」中扣除來得到答案的做法。\"\n      }), _jsx(_components.p, {\n        children: \"這樣「換一個方向」找到解法的作法也是解題的一大技巧，相信讀者在往後會逐漸體會這樣的流程。\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以我們就能來專心算「不存在三個連續正整數」的集合個數了！這裡我們重新將 $f(n)$ 定義成 $1\\\\sim n$ 中不存在三個連續正整數的集合個數，這時候再套用我們的老方法：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"首先定義 $g(n)$ 是當集合的最後一個數字是 $n$ 時的方法數\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"也就是說，$f(n) = \\\\sum^n_{i=1} g(i)$\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"計算 $g(n)$ 時，\", _jsx(_components.strong, {\n          children: \"最後一段連續的數字可以是\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"$n$：這時候再前一個數字不會是 $n-1$，因此根據前一個數字是多少，可以接上子問題 $g(n-2), g(n-3), \\\\ldots, g(0)$\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"$n - 1, n$：這時候再前一個數字不會是 $n-2$，因此根據前一個數字是多少，可以接上子問題 $g(n-3), g(n-4), \\\\ldots, g(0)$\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"再多就出現連續三個數字了！\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"因此可以寫出遞迴式\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"g(n) =\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{cases}\", _jsx(_components.br, {}), \"\\n\", \"1 & n = 0 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"1 & n = 1 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"2 & n = 2 \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"\\\\sum^{n-2}_{i=0} g(i) + \\\\sum^{n-3}_{i=0} g(i) & \\\\text{otherwise}\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{cases}\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這時候就又能使用我們前一道題目學會的技巧了，也就是開一個變數紀錄當前要用到的總和，這裡開兩個變數稍微麻煩了一些，我們不妨將第四種情況改寫成\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"$$\", _jsx(_components.br, {}), \"\\n\", \"\\\\left(g(n - 2) + \\\\sum^{n-3}_{i=0} g(i)\\\\right) + \\\\sum^{n-3}_{i=0} g(i)\", _jsx(_components.br, {}), \"\\n\", \"$$\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"就可以共用同一個總和了！寫成程式碼之後如下：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"const int MOD = 1e9 + 7;\\nconst int MAXN = 1000000;\\n\\nint dp[MAXN + 5];\\n\\nvoid cal_dp(int n) {\\n    int sum = 0;\\n    dp[0] = 1, dp[1] = 1, dp[2] = 2;\\n    for (int i = 3; i <= n; ++i) {\\n        sum = (sum + dp[i - 3]) % MOD;\\n        dp[i] = ((dp[i - 2] + sum) + sum) % MOD;\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"再來就是要計算真正的答案了，注意到題目會做 $t$ 次詢問，因為 $t\\\\leq 10$ 每次重跑一次 \", _jsx(_components.code, {\n        children: \"cal_dp\"\n      }), \" 後當然可以通過，但為了幫助讀者未來遇到 $t \\\\leq 10^6$ 這種量級的詢問量時，還是順便在這裡提醒讀者可以\", _jsx(_components.strong, {\n        children: \"預處理答案\"\n      }), \"，因此我們在這裡實作一個函式 \", _jsx(_components.code, {\n        children: \"build_ans\"\n      }), \" 來蓋出所有 $n$ 介在 $1\\\\sim 10^6$ 的答案：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int ans[MAXN + 5];\\n\\nvoid build_ans(int n) {\\n    cal_dp(n);\\n    int power2 = 1, sum = dp[0];\\n    ans[0] = 0;\\n    for (int i = 1; i <= n; ++i) {\\n        sum = (sum + dp[i]) % MOD; // 當前的「不存在三個連續正整數」集合個數\\n        power2 = power2 * 2 % MOD; // 順便維護當前的子集合個數\\n        ans[i] = (power2 - sum) % MOD;\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"好了，既然都寫好程式碼了就來補上 \", _jsx(_components.code, {\n        children: \"main\"\n      }), \" 函式，\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int main() {\\n    ios::sync_with_stdio(0), cin.tie(0);\\n    build_ans(MAXN); // 一口氣把 1000000 以內的答案都算好\\n    int t;\\n    cin >> t;\\n    while (t--) {\\n        int n;\\n        cin >> n;\\n        cout << ans[n] << \\\"\\\\n\\\";\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"再來上傳看看……居然只答對了第一子題！？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其實這裡還踩到了一些常見的小陷阱，這裡我們就帶讀者來看看問題是什麼，比賽的時候可千萬要小心。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"再複雜一點的線性遞迴-整數溢位（Overflow）\",\n      children: \"整數溢位（Overflow）\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讓我們看看前面程式碼片段中的這行：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"        dp[i] = ((dp[i - 2] + sum) + sum) % MOD;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在這裡，我們連續把三個 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 型態的整數加了起來，但每一個數字最大可以是多少呢？是 $10^9+7-1$！三個 $10^9$ 附近的數字相加是肯定會超過 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 範圍上限的。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這樣的問題該如何解決呢？一個很簡單的方式就是將所有變數改成 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" 型態，但為此動輒所有變數實在是太麻煩了。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這裡，我們可以在運算過程中將變數「轉型」，也就是先暫時將數字變成使用 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" 做運算，運算出的結果用 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" 存著後，再透過最後的 \", _jsx(_components.code, {\n        children: \"% MOD\"\n      }), \" 讓數字變回 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \"！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"講起來複雜，但實際上只需要這樣寫就搞定了：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"        dp[i] = ((long long)(dp[i - 2] + sum) + sum) % MOD;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"邏輯上，會需要想著「運算的順序」。而上面式子的運算順序就是先進行括號內 \", _jsx(_components.code, {\n        children: \"dp[i - 2] + sum\"\n      }), \" 的運算後，被前方的 \", _jsx(_components.code, {\n        children: \"(long long)\"\n      }), \" 轉型成 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" 型態，再和 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 型態的 \", _jsx(_components.code, {\n        children: \"sum\"\n      }), \" 做運算，而在 C++ 中，\", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 同時做運算時，\", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 會被強制轉型成 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \"，也因此整個式子就能在 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" 的庇護下避免溢位了。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不過既然 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 同時做運算時，\", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 會被強制轉型成 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \"，這裡就存在第二種簡潔的寫法：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"        dp[i] = (0ll + (dp[i - 2] + sum) + sum) % MOD;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我們一樣試著思考運算的順序，在同樣的先算好括號內 \", _jsx(_components.code, {\n        children: \"dp[i - 2] + sum\"\n      }), \" 的運算後，由於加法運算子是由左至右運算，因此左方的 \", _jsx(_components.code, {\n        children: \"0ll +\"\n      }), \" 會在接下來被運算，這時候，寫成 \", _jsx(_components.code, {\n        children: \"0ll\"\n      }), \" 的常數 \", _jsx(_components.code, {\n        children: \"0\"\n      }), \" 是被強制指定成 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" 型態的，因此在這瞬間，後方 \", _jsx(_components.code, {\n        children: \"(dp[i - 2] + sum)\"\n      }), \" 的運算結果也在這時候從 \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" 被轉型成了 \", _jsx(_components.code, {\n        children: \"long long\"\n      }), \"！接下來的運算也就跟原本一樣了。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"為何運算順序如此重要呢？一個例子就好比下面這段改造失敗的程式碼，讀者可以自行思考看看其發生錯誤的原因：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"        dp[i] = ((dp[i - 2] + sum) + sum + 0ll) % MOD;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"再複雜一點的線性遞迴-程式中的取模\",\n      children: \"程式中的取模\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過上述的問題修正完成後並沒有讓我們直接通過此題，這是因為還有另一處問題，讓我們看看下面這行程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"        ans[i] = (power2 - sum) % MOD;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(ContentReference, {\n        type: \"content\",\n        code: \"Implementation/buglist\",\n        mode: \"default\",\n        topicTitle: \"實作技巧\",\n        articleTitle: \"常見錯誤列表\"\n      }), \"中，小節「負數取模」有提到負數取模之後只要沒整除就還會是負數，因此在上述這行式子內，很有可能 \", _jsx(_components.code, {\n        children: \"ans[i]\"\n      }), \" 的值會得到一個負數。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"要解決這個問題，照著先前提到的解決方法多寫下一行 \", _jsx(_components.code, {\n        children: \"ans[i] = (ans[i] % MOD + MOD) % MOD\"\n      }), \" 當然可以，但根據狀況其實有這樣簡單的解決方法：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"        ans[i] = (power2 + MOD - sum) % MOD;\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這是因為 \", _jsx(_components.code, {\n        children: \"sum\"\n      }), \" 的絕對值肯定小於 \", _jsx(_components.code, {\n        children: \"MOD\"\n      }), \"，也因此單獨看後方的 \", _jsx(_components.code, {\n        children: \"MOD - sum\"\n      }), \" 肯定會是正值，而兩個 $10^9$ 附近的數字相加又不會 overflow，所以乾淨的多加一個 \", _jsx(_components.code, {\n        children: \"MOD\"\n      }), \" 就能解決問題。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不過這樣的技巧有時候不見得管用，所以讀者務必要多熟悉運算順序以及他們可能的值來評估問題是否可能會發生。若嫌麻煩的話，還有一個懶人招數就是直接不管那麼多，就算是負數也照存不誤，只要在最後在 \", _jsx(_components.code, {\n        children: \"main\"\n      }), \" 裡輸出答案時再轉回正數就可以了。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"小結\",\n      children: \"小結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在這個章節中，我們了解了 Bottom up 的動態規劃實作方式，並體會到了不少使用我們原先學習的 Top down 作法無法獲得的優勢，其中包含了：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"避免遞迴過深\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"擁有較小的演算法常數\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"能夠較為直接的用來進行演算法優化\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"例如直接在 Bottom up 的過程中多開一個變數來紀錄我們想利用的「總和」\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但特別提醒讀者，Top down 可不是完全沒有用，在往後較為進階的章節，我們會再把它拿出來講，可別忘記它的存在了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"除了學習到 Bottom up 之外，我們還多順便學會了一些線性遞迴變化題的解題方法和思路，但動態規劃可不只是如此！因此，在下一個章節，我們會開始帶讀者認識一些不再是單純線性遞迴的問題，並藉此帶大家認識我們在設計動態規劃演算法時更一般的邏輯來加深概念。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=g555\",\n      src: \"ZeroJudge g555\",\n      name: \"白色世界（簡易版）\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/ZeroJudge/g555/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/g555/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/g555/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/g555/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://cses.fi/problemset/task/1633\",\n      src: \"CSES 1633\",\n      name: \"Dice Combinations\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/CSES/1633/description.mdx\",\n      constraintsMdx: \"guide/problems/CSES/1633/constraints.mdx\",\n      importMdx: \"guide/problems/CSES/1633/description.mdx\",\n      importMdx: \"guide/problems/CSES/1633/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=b525\",\n      src: \"ZeroJudge b525\",\n      name: \"先別管這個了，你聽過turtlebee嗎？\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/ZeroJudge/b525/description.mdx\",\n      constraintsMdx: \"guide/problems/ZeroJudge/b525/constraints.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/b525/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/b525/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1127\",\n      src: \"北市賽 2005 pC\",\n      name: \"鋪磁磚問題\",\n      expanded: \"false\",\n      difficulty: \"3\",\n      descriptionMdx: \"guide/problems/NHSPC/Taipei2005C/description.mdx\",\n      constraintsMdx: \"guide/problems/NHSPC/Taipei2005C/constraints.mdx\",\n      importMdx: \"guide/problems/NHSPC/Taipei2005C/description.mdx\",\n      importMdx: \"guide/problems/NHSPC/Taipei2005C/constraints.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://tioj.ck.tp.edu.tw/problems/1939\",\n      src: \"全國賽 2016 pB\",\n      name: \"網路建設 (Fibers)\",\n      expanded: \"false\",\n      difficulty: \"4\",\n      descriptionMdx: \"guide/problems/NHSPC/2016B/description.mdx\",\n      constraintsMdx: \"guide/problems/NHSPC/2016B/constraints.mdx\",\n      importMdx: \"guide/problems/NHSPC/2016B/description.mdx\",\n      importMdx: \"guide/problems/NHSPC/2016B/constraints.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/94/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"今天，臺大程式解題社的其中 $N$ 位選手面向你站成了一個橫排，由左至右的編號為 $1\\\\sim N$，身為這次活動負責人的你，被社長指派必須挑出一些人站出來進行機智問答，這些站出來的人只會往你的方向前進一步，並不會左右移動。不過，邪惡的社長為了增添你的麻煩，特別告訴你說你選出來參加問答的人選必須要滿足以下條件：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"一定要挑編號 $1$ 的人。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"一定要挑編號 $N$ 的人。\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"對於任兩個在選出來的人當中相鄰的人，他們兩個人的編號差不可以\", _jsx(_components.strong, {\n          children: \"超過\"\n        }), \" $2$。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過先不管要如何挑人，你想先知道有幾種挑人的方法，但由於方法數可能很大，你只在乎方法數除以 $10^ 9 + 7$ 的餘數。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/94/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq N \\\\leq 10^ 7$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/95/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"今天，臺大程式解題社的其中 $N$ 位選手面向你站成了一個橫排，由左至右的編號為 $1\\\\sim N$，身為這次活動負責人的你，被社長指派必須挑出一些人站出來進行機智問答，這些站出來的人只會往你的方向前進一步，並不會左右移動。不過，邪惡的社長為了增添你的麻煩，特別告訴你說你選出來參加問答的人選必須要滿足以下條件：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"一定要挑編號 $1$ 的人。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"一定要挑編號 $N$ 的人。\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"對於任兩個在選出來的人當中相鄰的人，他們兩個人的編號差不可以\", _jsx(_components.strong, {\n          children: \"小於\"\n        }), \" $2$。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過先不管要如何挑人，你想先知道有幾種挑人的方法，但由於方法數可能很大，你只在乎方法數除以 $998244353$ 的餘數。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NCOJ/95/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq N \\\\leq 10^ 7$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/c434/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"我們說 $\\\\color{black}{f(n)}$ 表示在一個有正整數 $\\\\color{black}{1\\\\sim n}$ 的集合內，擁有三個或三個以上連續正整數的子集合個數。像是 $\\\\color{black}{n=5}$ 就有 $\\\\color{black}{\\\\{1,2,3\\\\},\\\\{2,3,4\\\\},\\\\{3,4,5\\\\},\\\\{1,2,3,5\\\\},\\\\{1,3,4,5\\\\},\\\\{1,2,3,4\\\\},\\\\{2,3,4,5\\\\},\\\\{1,2,3,4,5\\\\}}$ 八種子集合，故 $\\\\color{black}{f(5)=8}$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"對於 $t$ 次的詢問，每次詢問會給你一個 $n$，請你回答出 $f(n)$ 模 $\\\\color{black}{10^9+7}$ 的餘數。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/c434/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq t \\\\leq 10$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1 \\\\leq n \\\\leq 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/g555/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"在白色世界裡，所有東西都是白色的。有一天，臨末覺得白色世界實在太無聊了，於是帶著一些黑色的顏料進到白色世界，嘗試將這個世界染色。在與白色世界的村長討論過後，決定只在一條道路上實驗。為了讓村民適應，臨末將這條路分成好幾格，選任意的、任意個格子染色，但不能將連續的格子一起染色，否則村民會不適應。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"問題來了：臨末共有幾種方式能夠達成此目的呢？（不能都不染色，否則達不到臨末的目的）\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/g555/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"有 $t$ 筆測資，$t\\\\leq 10^5$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"道路的長度 $\\\\leq 2\\\\times 10^5$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1633/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"給你一個數字 $n$，請你計算透過擲骰子一次或多次來構成總和 $n$ 的方法數。每次擲骰子會產生 $1$ 到 $6$ 之間的結果。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/CSES/1633/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"$n \\\\leq 10^6$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/b525/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"turtlebee 是一種神秘的生物。傳聞中 turtlebee 可以根據服裝改變自己的性別，如果穿男裝就會是雄性，穿女裝就會是雌性。傳說 turtlebee 有很強的生育能力，一隻女裝 turtlebee 過一天後就會生出一隻新的男裝 turtlebee。而男裝 turtlebee 過一天後就會換上女裝，而且不會再換回來。你知道現在有幾隻男裝 turtlebee 及幾隻女裝 turtlebee，問你 $k$ 天後會有幾隻 turtlebee。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/b525/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"輸入至 EOF 結尾，至多 $1000$ 筆測資\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"男裝和女裝的 turtlebee 數量皆 $\\\\leq 1000$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$k\\\\leq 2\\\\times 10^7$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/Taipei2005C/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"某學校有一片狹長形狀的畸零地，其寬度、長度分別為 $30$ 公分及 $n\\\\times 10$ 公分，但在西北角缺了寬度、長度均為 $10$ 公分的一角。現在我們要使用 $\\\\frac{3\\\\times n - 1}{2}$ 塊磁磚將此片畸零地鋪滿，每塊磁磚的寬度、長度均為 $10$ 公分及 $20$ 公分，我們想知道共有多少種鋪法。請你撰寫一個程式來求出答案。以下圖為例，當 $n=3$ 時，可看出共有 $4$ 種不同的鋪法。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/NHSPC/Taipei2005C/figure/1127_1.gif\",\n      width: \"300\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當 $n=5$ 時，由下圖，可看出共有 $15$ 種不同的鋪法。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/NHSPC/Taipei2005C/figure/1127_2.gif\",\n      width: \"350\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/Taipei2005C/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"輸入到 EOF 為止\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$n$ 為奇數，$3\\\\leq n\\\\leq 41$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2016B/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"抓寶網路公司正在幫和平社區規劃新一代的網路架構，該社區的網路平面架構圖如下，其中有編號的頂點代表網路設備的位置，兩個相鄰頂點之間有一虛線段連接，線段部分代表可以鋪設網路光纖的路線，網路設備可以透過光纖連結起來。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/NHSPC/2016B/figure/1939-1.png\",\n      width: \"150\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"工程師發現只要用 $5$ 段光纖就可以將這 $6$ 個設備連接起來，下圖為兩種可能的連結方法，事實上還有其他連結的方式。工程師想知道總共會有幾種相異的連結方法，可以用最少的線段把所有的網路設備連結起來。\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/problems/NHSPC/2016B/figure/1939-2.png\",\n      width: \"300\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一般而言可將上述平面架構圖延伸為 $2N (N \\\\geq 3)$ 個頂點，上排頂點的編號為 $1$ 到 $N$，下一排的頂點編號由 $N+1$ 至 $2N$，其中頂點 $I (1 \\\\leq I \\\\leq N)$ 與頂點 $I+N$ 相鄰，另外對於頂點 $I (1 < I < N， N+1 < I < 2N)$ 分別與頂點 $I-1$ 及 $I+1$ 相鄰。請寫一程式，幫工程師計算出總共有幾種相異的連結方法。因答案可能很大，程式輸出的答案為「原始答案」除以 $10^ 9+9$ 的餘數。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/NHSPC/2016B/constraints.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"有 $T$ 筆輸入，$T \\\\leq 10$\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"$1\\\\leq N \\\\leq 100$\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"遞迴過深！？","depth":1,"code":"遞迴過深！？"},{"text":"Bottom up","depth":1,"code":"Bottom up"},{"text":"不是 $O(1)$ 計算的線性遞迴？","depth":1,"code":"不是 $O(1)$ 計算的線性遞迴？"},{"text":"再複雜一點的線性遞迴","depth":1,"code":"再複雜一點的線性遞迴"},{"text":"整數溢位（Overflow）","depth":2,"code":"再複雜一點的線性遞迴-整數溢位（Overflow）"},{"text":"程式中的取模","depth":2,"code":"再複雜一點的線性遞迴-程式中的取模"},{"text":"小結","depth":1,"code":"小結"},{"text":"習題","depth":1,"code":"習題"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}