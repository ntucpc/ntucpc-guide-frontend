{"pageProps":{"props":{"mdxPath":"guide/content/BasicAlgorithm/complexity/complexity.mdx","content":[["guide/content/BasicAlgorithm/complexity/complexity.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    blockquote: \"blockquote\",\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Figure, Refcode, Theorem} = _components;\n  if (!Figure) _missingMdxReference(\"Figure\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  if (!Theorem) _missingMdxReference(\"Theorem\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"究竟什麼是效率？\",\n      children: \"究竟什麼是效率？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設一位老師要發考卷給班上 $5$ 位學生，反正人也沒很多，每張考卷拿起來再直接找到對應的學生給他就好。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過如果我們事先排好考卷的順序呢？這樣這位老師只要走過一圈教室就可以把考卷發完了，也不會發生他要反覆從教室一端跑到另一端的狀況。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這樣到底省下了多少時間？我們就假設 $5$ 位學生的座位大概也不會坐太遠，可能最遠也只要花費 $3$ 秒的時間就可以自由的在任兩個學生之間來回。所以最慘就花個 $5\\\\times 3=15$ 秒吧。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果走過一圈教室也差不多要花 $5$ 秒，照這樣看來，先排好考卷頂多只幫助我們省下 $10$ 秒的時間。好像沒有很多嘛。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但要是學生變成十倍，也就是 $50$ 位呢？這時候在兩個學生之間來回可能就得花費 $30$ 秒，$50$ 位學生更是會讓總花費時間變成 $1500$ 秒！這時，因為走過一圈教室也許只要花 $50$ 秒，所以事先排好考卷的優勢便開始出現了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"更進一步的，如果學生變成 $500$ 位呢？$5000$ 位呢？你能想像這個差距嗎？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在寫程式的世界中，我們常常要面對的就是這種「比平常還要大非常多」的測試資料，很可能動不動就是 $5000$ 行字串、$10^5$ 個數字。想當然的，資料量變多，程式一定會變慢，而所謂的效率，就是能穩定的在數字變大時，還可以控制「程式變慢的幅度」，使得程式雖然變慢了，也不至於太誇張。這才是我們所要追求的「效率」。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"演算法的效率 ─ 時間複雜度\",\n      children: \"演算法的效率 ─ 時間複雜度\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"演算法的效率 ─ 時間複雜度-分析效率的必要性\",\n      children: \"分析效率的必要性\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我們知道，程式競賽中的題目都有著所謂的「時限」，而判斷自己的演算法在寫成程式後能不能在規定的時限內執行完畢，就得來分析他的效率了。就好比我們寫出了下面這段程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"void bubble_sort(int arr[], int n) { \\n    for (int i = 0; i < n - 1; ++i)         \\n        for (int j = 0; j < n - i - 1; ++j) \\n            if (arr[j] > arr[j + 1]) {      \\n                int tmp = arr[j];           \\n                arr[j] = arr[j + 1];        \\n                arr[j + 1] = tmp;           \\n            }\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那當 $n=10$ 時，他能在一秒內跑完嗎？$n=1000$ 可以嗎？$n=10^5$ 呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果盲目的將程式寫完後就傳上 Online Judge 等待結果，可想而知的就是會時常因為獲得 TLE 而落後其他對自己程式的效率夠清楚的選手。更可怕的是，如果我們設計好的演算法其實不管怎麼樣都無法被寫成一個能在時限內跑完的程式的話，還一無所知的浪費大把時間下去寫，不就白忙一場了嗎？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也因此，提前想清楚自己演算法的效率便成為一個非常重要的事項。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"演算法的效率 ─ 時間複雜度-如何分析效率？\",\n      children: \"如何分析效率？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果我們仔細一行一行計算上面程式所需要花費的「步驟數量」的話，似乎可以這樣條列：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"void bubble_sort(int arr[], int n) { // arr: 要排序的陣列，n: 陣列大小\\n    for (int i = 0; i < n - 1; ++i)              // n 次運算\\n        for (int j = 0; j < n - i - 1; ++j)      // (n - 1) + (n - 2) + ... + 1 = n * (n - 1) / 2 次運算\\n            if (arr[j] > arr[j + 1]) {           // n * (n - 1) / 2 次運算\\n                int tmp = arr[j];                // 至多 n * (n - 1) / 2 次運算\\n                arr[j] = arr[j + 1];             // 至多 n * (n - 1) / 2 次運算\\n                arr[j + 1] = tmp;                // 至多 n * (n - 1) / 2 次運算\\n            }\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"也因此，可以計算出這個程式需要執行的步驟數量至多為\", _jsx(_components.br, {}), \"\\n\", \"$$ n + 5 \\\\times \\\\frac{n(n-1)}{2} = \\\\frac{5}{2} n^2 - \\\\frac{3}{2} n$$\", _jsx(_components.br, {}), \"\\n\", \"在算出步驟數量後，我們就可以去預估程式的執行時間了。因此當 $n=1000$ 時，這個程式至多需要跑 $2.5\\\\times 1000\\\\times 1000-1.5\\\\times 1000=2498500$ 步；而當 $n=10^5$ 時就是 $24999850000$ 步。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"等等……算出步驟量然後呢？到底能不能跑進一秒啊？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在現代的程式競賽中，我們會有一些簡單的共識：電腦一秒鐘大約可以跑 $10^9$ 次\", _jsx(_components.strong, {\n        children: \"基礎運算\"\n      }), \"。所謂的基礎運算，就是泛指 C++ 中基本的五則運算（\", _jsx(_components.code, {\n        children: \"+ - * / %\"\n      }), \"）、變數賦值、陣列存取、條件判斷（\", _jsx(_components.code, {\n        children: \"< == >\"\n      }), \"）等。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也因此，$n=1000$ 的情況下只需要不用 $0.003$ 秒就可以跑完了，但 $n=10^5$ 時可就要跑大約 $25$ 秒！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"演算法的效率 ─ 時間複雜度-何謂時間複雜度\",\n      children: \"何謂時間複雜度\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讀者讀到這裡可能開始起疑了：怎麼可能每次我分析效率都要這麼麻煩的算式子？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"沒錯，我們在設計演算法時，是不會真的把程式先寫出來再一行一行計算的，在講究速度的比賽中，哪有閒功夫做這些瑣碎的麻煩事呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"為了簡單描述演算法的效率，我們會採用「時間複雜度」這個概念。例如上述的程式，我們會說「他的時間複雜度是 $O(n^2)$」。就讓我們先認識一下這個符號：\"\n    }), \"\\n\", _jsxs(Theorem, {\n      type: \"definition\",\n      title: \"Big-O\",\n      number: \"1\",\n      children: [_jsx(_components.p, {\n        children: \"$O$ 這個符號讀做 Big-O，表示一個函數成長趨勢的上限。為了表示上限，我們會無視係數、並捨棄那些成長趨勢較緩慢的項。\"\n      }), _jsx(_components.p, {\n        children: \"例如當 $T(n) = \\\\frac{5}{2} n^2 - \\\\frac{3}{2} n$ 時：\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"我們可以丟棄係數 $\\\\frac{5}{2}$ 和 $\\\\frac{3}{2}$ 得到 $n^2 - n$\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"再丟棄成長趨勢比較緩慢的 $n$\"\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"就可以直接說 $T(n)$ 是 $O(n^2)$。\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"省略了這麼多東西有什麼好處呢？我們重新將 $n=1000$ 和 $n=10^5$ 代入 $n^2$ 看看，就會分別得到 $10^6$ 和 $10^{10}$，而使用電腦一秒可以執行 $10^9$ 次基礎運算的基準去衡量的話，就會很明顯的看出 $n=10^5$ 肯定跑不進一秒了！\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"演算法的效率 ─ 時間複雜度-計算時間複雜度\",\n      children: \"計算時間複雜度\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"認識完時間複雜度後，我們就可以來學習如何計算時間複雜度了。想像我們打算寫出上面那段程式，我們在腦袋中想的會是什麼呢？\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"我要跑一個迴圈，\", _jsx(_components.code, {\n          children: \"i\"\n        }), \" 從 \", _jsx(_components.code, {\n          children: \"0\"\n        }), \" 到 \", _jsx(_components.code, {\n          children: \"n-2\"\n        }), _jsx(_components.br, {}), \"\\n\", \"每次我會依序檢查前 \", _jsx(_components.code, {\n          children: \"n-i-1\"\n        }), \" 個位置\", _jsx(_components.br, {}), \"\\n\", \"如果前一項大於後一項，就交換這兩個位置上的數字\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有上述思路後，複雜度的計算就呼之欲出了：迴圈要跑 $n$ 次、每次檢查至多 $n$ 次、交換是瞬間的，所以就大約是 $n\\\\times n$，時間複雜度為 $O(n^2)$！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"讀者可以注意到，上述的計算我們也不在乎什麼 \", _jsx(_components.code, {\n        children: \"n-i-1\"\n      }), \" 這種詳細的次數，反正他也只會造成係數上的差距而已，不如就直接當成 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 就行了。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"是不是單純多了呢？\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"演算法的效率 ─ 時間複雜度-複雜度之間的運算\",\n      children: \"複雜度之間的運算\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"總不可能每次寫程式都只有簡單的幾層迴圈吧？就好比在執行完上面的程式後，如果還要輸出整個陣列的樣子的話，就要多花 $O(n)$ 的時間將其輸出出來，那這樣的時間複雜度是多少呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"讀者可以當成我們是直接在進行「相加」的運算，也就是試著直接求 $O(n^2) + O(n)$ 是多少！這時，比較弱的項可以被丟棄，因此就會直接得到 $O(n^2)$ 這個答案。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"「相乘」在複雜度上也是沒問題的，而其實我們早就偷偷用過相關的概念了。前述的例子其實就是一個典型的「$O(n)$ 次窮舉，每次執行 $O(n)$ 次的檢查」，所以直接透過 $O(n) \\\\times O(n)$，就能得出 $O(n^2)$ 了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，在分析時間複雜度時，我們可以放心的直接對這些複雜度進行加法跟乘法。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"同樣也很重要 ─ 空間複雜度\",\n      children: \"同樣也很重要 ─ 空間複雜度\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"除了程式的執行時間，我們也很在乎這個程式用了多少記憶體，過大的記憶體使用量會導致電腦無法執行。記憶體使用量就是這個程式的空間複雜度，而這會與變數型態、變數數量以及陣列大小有關。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"計算空間複雜度的方法與時間複雜度類似，甚至更為單純，我們只需要去估計程式會宣告出來的記憶體量即可，就好比宣告一個長度為 $n$ 的陣列，使用的空間複雜度就至少是 $O(n)$。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"由於空間複雜度還不會是初學競賽程式時的重點，這裡就不再多描述，相信讀者在未來的篇章慢慢熟悉後，真的遇到了需要認真分析空間複雜度的狀況也不會太過陌生。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"範例\",\n      children: \"範例\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下透過幾份程式碼，來幫助大家學會分析複雜度。當然，前面也說過實際在比賽時，我們是不會等到寫完程式碼才去分析複雜度的。不過畢竟我們也還沒教過什麼演算法嘛！就讓我們先試著用程式碼來練習分析，等到未來的章節就能看到各式不同演算法是如何被分析的，就能漸漸熟悉了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"為了方便起見，我們會用 $T(n)$ 來表示每一份程式的時間複雜度。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"範例-判斷質數\",\n      children: \"判斷質數\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"bool is_prime(int n) { // 判斷 n 是否是質數\\n    if (n == 1) return false;\\n    for (int i = 2; i * i <= n; ++i)\\n        if (n % i == 0) return false;\\n    // 若 n 不是質數，假設 n = a * b (a, b > 1)，則 min(a, b) * min(a, b) <= a * b = n\\n    // 也就是 n 不是質數若且唯若 n 的其中一個因數會介於 2 到 sqrt(n) 之間或 n = 1\\n    return true;\\n    // 若找不到介於 2 到 sqrt(n) 的因數，則 n 為質數\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"其中特判 \", _jsx(_components.code, {\n        children: \"n == 1\"\n      }), \" 的部分是 $O(1)$， \", _jsx(_components.code, {\n        children: \"for\"\n      }), \" 迴圈總共會跑至多 $\\\\sqrt{n}$ 次，而迴圈內的運算每次執行都是 $O(1)$ 時間，因此總時間複雜度為 $T(n) = O(1) + O(\\\\sqrt{n}) \\\\cdot O(1) = O(1) + O(\\\\sqrt{n}) = O(\\\\sqrt{n})$。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"空間複雜度的部分，除了 $n$ 以外只多用了一個變數 $i$ ，因此空間複雜度為 $O(1)$。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"範例-簡單的遞迴函數\",\n      children: \"簡單的遞迴函數\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int solve(int n) {\\n    if (n == 0) return 0;\\n    return solve(n - 1) + 1;\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在 \", _jsx(_components.code, {\n        children: \"return\"\n      }), \" 之前的部分時間複雜度為 $O(1)$，因此將可以列出複雜度的遞迴關係為 $T(n) = T(n - 1) + O(1)$，然後繼續往下遞迴可以得知時間複雜度為\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"\\\\[\", _jsx(_components.br, {}), \"\\n\", \"\\\\begin{align*}\", _jsx(_components.br, {}), \"\\n\", \"T(n) &= T(n - 1) + O(1) \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"&= T(n - 2) + 2 \\\\cdot O(1)  \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"&= T(n - 3) + 3 \\\\cdot O(1)  \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"&= \\\\cdots  \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"&= T(0) + n \\\\cdot O(1)  \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"&= O(1) + n \\\\cdot O(1)  \\\\\\\\\", _jsx(_components.br, {}), \"\\n\", \"&= O(n)\", _jsx(_components.br, {}), \"\\n\", \"\\\\end{align*}\\\\]\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"空間複雜度的部分，雖然看起來沒有用到新的變數，但實際上每次函數中的參數 $n$ 會占用 $O(1)$ 的空間，因此 $n$ 次遞迴加總起來的結果會占用 $O(n)$ 的空間。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"範例-一個沒那麼單純的例子\",\n      children: \"一個沒那麼單純的例子\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"再來看一個比較難的例子：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int monotonic_stack(int arr[], int stk[], int n) { // n: arr 陣列的大小\\n    int stk_size = 0;\\n    for (int i = 0; i < n; ++i) {\\n        while (stk_size > 0 && stk[stk_size - 1] <= arr[i]) {\\n            --stk_size;\\n        }\\n        stk[stk_size++] = arr[i];\\n    }\\n    return stk_size;\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在第四行的 \", _jsx(_components.code, {\n        children: \"for\"\n      }), \" 迴圈會跑 $n$ 次，由於 \", _jsx(_components.code, {\n        children: \"stk_size\"\n      }), \" 可能會到 $n$，因此第五行的 \", _jsx(_components.code, {\n        children: \"while\"\n      }), \" 迴圈可能會被跑 $n$ 次，此時可能會想說時間複雜度就是 $O(n) \\\\times O(n) = O(n^2)$。但實際上不是這樣的，如果我們不是關注每次 \", _jsx(_components.code, {\n        children: \"for\"\n      }), \" 迴圈時 \", _jsx(_components.code, {\n        children: \"while\"\n      }), \" 迴圈會被跑幾次，而是關注 \", _jsx(_components.code, {\n        children: \"while\"\n      }), \" 迴圈\", _jsx(_components.strong, {\n        children: \"總共\"\n      }), \"會被跑幾次呢？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"由於每次跑 \", _jsx(_components.code, {\n        children: \"while\"\n      }), \" 迴圈會讓 \", _jsx(_components.code, {\n        children: \"stk_size\"\n      }), \" 減去一、卻不會使其 $<0$，又因為 \", _jsx(_components.code, {\n        children: \"stk_size\"\n      }), \" 頂多只會增加 $n$ 次（因為第七行只會跑 $n$ 次），所以這個 \", _jsx(_components.code, {\n        children: \"while\"\n      }), \" 迴圈只會被跑過 $n$ 次，因此總時間複雜度 $=$ \", _jsx(_components.code, {\n        children: \"stk_size\"\n      }), \" 增加次數 $+$ \", _jsx(_components.code, {\n        children: \"while\"\n      }), \" 迴圈執行次數 $= O(n)$。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"空間複雜度的部分，包含了 \", _jsx(_components.code, {\n        children: \"arr\"\n      }), \" 陣列（大小為 $n$）、變數 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \"、\", _jsx(_components.code, {\n        children: \"i\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"stk_size\"\n      }), \"（大小為 $O(1)$）、\", _jsx(_components.code, {\n        children: \"stk\"\n      }), \" 需要使用到的空間（\", _jsx(_components.code, {\n        children: \"stk_size\"\n      }), \" 最大只到 $n$），因此加總起來空間複雜度為 $O(n)$。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過這份程式碼在做什麼呢？相信不久遠的未來就會再看見他了……\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"重新了解複雜度\",\n      children: \"重新了解複雜度\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"重新了解複雜度-何謂「趨勢」\",\n      children: \"何謂「趨勢」\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也許讀者對於我們省略了這麼多係數和項數還保留著一些存疑，但就好比我們最一開始舉的例子，我們關注的總是「當資料量越來越大時，你的演算法究竟能多快？」，也因此「成長趨勢最快」的那項理當才會變成我們最在乎的。就讓我們用以下圖片來再解釋一下：\"\n    }), \"\\n\", _jsx(Figure, {\n      src: \"/files/content/BasicAlgorithm/complexity/figure/functions.png\",\n      width: \"300\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上圖中，綠色曲線符號是 $f(n) = n^2$，紅色曲線是 $g(n) = 3n^2$，藍色曲線是 $h(n) = \\\\frac{1}{3} n^3$，儘管 $h$ 的係數很小，$f, g$ 的係數很大，但由於 $n^3$ 的成長趨勢比 $n^2$ 快，所以當 $n$ 足夠大時 $h(n)$ 還是會比 $f(n)$ 跟 $g(n)$ 大。所以這就是為什麼我們計算時間複雜度時只看成長趨勢最快的那項，並且不過度在意係數的原因。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"重新了解複雜度-為何是「上限」？\",\n      children: \"為何是「上限」？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通常我們在做題目的時候，只會考慮這個做法的複雜度的上限，儘管他在大部分的情況不會達到這個複雜度，我們還是必須考慮最糟的情況，確保每個情況都能在這個複雜度的時間內跑完。就好比以下這份程式碼：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"long long solve(int n) {\\n    if (n % 100000 == 0) {\\n        long long sum = 0;\\n        for (int i = 1; i <= n; ++i)\\n            sum += i;\\n        return sum;\\n    }\\n    return 0;\\n}\\n\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"他的時間複雜度是多少呢？答案是 $O(n)$ 的！就算 $n$ 不是 $10^5$ 的倍數他會立即結束，只要出題者在題目裡面放上一個 $10^5$ 的倍數當做測試資料，這份程式碼就會因此花費 $n$ 的時間。這也是為什麼我們只在意、也必須在意上限了。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"重新了解複雜度-常數\",\n      children: \"常數\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"前面我們已經宣導了省略係數的好處，但我們再次把前面分析成 $O(n^2)$ 的程式碼拿回來講：如果我執行這段程式碼 $1000$ 次，那他還能跑進一秒嗎？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設我們直接用一般的時間複雜度去分析，$1000n^2$，可以省略係數，所以也是 $O(n^2)$ 吧？但如果實際用前面分析出來的 $0.003$ 秒下去算的話，$1000$ 倍的時間就是 $3$ 秒，差距非常慘烈。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這種隱藏在複雜度包裝下、看不見的係數我們又稱為「常數」。實際上，即使是 C++ 的基本運算，還是有一些比較慢的操作。就好比除法跟 \", _jsx(_components.code, {\n        children: \"%\"\n      }), \" 運算，這兩者的運算速度其實幾乎是加減法的 $5$ 倍以上！而我們最常使用的輸入、輸出其實也非常非常的慢，常常在輸入有 $10^7$ 個數字時，程式就得花費個好幾秒才能輸入完畢。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此，就算有時候演算法的時間複雜度很好，也還是要稍微考慮一下有沒有可能因為執行了過多倍的運算，導致速度比想像中還要慢一些。就好像如果執行了 $10^5$ 次 $O(n)$ 的演算法，在 $n=10^5$ 的情況下，不就跟 $O(n^2)$ 一樣慢了嗎？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過其實在初學程式競賽時還不用太過擔心這個問題，還是先分析出單純的時間複雜度才比較要緊。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"真正應用在程式競賽上的話……\",\n      children: \"真正應用在程式競賽上的話……\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"真正應用在程式競賽上的話……-選手們的估計方式\",\n      children: \"選手們的估計方式\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假設時間限制是 $t$ 秒，而某個做法複雜度是 $O(f(n))$，只要常數不要太大的話，通常我們可以當成只要 $f(n) \\\\leq 10^8\\\\times t$ 就可以通過，有時候順利的話 $10^9\\\\times t$ 也可以通過。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但是還請別忘記，複雜度並不能計算絕對時間，只能計算 $n$ 大小變化時的成長趨勢，常在 $n$ 很小、或是某些特殊情況下時，複雜度大但常數小的演算法反而會跑的比複雜度小但常數大的演算法快，這就是未來各位讀者可能會逐漸體會到的課題了。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"真正應用在程式競賽上的話……-常見複雜度以及對應範圍\",\n      children: \"常見複雜度以及對應範圍\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"由於分析複雜度實在是太過重要，因此競賽選手們時常會直接以輸入的範圍限制，例如 $n$ 的大小上限，並搭配可能的常數大小來判斷自己設計出來的演算法時間複雜度是否吻合於範圍限制，就不用再浪費時間慢慢代入 $n$ 的值來估計執行速度了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下皆假設題目的時間限制為 $1$ 秒，用來估算的數字為 $n$：\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"時間複雜度\"\n          }), _jsx(_components.th, {\n            children: \"常數大小\"\n          }), _jsx(_components.th, {\n            children: \"常見 $n$ 的上限\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n)$\"\n          }), _jsx(_components.td, {\n            children: \"夠小\"\n          }), _jsx(_components.td, {\n            children: \"$10^7$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n)$\"\n          }), _jsx(_components.td, {\n            children: \"略大\"\n          }), _jsx(_components.td, {\n            children: \"$10^6$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n\\\\log n)$\"\n          }), _jsx(_components.td, {\n            children: \"夠小\"\n          }), _jsx(_components.td, {\n            children: \"$10^6$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n\\\\log n)$\"\n          }), _jsx(_components.td, {\n            children: \"一般\"\n          }), _jsx(_components.td, {\n            children: \"$5\\\\times 10^5$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n\\\\log n)$\"\n          }), _jsx(_components.td, {\n            children: \"過大\"\n          }), _jsx(_components.td, {\n            children: \"$2\\\\times 10^5$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n\\\\log^2 n)$\"\n          }), _jsx(_components.td, {\n            children: \"夠小\"\n          }), _jsx(_components.td, {\n            children: \"$10^5$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n\\\\log^2 n)$\"\n          }), _jsx(_components.td, {\n            children: \"一般\"\n          }), _jsx(_components.td, {\n            children: \"$5\\\\times 10^4$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n^2)$\"\n          }), _jsx(_components.td, {\n            children: \"夠小\"\n          }), _jsx(_components.td, {\n            children: \"$10000$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n^2)$\"\n          }), _jsx(_components.td, {\n            children: \"一般\"\n          }), _jsx(_components.td, {\n            children: \"$5000$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n^2)$\"\n          }), _jsx(_components.td, {\n            children: \"略大\"\n          }), _jsx(_components.td, {\n            children: \"$3000$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n^2\\\\log n)$\"\n          }), _jsx(_components.td, {\n            children: \"夠小\"\n          }), _jsx(_components.td, {\n            children: \"$3000$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n^2\\\\log n)$\"\n          }), _jsx(_components.td, {\n            children: \"一般\"\n          }), _jsx(_components.td, {\n            children: \"$1000$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n^3)$\"\n          }), _jsx(_components.td, {\n            children: \"極小\"\n          }), _jsx(_components.td, {\n            children: \"$1000$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(n^3)$\"\n          }), _jsx(_components.td, {\n            children: \"一般\"\n          }), _jsx(_components.td, {\n            children: \"$500$\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"$O(2^n)$\"\n          }), _jsx(_components.td, {\n            children: \"需要仔細評估\"\n          }), _jsx(_components.td, {\n            children: \"$20\\\\sim 25$\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"當然，上表只不過是一種估計而已，實際狀況還是有不少變化，這裡僅供初學者參考。至於上述「判斷常數大不大」的欄位，常數到底怎樣算大呢？這可能就要各位讀者自行多體會幾次了──總是得在試錯中成長！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"另外就是上表提供的參考基準是 $1$ 秒，所以也常可以看到解答是 $O(n\\\\log^2n)$ 的題目將範圍出到 $2\\\\times 10^5$，並直接將時限開到 $5$ 秒等狀況。而根據 Online Judge 的不同，程式碼的執行速度也會有差距，甚至在一些古老的 Judge 上，會出現 $10^6$ 幾乎無法讓 $O(n\\\\log n)$ 通過的現象，所以實際上還是要多遇過幾次狀況才會比較有經驗。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"總結\",\n      children: \"總結\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"希望大家在想到一個題目的做法時，可以先想想看這個演算法的複雜度是多少，來判斷這個做法寫出的程式大約要執行多久。如果真的很難分析的話，約略估計也可以得到不錯的效果。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"順帶一提，我們在複雜度使用的 big-O 符號其實在數學上是真的存在應用的符號，只不過擔心太過複雜，我們省略了較為嚴謹的數學定義和敘述。等到未來的篇章，我們會再次提起他們並詳細解釋一遍。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}]],"prereqs":[{"code":"BasicAlgorithm/intro","text":"基礎演算法 / 介紹"}],"sections":[{"text":"究竟什麼是效率？","depth":1,"code":"究竟什麼是效率？"},{"text":"演算法的效率 ─ 時間複雜度","depth":1,"code":"演算法的效率 ─ 時間複雜度"},{"text":"分析效率的必要性","depth":2,"code":"演算法的效率 ─ 時間複雜度-分析效率的必要性"},{"text":"如何分析效率？","depth":2,"code":"演算法的效率 ─ 時間複雜度-如何分析效率？"},{"text":"何謂時間複雜度","depth":2,"code":"演算法的效率 ─ 時間複雜度-何謂時間複雜度"},{"text":"計算時間複雜度","depth":2,"code":"演算法的效率 ─ 時間複雜度-計算時間複雜度"},{"text":"複雜度之間的運算","depth":2,"code":"演算法的效率 ─ 時間複雜度-複雜度之間的運算"},{"text":"同樣也很重要 ─ 空間複雜度","depth":1,"code":"同樣也很重要 ─ 空間複雜度"},{"text":"範例","depth":1,"code":"範例"},{"text":"判斷質數","depth":2,"code":"範例-判斷質數"},{"text":"簡單的遞迴函數","depth":2,"code":"範例-簡單的遞迴函數"},{"text":"一個沒那麼單純的例子","depth":2,"code":"範例-一個沒那麼單純的例子"},{"text":"重新了解複雜度","depth":1,"code":"重新了解複雜度"},{"text":"何謂「趨勢」","depth":2,"code":"重新了解複雜度-何謂「趨勢」"},{"text":"為何是「上限」？","depth":2,"code":"重新了解複雜度-為何是「上限」？"},{"text":"常數","depth":2,"code":"重新了解複雜度-常數"},{"text":"真正應用在程式競賽上的話……","depth":1,"code":"真正應用在程式競賽上的話……"},{"text":"選手們的估計方式","depth":2,"code":"真正應用在程式競賽上的話……-選手們的估計方式"},{"text":"常見複雜度以及對應範圍","depth":2,"code":"真正應用在程式競賽上的話……-常見複雜度以及對應範圍"},{"text":"總結","depth":1,"code":"總結"}],"previousArticle":{"code":"BasicAlgorithm/intro","topicCode":"BasicAlgorithm","articleCode":"intro","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 介紹","articleDisplayTitle":"介紹","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/intro","topic":"BasicAlgorithm","article":"intro","title":"介紹","authors":["double"],"contributors":[],"description":"簡單介紹何謂演算法","prerequisites":["Introduction/competitive_programming"]}},"nextArticle":{"code":"BasicAlgorithm/sorting","topicCode":"BasicAlgorithm","articleCode":"sorting","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 排序演算法","articleDisplayTitle":"排序演算法","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/sorting","topic":"BasicAlgorithm","article":"sorting","title":"排序演算法","authors":["baluteshih"],"contributors":[],"description":"簡單介紹基本的排序演算法（O(n^2), counting sort 跟 radix sort）","prerequisites":["BasicAlgorithm/complexity"]}},"virtualArticle":{"code":"BasicAlgorithm/complexity","topicCode":"BasicAlgorithm","articleCode":"complexity","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 複雜度","articleDisplayTitle":"複雜度","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/complexity","topic":"BasicAlgorithm","article":"complexity","title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"description":"","prerequisites":["BasicAlgorithm/intro"]}},"topicStructure":[{"single":true,"title":"","topics":[{"code":"Guide","displayTitle":"網站簡介","articles":[{"code":"Guide/learning","topicCode":"Guide","articleCode":"learning","chapterCode":"I","fullDisplayTitle":"網站簡介 / 服用方法","articleDisplayTitle":"服用方法","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/learning","topic":"Guide","article":"learning","title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"description":"教大家怎麼看這份講義","prerequisites":[]}},{"code":"Guide/chapters","topicCode":"Guide","articleCode":"chapters","chapterCode":"I","fullDisplayTitle":"網站簡介 / 章節與主題","articleDisplayTitle":"章節與主題","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/chapters","topic":"Guide","article":"chapters","title":"章節與主題","authors":["baluteshih"],"contributors":[],"description":"教大家什麼是章節與主題","prerequisites":["Guide/learning"]}},{"code":"Guide/problems","topicCode":"Guide","articleCode":"problems","chapterCode":"I","fullDisplayTitle":"網站簡介 / 習題","articleDisplayTitle":"習題","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/problems","topic":"Guide","article":"problems","title":"習題","authors":["baluteshih"],"contributors":[],"description":"教大家這份講義的習題意義","prerequisites":["Guide/learning"]}},{"code":"Guide/math_symbol","topicCode":"Guide","articleCode":"math_symbol","chapterCode":"I","fullDisplayTitle":"網站簡介 / 基本數學符號","articleDisplayTitle":"基本數學符號","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/math_symbol","topic":"Guide","article":"math_symbol","title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"description":"介紹常見的數學符號","prerequisites":[]}},{"code":"Guide/language","topicCode":"Guide","articleCode":"language","chapterCode":"I","fullDisplayTitle":"網站簡介 / 語法學習資源","articleDisplayTitle":"語法學習資源","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/language","topic":"Guide","article":"language","title":"語法學習資源","authors":["abc864197532"],"contributors":[],"description":"","prerequisites":["Guide/learning"]}},{"code":"Guide/qa","topicCode":"Guide","articleCode":"qa","chapterCode":"I","fullDisplayTitle":"網站簡介 / NTUCPC Guide Q & A","articleDisplayTitle":"NTUCPC Guide Q & A","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/qa","topic":"Guide","article":"qa","title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"description":"","prerequisites":[]}}]}]},{"single":true,"title":"","topics":[{"code":"Introduction","displayTitle":"資訊競賽介紹","articles":[{"code":"Introduction/competitive_programming","topicCode":"Introduction","articleCode":"competitive_programming","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 資訊競賽介紹","articleDisplayTitle":"資訊競賽介紹","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/competitive_programming","topic":"Introduction","article":"competitive_programming","title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"description":"","prerequisites":["Guide/learning"]}},{"code":"Introduction/contests_type","topicCode":"Introduction","articleCode":"contests_type","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 比賽類型","articleDisplayTitle":"比賽類型","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/contests_type","topic":"Introduction","article":"contests_type","title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"description":"","prerequisites":["Introduction/competitive_programming"]}},{"code":"Introduction/tw_contests","topicCode":"Introduction","articleCode":"tw_contests","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 台灣資訊競賽介紹","articleDisplayTitle":"台灣資訊競賽介紹","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/tw_contests","topic":"Introduction","article":"tw_contests","title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"description":"","prerequisites":["Introduction/contests_type"]}},{"code":"Introduction/online_judge","topicCode":"Introduction","articleCode":"online_judge","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 線上評測系統","articleDisplayTitle":"線上評測系統","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/online_judge","topic":"Introduction","article":"online_judge","title":"線上評測系統","authors":["abc864197532"],"contributors":[],"description":"","prerequisites":["Introduction/competitive_programming"]}},{"code":"Introduction/resources","topicCode":"Introduction","articleCode":"resources","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 網路學習資源介紹","articleDisplayTitle":"網路學習資源介紹","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/resources","topic":"Introduction","article":"resources","title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"description":"","prerequisites":["Introduction/competitive_programming"]}},{"code":"Introduction/tactics","topicCode":"Introduction","articleCode":"tactics","chapterCode":"III","fullDisplayTitle":"資訊競賽介紹 / 比賽 + 練習策略","articleDisplayTitle":"比賽 + 練習策略","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"Introduction/tactics","topic":"Introduction","article":"tactics","title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"description":"","prerequisites":["Introduction/contests_type"]}}]}]},{"single":true,"title":"","topics":[{"code":"Implementation","displayTitle":"實作技巧","articles":[{"code":"Implementation/basic_knowledge","topicCode":"Implementation","articleCode":"basic_knowledge","chapterCode":"II","fullDisplayTitle":"實作技巧 / 基本常識","articleDisplayTitle":"基本常識","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/basic_knowledge","topic":"Implementation","article":"basic_knowledge","title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"description":"講述一些競賽程式需要知道的最基本常識","prerequisites":["Introduction/online_judge"]}},{"code":"Implementation/input","topicCode":"Implementation","articleCode":"input","chapterCode":"II","fullDisplayTitle":"實作技巧 / 常見輸入類型","articleDisplayTitle":"常見輸入類型","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/input","topic":"Implementation","article":"input","title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"description":"講述一些競賽程式常見的輸入格式","prerequisites":["Implementation/basic_knowledge"]}},{"code":"Implementation/reference","topicCode":"Implementation","articleCode":"reference","chapterCode":"II","fullDisplayTitle":"實作技巧 / Reference","articleDisplayTitle":"Reference","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/reference","topic":"Implementation","article":"reference","title":"Reference","authors":["baluteshih"],"contributors":[],"description":"Reference","prerequisites":[]}},{"code":"Implementation/compiler","topicCode":"Implementation","articleCode":"compiler","chapterCode":"II","fullDisplayTitle":"實作技巧 / 編譯器","articleDisplayTitle":"編譯器","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/compiler","topic":"Implementation","article":"compiler","title":"編譯器","authors":["WiwiHo"],"contributors":[],"description":"簡單介紹什麼是編譯器","prerequisites":[]}},{"code":"Implementation/error_message","topicCode":"Implementation","articleCode":"error_message","chapterCode":"II","fullDisplayTitle":"實作技巧 / 如何看錯誤訊息","articleDisplayTitle":"如何看錯誤訊息","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/error_message","topic":"Implementation","article":"error_message","title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"description":"介紹一些常見錯誤訊息的看法","prerequisites":["Implementation/compiler"]}},{"code":"Implementation/variable","topicCode":"Implementation","articleCode":"variable","chapterCode":"II","fullDisplayTitle":"實作技巧 / 全域、區域變數","articleDisplayTitle":"全域、區域變數","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/variable","topic":"Implementation","article":"variable","title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"description":"各種全域區域變數相關的事情","prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"]}},{"code":"Implementation/buglist","topicCode":"Implementation","articleCode":"buglist","chapterCode":"II","fullDisplayTitle":"實作技巧 / 常見錯誤列表","articleDisplayTitle":"常見錯誤列表","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/buglist","topic":"Implementation","article":"buglist","title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"description":"講述一些競賽程式常見的錯誤","prerequisites":["Implementation/variable"]}},{"code":"Implementation/debug","topicCode":"Implementation","articleCode":"debug","chapterCode":null,"fullDisplayTitle":"實作技巧 / Debug","articleDisplayTitle":"Debug","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter ???","article":{"code":"Implementation/debug","topic":"Implementation","article":"debug","title":"Debug","authors":["nathanlee726"],"contributors":[],"description":"","prerequisites":["Implementation/buglist"]}}]}]},{"single":true,"title":"","topics":[{"code":"BasicAlgorithm","displayTitle":"基礎演算法","articles":[{"code":"BasicAlgorithm/intro","topicCode":"BasicAlgorithm","articleCode":"intro","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 介紹","articleDisplayTitle":"介紹","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/intro","topic":"BasicAlgorithm","article":"intro","title":"介紹","authors":["double"],"contributors":[],"description":"簡單介紹何謂演算法","prerequisites":["Introduction/competitive_programming"]}},{"code":"BasicAlgorithm/complexity","topicCode":"BasicAlgorithm","articleCode":"complexity","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 複雜度","articleDisplayTitle":"複雜度","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/complexity","topic":"BasicAlgorithm","article":"complexity","title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"description":"","prerequisites":["BasicAlgorithm/intro"]}},{"code":"BasicAlgorithm/sorting","topicCode":"BasicAlgorithm","articleCode":"sorting","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 排序演算法","articleDisplayTitle":"排序演算法","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/sorting","topic":"BasicAlgorithm","article":"sorting","title":"排序演算法","authors":["baluteshih"],"contributors":[],"description":"簡單介紹基本的排序演算法（O(n^2), counting sort 跟 radix sort）","prerequisites":["BasicAlgorithm/complexity"]}},{"code":"BasicAlgorithm/algorithm_numeric","topicCode":"BasicAlgorithm","articleCode":"algorithm_numeric","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 標準函式庫 ── <algorithm> 與 <numeric>","articleDisplayTitle":"標準函式庫 ── <algorithm> 與 <numeric>","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/algorithm_numeric","topic":"BasicAlgorithm","article":"algorithm_numeric","title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"description":"介紹 STL <algorithm> 和 <numeric> 裡的幾個常用函式","prerequisites":["BasicAlgorithm/sorting"]}},{"code":"BasicAlgorithm/enumerate","topicCode":"BasicAlgorithm","articleCode":"enumerate","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 枚舉","articleDisplayTitle":"枚舉","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/enumerate","topic":"BasicAlgorithm","article":"enumerate","title":"枚舉","authors":["WiwiHo"],"contributors":[],"description":"簡單的枚舉技巧，不包含遞迴","prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"]}},{"code":"BasicAlgorithm/searching","topicCode":"BasicAlgorithm","articleCode":"searching","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 搜尋","articleDisplayTitle":"搜尋","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/searching","topic":"BasicAlgorithm","article":"searching","title":"搜尋","authors":["rabhunter"],"contributors":[],"description":"","prerequisites":["BasicAlgorithm/algorithm_numeric"]}},{"code":"BasicAlgorithm/math_in_school","topicCode":"BasicAlgorithm","articleCode":"math_in_school","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 學校教的數學","articleDisplayTitle":"學校教的數學","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/math_in_school","topic":"BasicAlgorithm","article":"math_in_school","title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"description":"一些和基礎演算法設計技巧有關的課綱內數學問題，引導讀者從基礎數學發現演算法，並且訓練把人腦作法轉換成演算法的能力。","prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"]}},{"code":"BasicAlgorithm/recursion","topicCode":"BasicAlgorithm","articleCode":"recursion","chapterCode":"III","fullDisplayTitle":"基礎演算法 / 遞迴","articleDisplayTitle":"遞迴","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicAlgorithm/recursion","topic":"BasicAlgorithm","article":"recursion","title":"遞迴","authors":["nathanlee726"],"contributors":[],"description":"","prerequisites":["BasicAlgorithm/intro"]}},{"code":"BasicAlgorithm/partial_sum","topicCode":"BasicAlgorithm","articleCode":"partial_sum","chapterCode":"III","fullDisplayTitle":"基礎演算法 / 前綴和與差分","articleDisplayTitle":"前綴和與差分","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicAlgorithm/partial_sum","topic":"BasicAlgorithm","article":"partial_sum","title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"description":"","prerequisites":["BasicAlgorithm/enumerate"]}},{"code":"BasicAlgorithm/two_pointers","topicCode":"BasicAlgorithm","articleCode":"two_pointers","chapterCode":"III","fullDisplayTitle":"基礎演算法 / 雙指標","articleDisplayTitle":"雙指標","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicAlgorithm/two_pointers","topic":"BasicAlgorithm","article":"two_pointers","title":"雙指標","authors":["rabhunter"],"contributors":[],"description":"","prerequisites":["BasicAlgorithm/enumerate"]}},{"code":"BasicAlgorithm/binary_search_answer","topicCode":"BasicAlgorithm","articleCode":"binary_search_answer","chapterCode":"III","fullDisplayTitle":"基礎演算法 / 對答案二分搜","articleDisplayTitle":"對答案二分搜","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicAlgorithm/binary_search_answer","topic":"BasicAlgorithm","article":"binary_search_answer","title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"description":"","prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"]}}]}]},{"single":true,"title":"","topics":[{"code":"GreedyAlgorithm","displayTitle":"貪心演算法","articles":[{"code":"GreedyAlgorithm/intuitive_greedy","topicCode":"GreedyAlgorithm","articleCode":"intuitive_greedy","chapterCode":"II","fullDisplayTitle":"貪心演算法 / 貪心法 I","articleDisplayTitle":"貪心法 I","topicDisplayTitle":"貪心演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"GreedyAlgorithm/intuitive_greedy","topic":"GreedyAlgorithm","article":"intuitive_greedy","title":"貪心法 I","authors":["baluteshih"],"contributors":[],"description":"生活中直覺的貪心題目","prerequisites":["BasicAlgorithm/algorithm_numeric"]}}]}]},{"single":true,"title":"","topics":[{"code":"BasicDataStructure","displayTitle":"基礎資料結構","articles":[{"code":"BasicDataStructure/intro","topicCode":"BasicDataStructure","articleCode":"intro","chapterCode":"II","fullDisplayTitle":"基礎資料結構 / 介紹","articleDisplayTitle":"介紹","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicDataStructure/intro","topic":"BasicDataStructure","article":"intro","title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"description":"簡單介紹資料結構的概念","prerequisites":["Implementation/basic_knowledge"]}},{"code":"BasicDataStructure/vector","topicCode":"BasicDataStructure","articleCode":"vector","chapterCode":"II","fullDisplayTitle":"基礎資料結構 / 動態的陣列","articleDisplayTitle":"動態的陣列","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicDataStructure/vector","topic":"BasicDataStructure","article":"vector","title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"]}},{"code":"BasicDataStructure/stack_queue_deque","topicCode":"BasicDataStructure","articleCode":"stack_queue_deque","chapterCode":"II","fullDisplayTitle":"基礎資料結構 / Stack、Queue 與 Deque","articleDisplayTitle":"Stack、Queue 與 Deque","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicDataStructure/stack_queue_deque","topic":"BasicDataStructure","article":"stack_queue_deque","title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/vector"]}},{"code":"BasicDataStructure/linked_list","topicCode":"BasicDataStructure","articleCode":"linked_list","chapterCode":"II","fullDisplayTitle":"基礎資料結構 / Linked List","articleDisplayTitle":"Linked List","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicDataStructure/linked_list","topic":"BasicDataStructure","article":"linked_list","title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/vector"]}},{"code":"BasicDataStructure/binary_tree","topicCode":"BasicDataStructure","articleCode":"binary_tree","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / 二元樹","articleDisplayTitle":"二元樹","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/binary_tree","topic":"BasicDataStructure","article":"binary_tree","title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"description":"example description","prerequisites":["BasicDataStructure/linked_list","Implementation/reference"]}},{"code":"BasicDataStructure/heap","topicCode":"BasicDataStructure","articleCode":"heap","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / Heap","articleDisplayTitle":"Heap","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/heap","topic":"BasicDataStructure","article":"heap","title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"description":"example description","prerequisites":["BasicDataStructure/binary_tree"]}},{"code":"BasicDataStructure/set_map","topicCode":"BasicDataStructure","articleCode":"set_map","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / Set 與 Map","articleDisplayTitle":"Set 與 Map","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/set_map","topic":"BasicDataStructure","article":"set_map","title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/heap"]}},{"code":"BasicDataStructure/unordered","topicCode":"BasicDataStructure","articleCode":"unordered","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / Unordered Set 與 Unordered Map","articleDisplayTitle":"Unordered Set 與 Unordered Map","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/unordered","topic":"BasicDataStructure","article":"unordered","title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/set_map"]}},{"code":"BasicDataStructure/iterator","topicCode":"BasicDataStructure","articleCode":"iterator","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / Iterator","articleDisplayTitle":"Iterator","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/iterator","topic":"BasicDataStructure","article":"iterator","title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"description":"example description","prerequisites":["BasicDataStructure/intro"]}},{"code":"BasicDataStructure/binary_tree_and_stack","topicCode":"BasicDataStructure","articleCode":"binary_tree_and_stack","chapterCode":null,"fullDisplayTitle":"基礎資料結構 / 二元樹與 Stack","articleDisplayTitle":"二元樹與 Stack","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter ???","article":{"code":"BasicDataStructure/binary_tree_and_stack","topic":"BasicDataStructure","article":"binary_tree_and_stack","title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"description":"example description","prerequisites":["BasicDataStructure/binary_tree"]}}]}]},{"single":true,"title":"","topics":[{"code":"BasicMath","displayTitle":"基礎數學","articles":[{"code":"BasicMath/basicalgo","topicCode":"BasicMath","articleCode":"basicalgo","chapterCode":"III","fullDisplayTitle":"基礎數學 / 常用數學演算法","articleDisplayTitle":"常用數學演算法","topicDisplayTitle":"基礎數學","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicMath/basicalgo","topic":"BasicMath","article":"basicalgo","title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"description":"一些不太難的數學","prerequisites":["BasicAlgorithm/math_in_school"]}}]}]}],"chapterStructure":[{"code":"I","displayTitle":"Chapter I. 初來乍到","topics":[{"code":"Guide","displayTitle":"網站簡介","articles":[{"code":"Guide/learning","topicCode":"Guide","articleCode":"learning","chapterCode":"I","fullDisplayTitle":"網站簡介 / 服用方法","articleDisplayTitle":"服用方法","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/learning","topic":"Guide","article":"learning","title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"description":"教大家怎麼看這份講義","prerequisites":[]}},{"code":"Guide/chapters","topicCode":"Guide","articleCode":"chapters","chapterCode":"I","fullDisplayTitle":"網站簡介 / 章節與主題","articleDisplayTitle":"章節與主題","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/chapters","topic":"Guide","article":"chapters","title":"章節與主題","authors":["baluteshih"],"contributors":[],"description":"教大家什麼是章節與主題","prerequisites":["Guide/learning"]}},{"code":"Guide/problems","topicCode":"Guide","articleCode":"problems","chapterCode":"I","fullDisplayTitle":"網站簡介 / 習題","articleDisplayTitle":"習題","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/problems","topic":"Guide","article":"problems","title":"習題","authors":["baluteshih"],"contributors":[],"description":"教大家這份講義的習題意義","prerequisites":["Guide/learning"]}},{"code":"Guide/math_symbol","topicCode":"Guide","articleCode":"math_symbol","chapterCode":"I","fullDisplayTitle":"網站簡介 / 基本數學符號","articleDisplayTitle":"基本數學符號","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/math_symbol","topic":"Guide","article":"math_symbol","title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"description":"介紹常見的數學符號","prerequisites":[]}},{"code":"Guide/language","topicCode":"Guide","articleCode":"language","chapterCode":"I","fullDisplayTitle":"網站簡介 / 語法學習資源","articleDisplayTitle":"語法學習資源","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/language","topic":"Guide","article":"language","title":"語法學習資源","authors":["abc864197532"],"contributors":[],"description":"","prerequisites":["Guide/learning"]}},{"code":"Guide/qa","topicCode":"Guide","articleCode":"qa","chapterCode":"I","fullDisplayTitle":"網站簡介 / NTUCPC Guide Q & A","articleDisplayTitle":"NTUCPC Guide Q & A","topicDisplayTitle":"網站簡介","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Guide/qa","topic":"Guide","article":"qa","title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"description":"","prerequisites":[]}}]},{"code":"Introduction","displayTitle":"資訊競賽介紹","articles":[{"code":"Introduction/competitive_programming","topicCode":"Introduction","articleCode":"competitive_programming","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 資訊競賽介紹","articleDisplayTitle":"資訊競賽介紹","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/competitive_programming","topic":"Introduction","article":"competitive_programming","title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"description":"","prerequisites":["Guide/learning"]}},{"code":"Introduction/contests_type","topicCode":"Introduction","articleCode":"contests_type","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 比賽類型","articleDisplayTitle":"比賽類型","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/contests_type","topic":"Introduction","article":"contests_type","title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"description":"","prerequisites":["Introduction/competitive_programming"]}},{"code":"Introduction/tw_contests","topicCode":"Introduction","articleCode":"tw_contests","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 台灣資訊競賽介紹","articleDisplayTitle":"台灣資訊競賽介紹","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/tw_contests","topic":"Introduction","article":"tw_contests","title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"description":"","prerequisites":["Introduction/contests_type"]}},{"code":"Introduction/online_judge","topicCode":"Introduction","articleCode":"online_judge","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 線上評測系統","articleDisplayTitle":"線上評測系統","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/online_judge","topic":"Introduction","article":"online_judge","title":"線上評測系統","authors":["abc864197532"],"contributors":[],"description":"","prerequisites":["Introduction/competitive_programming"]}},{"code":"Introduction/resources","topicCode":"Introduction","articleCode":"resources","chapterCode":"I","fullDisplayTitle":"資訊競賽介紹 / 網路學習資源介紹","articleDisplayTitle":"網路學習資源介紹","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter I. 初來乍到","article":{"code":"Introduction/resources","topic":"Introduction","article":"resources","title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"description":"","prerequisites":["Introduction/competitive_programming"]}}]}]},{"code":"II","displayTitle":"Chapter II. 新手上路","topics":[{"code":"Implementation","displayTitle":"實作技巧","articles":[{"code":"Implementation/basic_knowledge","topicCode":"Implementation","articleCode":"basic_knowledge","chapterCode":"II","fullDisplayTitle":"實作技巧 / 基本常識","articleDisplayTitle":"基本常識","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/basic_knowledge","topic":"Implementation","article":"basic_knowledge","title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"description":"講述一些競賽程式需要知道的最基本常識","prerequisites":["Introduction/online_judge"]}},{"code":"Implementation/input","topicCode":"Implementation","articleCode":"input","chapterCode":"II","fullDisplayTitle":"實作技巧 / 常見輸入類型","articleDisplayTitle":"常見輸入類型","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/input","topic":"Implementation","article":"input","title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"description":"講述一些競賽程式常見的輸入格式","prerequisites":["Implementation/basic_knowledge"]}},{"code":"Implementation/reference","topicCode":"Implementation","articleCode":"reference","chapterCode":"II","fullDisplayTitle":"實作技巧 / Reference","articleDisplayTitle":"Reference","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/reference","topic":"Implementation","article":"reference","title":"Reference","authors":["baluteshih"],"contributors":[],"description":"Reference","prerequisites":[]}},{"code":"Implementation/compiler","topicCode":"Implementation","articleCode":"compiler","chapterCode":"II","fullDisplayTitle":"實作技巧 / 編譯器","articleDisplayTitle":"編譯器","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/compiler","topic":"Implementation","article":"compiler","title":"編譯器","authors":["WiwiHo"],"contributors":[],"description":"簡單介紹什麼是編譯器","prerequisites":[]}},{"code":"Implementation/error_message","topicCode":"Implementation","articleCode":"error_message","chapterCode":"II","fullDisplayTitle":"實作技巧 / 如何看錯誤訊息","articleDisplayTitle":"如何看錯誤訊息","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/error_message","topic":"Implementation","article":"error_message","title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"description":"介紹一些常見錯誤訊息的看法","prerequisites":["Implementation/compiler"]}},{"code":"Implementation/variable","topicCode":"Implementation","articleCode":"variable","chapterCode":"II","fullDisplayTitle":"實作技巧 / 全域、區域變數","articleDisplayTitle":"全域、區域變數","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/variable","topic":"Implementation","article":"variable","title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"description":"各種全域區域變數相關的事情","prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"]}},{"code":"Implementation/buglist","topicCode":"Implementation","articleCode":"buglist","chapterCode":"II","fullDisplayTitle":"實作技巧 / 常見錯誤列表","articleDisplayTitle":"常見錯誤列表","topicDisplayTitle":"實作技巧","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"Implementation/buglist","topic":"Implementation","article":"buglist","title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"description":"講述一些競賽程式常見的錯誤","prerequisites":["Implementation/variable"]}}]},{"code":"BasicAlgorithm","displayTitle":"基礎演算法","articles":[{"code":"BasicAlgorithm/intro","topicCode":"BasicAlgorithm","articleCode":"intro","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 介紹","articleDisplayTitle":"介紹","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/intro","topic":"BasicAlgorithm","article":"intro","title":"介紹","authors":["double"],"contributors":[],"description":"簡單介紹何謂演算法","prerequisites":["Introduction/competitive_programming"]}},{"code":"BasicAlgorithm/complexity","topicCode":"BasicAlgorithm","articleCode":"complexity","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 複雜度","articleDisplayTitle":"複雜度","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/complexity","topic":"BasicAlgorithm","article":"complexity","title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"description":"","prerequisites":["BasicAlgorithm/intro"]}},{"code":"BasicAlgorithm/sorting","topicCode":"BasicAlgorithm","articleCode":"sorting","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 排序演算法","articleDisplayTitle":"排序演算法","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/sorting","topic":"BasicAlgorithm","article":"sorting","title":"排序演算法","authors":["baluteshih"],"contributors":[],"description":"簡單介紹基本的排序演算法（O(n^2), counting sort 跟 radix sort）","prerequisites":["BasicAlgorithm/complexity"]}},{"code":"BasicAlgorithm/algorithm_numeric","topicCode":"BasicAlgorithm","articleCode":"algorithm_numeric","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 標準函式庫 ── <algorithm> 與 <numeric>","articleDisplayTitle":"標準函式庫 ── <algorithm> 與 <numeric>","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/algorithm_numeric","topic":"BasicAlgorithm","article":"algorithm_numeric","title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"description":"介紹 STL <algorithm> 和 <numeric> 裡的幾個常用函式","prerequisites":["BasicAlgorithm/sorting"]}},{"code":"BasicAlgorithm/enumerate","topicCode":"BasicAlgorithm","articleCode":"enumerate","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 枚舉","articleDisplayTitle":"枚舉","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/enumerate","topic":"BasicAlgorithm","article":"enumerate","title":"枚舉","authors":["WiwiHo"],"contributors":[],"description":"簡單的枚舉技巧，不包含遞迴","prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"]}},{"code":"BasicAlgorithm/searching","topicCode":"BasicAlgorithm","articleCode":"searching","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 搜尋","articleDisplayTitle":"搜尋","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/searching","topic":"BasicAlgorithm","article":"searching","title":"搜尋","authors":["rabhunter"],"contributors":[],"description":"","prerequisites":["BasicAlgorithm/algorithm_numeric"]}},{"code":"BasicAlgorithm/math_in_school","topicCode":"BasicAlgorithm","articleCode":"math_in_school","chapterCode":"II","fullDisplayTitle":"基礎演算法 / 學校教的數學","articleDisplayTitle":"學校教的數學","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicAlgorithm/math_in_school","topic":"BasicAlgorithm","article":"math_in_school","title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"description":"一些和基礎演算法設計技巧有關的課綱內數學問題，引導讀者從基礎數學發現演算法，並且訓練把人腦作法轉換成演算法的能力。","prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"]}}]},{"code":"GreedyAlgorithm","displayTitle":"貪心演算法","articles":[{"code":"GreedyAlgorithm/intuitive_greedy","topicCode":"GreedyAlgorithm","articleCode":"intuitive_greedy","chapterCode":"II","fullDisplayTitle":"貪心演算法 / 貪心法 I","articleDisplayTitle":"貪心法 I","topicDisplayTitle":"貪心演算法","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"GreedyAlgorithm/intuitive_greedy","topic":"GreedyAlgorithm","article":"intuitive_greedy","title":"貪心法 I","authors":["baluteshih"],"contributors":[],"description":"生活中直覺的貪心題目","prerequisites":["BasicAlgorithm/algorithm_numeric"]}}]},{"code":"BasicDataStructure","displayTitle":"基礎資料結構","articles":[{"code":"BasicDataStructure/intro","topicCode":"BasicDataStructure","articleCode":"intro","chapterCode":"II","fullDisplayTitle":"基礎資料結構 / 介紹","articleDisplayTitle":"介紹","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicDataStructure/intro","topic":"BasicDataStructure","article":"intro","title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"description":"簡單介紹資料結構的概念","prerequisites":["Implementation/basic_knowledge"]}},{"code":"BasicDataStructure/vector","topicCode":"BasicDataStructure","articleCode":"vector","chapterCode":"II","fullDisplayTitle":"基礎資料結構 / 動態的陣列","articleDisplayTitle":"動態的陣列","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicDataStructure/vector","topic":"BasicDataStructure","article":"vector","title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"]}},{"code":"BasicDataStructure/stack_queue_deque","topicCode":"BasicDataStructure","articleCode":"stack_queue_deque","chapterCode":"II","fullDisplayTitle":"基礎資料結構 / Stack、Queue 與 Deque","articleDisplayTitle":"Stack、Queue 與 Deque","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicDataStructure/stack_queue_deque","topic":"BasicDataStructure","article":"stack_queue_deque","title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/vector"]}},{"code":"BasicDataStructure/linked_list","topicCode":"BasicDataStructure","articleCode":"linked_list","chapterCode":"II","fullDisplayTitle":"基礎資料結構 / Linked List","articleDisplayTitle":"Linked List","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter II. 新手上路","article":{"code":"BasicDataStructure/linked_list","topic":"BasicDataStructure","article":"linked_list","title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/vector"]}}]}]},{"code":"III","displayTitle":"Chapter III. 漸入佳境","topics":[{"code":"Introduction","displayTitle":"資訊競賽介紹","articles":[{"code":"Introduction/tactics","topicCode":"Introduction","articleCode":"tactics","chapterCode":"III","fullDisplayTitle":"資訊競賽介紹 / 比賽 + 練習策略","articleDisplayTitle":"比賽 + 練習策略","topicDisplayTitle":"資訊競賽介紹","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"Introduction/tactics","topic":"Introduction","article":"tactics","title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"description":"","prerequisites":["Introduction/contests_type"]}}]},{"code":"BasicAlgorithm","displayTitle":"基礎演算法","articles":[{"code":"BasicAlgorithm/recursion","topicCode":"BasicAlgorithm","articleCode":"recursion","chapterCode":"III","fullDisplayTitle":"基礎演算法 / 遞迴","articleDisplayTitle":"遞迴","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicAlgorithm/recursion","topic":"BasicAlgorithm","article":"recursion","title":"遞迴","authors":["nathanlee726"],"contributors":[],"description":"","prerequisites":["BasicAlgorithm/intro"]}},{"code":"BasicAlgorithm/partial_sum","topicCode":"BasicAlgorithm","articleCode":"partial_sum","chapterCode":"III","fullDisplayTitle":"基礎演算法 / 前綴和與差分","articleDisplayTitle":"前綴和與差分","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicAlgorithm/partial_sum","topic":"BasicAlgorithm","article":"partial_sum","title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"description":"","prerequisites":["BasicAlgorithm/enumerate"]}},{"code":"BasicAlgorithm/two_pointers","topicCode":"BasicAlgorithm","articleCode":"two_pointers","chapterCode":"III","fullDisplayTitle":"基礎演算法 / 雙指標","articleDisplayTitle":"雙指標","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicAlgorithm/two_pointers","topic":"BasicAlgorithm","article":"two_pointers","title":"雙指標","authors":["rabhunter"],"contributors":[],"description":"","prerequisites":["BasicAlgorithm/enumerate"]}},{"code":"BasicAlgorithm/binary_search_answer","topicCode":"BasicAlgorithm","articleCode":"binary_search_answer","chapterCode":"III","fullDisplayTitle":"基礎演算法 / 對答案二分搜","articleDisplayTitle":"對答案二分搜","topicDisplayTitle":"基礎演算法","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicAlgorithm/binary_search_answer","topic":"BasicAlgorithm","article":"binary_search_answer","title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"description":"","prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"]}}]},{"code":"BasicDataStructure","displayTitle":"基礎資料結構","articles":[{"code":"BasicDataStructure/binary_tree","topicCode":"BasicDataStructure","articleCode":"binary_tree","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / 二元樹","articleDisplayTitle":"二元樹","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/binary_tree","topic":"BasicDataStructure","article":"binary_tree","title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"description":"example description","prerequisites":["BasicDataStructure/linked_list","Implementation/reference"]}},{"code":"BasicDataStructure/heap","topicCode":"BasicDataStructure","articleCode":"heap","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / Heap","articleDisplayTitle":"Heap","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/heap","topic":"BasicDataStructure","article":"heap","title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"description":"example description","prerequisites":["BasicDataStructure/binary_tree"]}},{"code":"BasicDataStructure/set_map","topicCode":"BasicDataStructure","articleCode":"set_map","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / Set 與 Map","articleDisplayTitle":"Set 與 Map","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/set_map","topic":"BasicDataStructure","article":"set_map","title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/heap"]}},{"code":"BasicDataStructure/unordered","topicCode":"BasicDataStructure","articleCode":"unordered","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / Unordered Set 與 Unordered Map","articleDisplayTitle":"Unordered Set 與 Unordered Map","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/unordered","topic":"BasicDataStructure","article":"unordered","title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"description":"example description","prerequisites":["BasicDataStructure/set_map"]}},{"code":"BasicDataStructure/iterator","topicCode":"BasicDataStructure","articleCode":"iterator","chapterCode":"III","fullDisplayTitle":"基礎資料結構 / Iterator","articleDisplayTitle":"Iterator","topicDisplayTitle":"基礎資料結構","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicDataStructure/iterator","topic":"BasicDataStructure","article":"iterator","title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"description":"example description","prerequisites":["BasicDataStructure/intro"]}}]},{"code":"BasicMath","displayTitle":"基礎數學","articles":[{"code":"BasicMath/basicalgo","topicCode":"BasicMath","articleCode":"basicalgo","chapterCode":"III","fullDisplayTitle":"基礎數學 / 常用數學演算法","articleDisplayTitle":"常用數學演算法","topicDisplayTitle":"基礎數學","chapterDisplayTitle":"Chapter III. 漸入佳境","article":{"code":"BasicMath/basicalgo","topic":"BasicMath","article":"basicalgo","title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"description":"一些不太難的數學","prerequisites":["BasicAlgorithm/math_in_school"]}}]}]}]}},"__N_SSG":true}