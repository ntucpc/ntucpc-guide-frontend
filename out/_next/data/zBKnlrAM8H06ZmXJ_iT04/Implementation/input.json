{"pageProps":{"props":{"mdxPath":"guide/content/Implementation/input/input.mdx","code":"Implementation/input","structure":{"articles":[{"code":"AlgorithmAnalysis/proof","article":"proof","topic":"AlgorithmAnalysis","chapter":null,"valid":true,"title":"證明方法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion"],"coming":false},{"code":"AlgorithmTechnique/bfs","article":"bfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"廣度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dc","article":"dc","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"分治法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/dfs","article":"dfs","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"深度優先搜尋","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/discretization","article":"discretization","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"離散化","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"AlgorithmTechnique/doubling","article":"doubling","topic":"AlgorithmTechnique","chapter":"III","valid":false,"title":"倍增法","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicAlgorithm/algorithm_numeric","article":"algorithm_numeric","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"標準函式庫 ── <algorithm> 與 <numeric>","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/sorting"],"coming":false},{"code":"BasicAlgorithm/binary_search_answer","article":"binary_search_answer","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"對答案二分搜","authors":["WiwiHo"],"contributors":["rabhunter"],"prerequisites":["BasicAlgorithm/enumerate","BasicAlgorithm/searching","GreedyAlgorithm/intuitive_greedy"],"coming":false},{"code":"BasicAlgorithm/complexity","article":"complexity","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"複雜度","authors":["baluteshih"],"contributors":["chengbilly92"],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/enumerate","article":"enumerate","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"枚舉","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/intro","article":"intro","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"介紹","authors":["double"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"BasicAlgorithm/math_in_school","article":"math_in_school","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"學校教的數學","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/searching","BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/partial_sum","article":"partial_sum","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"前綴和與差分","authors":["WiwiHo"],"contributors":["Fysty"],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicAlgorithm/recursion","article":"recursion","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"遞迴","authors":["nathanlee726"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":false},{"code":"BasicAlgorithm/searching","article":"searching","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"搜尋","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicAlgorithm/sorting","article":"sorting","topic":"BasicAlgorithm","chapter":"II","valid":true,"title":"排序演算法","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/complexity"],"coming":false},{"code":"BasicAlgorithm/two_pointers","article":"two_pointers","topic":"BasicAlgorithm","chapter":"III","valid":true,"title":"雙指標","authors":["rabhunter"],"contributors":[],"prerequisites":["BasicAlgorithm/enumerate"],"coming":false},{"code":"BasicDataStructure/binary_tree","article":"binary_tree","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"二元樹","authors":["建中大講義團隊"],"contributors":["8e7","WiwiHo"],"prerequisites":["BasicDataStructure/linked_list","Implementation/reference"],"coming":false},{"code":"BasicDataStructure/binary_tree_and_stack","article":"binary_tree_and_stack","topic":"BasicDataStructure","chapter":null,"valid":true,"title":"二元樹與 Stack","authors":["8e7"],"contributors":["建中大講義團隊","WiwiHo"],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/heap","article":"heap","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Heap","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/binary_tree"],"coming":false},{"code":"BasicDataStructure/intro","article":"intro","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"介紹","authors":["8e7"],"contributors":["建中大講義團隊"],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"BasicDataStructure/iterator","article":"iterator","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Iterator","authors":["8e7","建中大講義團隊"],"contributors":[],"prerequisites":["BasicDataStructure/intro"],"coming":false},{"code":"BasicDataStructure/linked_list","article":"linked_list","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Linked List","authors":["建中大講義團隊","baluteshih"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/set_map","article":"set_map","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Set 與 Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/heap"],"coming":false},{"code":"BasicDataStructure/stack_queue_deque","article":"stack_queue_deque","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"Stack、Queue 與 Deque","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/vector"],"coming":false},{"code":"BasicDataStructure/unordered","article":"unordered","topic":"BasicDataStructure","chapter":"III","valid":true,"title":"Unordered Set 與 Unordered Map","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/set_map"],"coming":false},{"code":"BasicDataStructure/vector","article":"vector","topic":"BasicDataStructure","chapter":"II","valid":true,"title":"動態的陣列","authors":["建中大講義團隊"],"contributors":["8e7"],"prerequisites":["BasicDataStructure/intro","BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"BasicDynamicProgramming/concept","article":"concept","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"基本概念","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/intro"],"coming":true},{"code":"BasicDynamicProgramming/knapsack_and_rolling","article":"knapsack_and_rolling","topic":"BasicDynamicProgramming","chapter":"III","valid":false,"title":"背包問題與滾動 DP","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicDynamicProgramming/multidimensional","article":"multidimensional","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"多個維度的 DP","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/state_and_transition"],"coming":true},{"code":"BasicDynamicProgramming/state_and_transition","article":"state_and_transition","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"狀態與轉移","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/top_down_and_bottom_up","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/partial_sum"],"coming":true},{"code":"BasicDynamicProgramming/subproblem","article":"subproblem","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"第一道動態規劃問題","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/recursion","BasicAlgorithm/complexity","BasicDynamicProgramming/concept"],"coming":true},{"code":"BasicDynamicProgramming/top_down_and_bottom_up","article":"top_down_and_bottom_up","topic":"BasicDynamicProgramming","chapter":"III","valid":true,"title":"Top down 與 Bottom up","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicDynamicProgramming/subproblem","Implementation/buglist"],"coming":true},{"code":"BasicGraph/basic_tree","article":"basic_tree","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/bipartite_graph","article":"bipartite_graph","topic":"BasicGraph","chapter":"III","valid":false,"title":"二分圖","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/dfs_order","article":"dfs_order","topic":"BasicGraph","chapter":"III","valid":false,"title":"樹壓平","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/graph_concepts","article":"graph_concepts","topic":"BasicGraph","chapter":"III","valid":false,"title":"圖論導論","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/lca","article":"lca","topic":"BasicGraph","chapter":"III","valid":false,"title":"最低共同祖先","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/mst","article":"mst","topic":"BasicGraph","chapter":"III","valid":false,"title":"最小生成樹","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/shortest_path","article":"shortest_path","topic":"BasicGraph","chapter":"III","valid":false,"title":"最短路徑","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicGraph/topological_sort","article":"topological_sort","topic":"BasicGraph","chapter":"III","valid":false,"title":"拓撲排序","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/basicalgo","article":"basicalgo","topic":"BasicMath","chapter":"III","valid":true,"title":"常用數學演算法","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicAlgorithm/math_in_school"],"coming":false},{"code":"BasicMath/combinatorics","article":"combinatorics","topic":"BasicMath","chapter":"III","valid":false,"title":"基礎組合","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/matrix","article":"matrix","topic":"BasicMath","chapter":"III","valid":false,"title":"什麼是矩陣","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"BasicMath/number_theory","article":"number_theory","topic":"BasicMath","chapter":"III","valid":true,"title":"基礎數論","authors":["WiwiHo"],"contributors":[],"prerequisites":["BasicMath/basicalgo"],"coming":false},{"code":"DataStructure/dsu","article":"dsu","topic":"DataStructure","chapter":"III","valid":false,"title":"併查集","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"DataStructure/monotonic_queue","article":"monotonic_queue","topic":"DataStructure","chapter":"III","valid":false,"title":"單調隊列","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Example/subexample","article":"subexample","topic":"Example","chapter":null,"valid":true,"title":"subexample","authors":["example_author1","example_author2"],"contributors":["example_contributor1","example_contributor2"],"prerequisites":["example/example_dependency1","example/example_dependency2"],"coming":false},{"code":"GreedyAlgorithm/greedy_with_ds","article":"greedy_with_ds","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 III","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"GreedyAlgorithm/intuitive_greedy","article":"intuitive_greedy","topic":"GreedyAlgorithm","chapter":"II","valid":true,"title":"貪心法 I","authors":["baluteshih"],"contributors":[],"prerequisites":["BasicAlgorithm/algorithm_numeric"],"coming":false},{"code":"GreedyAlgorithm/unintuitive_greedy","article":"unintuitive_greedy","topic":"GreedyAlgorithm","chapter":"III","valid":false,"title":"貪心法 II","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Guide/chapters","article":"chapters","topic":"Guide","chapter":"I","valid":true,"title":"章節與主題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/language","article":"language","topic":"Guide","chapter":"I","valid":true,"title":"語法學習資源","authors":["abc864197532"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/learning","article":"learning","topic":"Guide","chapter":"I","valid":true,"title":"服用方法","authors":["baluteshih","WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/math_symbol","article":"math_symbol","topic":"Guide","chapter":"I","valid":true,"title":"基本數學符號","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Guide/problems","article":"problems","topic":"Guide","chapter":"I","valid":true,"title":"習題","authors":["baluteshih"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Guide/qa","article":"qa","topic":"Guide","chapter":"I","valid":true,"title":"NTUCPC Guide Q & A","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/basic_knowledge","article":"basic_knowledge","topic":"Implementation","chapter":"II","valid":true,"title":"基本常識","authors":["baluteshih"],"contributors":["dj4zo6u.6"],"prerequisites":["Introduction/online_judge"],"coming":false},{"code":"Implementation/buglist","article":"buglist","topic":"Implementation","chapter":"II","valid":true,"title":"常見錯誤列表","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/variable"],"coming":false},{"code":"Implementation/compiler","article":"compiler","topic":"Implementation","chapter":"II","valid":true,"title":"編譯器","authors":["WiwiHo"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/debug","article":"debug","topic":"Implementation","chapter":null,"valid":true,"title":"Debug","authors":["nathanlee726"],"contributors":[],"prerequisites":["Implementation/buglist"],"coming":false},{"code":"Implementation/error_message","article":"error_message","topic":"Implementation","chapter":"II","valid":true,"title":"如何看錯誤訊息","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/compiler"],"coming":false},{"code":"Implementation/float_error","article":"float_error","topic":"Implementation","chapter":"III","valid":false,"title":"浮點數誤差","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/input","article":"input","topic":"Implementation","chapter":"II","valid":true,"title":"常見輸入類型","authors":["baluteshih"],"contributors":[],"prerequisites":["Implementation/basic_knowledge"],"coming":false},{"code":"Implementation/pseudo_pointer","article":"pseudo_pointer","topic":"Implementation","chapter":"III","valid":false,"title":"偽指標","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/reference","article":"reference","topic":"Implementation","chapter":"II","valid":true,"title":"Reference","authors":["baluteshih"],"contributors":[],"prerequisites":[],"coming":false},{"code":"Implementation/rngbased","article":"rngbased","topic":"Implementation","chapter":"III","valid":false,"title":"Range-Based for loop","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/structure_binding","article":"structure_binding","topic":"Implementation","chapter":"III","valid":false,"title":"Structure Binding","authors":[],"contributors":[],"prerequisites":[],"coming":true},{"code":"Implementation/variable","article":"variable","topic":"Implementation","chapter":"II","valid":true,"title":"全域、區域變數","authors":["WiwiHo"],"contributors":[],"prerequisites":["Implementation/basic_knowledge","Implementation/reference","Implementation/compiler"],"coming":false},{"code":"Introduction/competitive_programming","article":"competitive_programming","topic":"Introduction","chapter":"I","valid":true,"title":"資訊競賽介紹","authors":["臺灣大學程式解題社"],"contributors":[],"prerequisites":["Guide/learning"],"coming":false},{"code":"Introduction/contests_type","article":"contests_type","topic":"Introduction","chapter":"I","valid":true,"title":"比賽類型","authors":["abc864197532","baluteshih"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/online_judge","article":"online_judge","topic":"Introduction","chapter":"I","valid":true,"title":"線上評測系統","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/resources","article":"resources","topic":"Introduction","chapter":"I","valid":true,"title":"網路學習資源介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/competitive_programming"],"coming":false},{"code":"Introduction/tactics","article":"tactics","topic":"Introduction","chapter":"III","valid":true,"title":"比賽 + 練習策略","authors":["nathanlee726"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false},{"code":"Introduction/tw_contests","article":"tw_contests","topic":"Introduction","chapter":"I","valid":true,"title":"台灣資訊競賽介紹","authors":["abc864197532"],"contributors":[],"prerequisites":["Introduction/contests_type"],"coming":false}],"topics":[{"code":"Guide","title":"網站簡介","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa"]},{"code":"Introduction","title":"資訊競賽介紹","contents":["Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources","Introduction/tactics"]},{"code":"Implementation","title":"實作技巧","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","Implementation/debug","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer"]},{"code":"BasicAlgorithm","title":"基礎演算法","contents":["BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer"]},{"code":"BasicDataStructure","title":"基礎資料結構","contents":["BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","BasicDataStructure/binary_tree_and_stack"]},{"code":"GreedyAlgorithm","title":"貪心演算法","contents":["GreedyAlgorithm/intuitive_greedy","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds"]},{"code":"BasicMath","title":"基礎數學","contents":["BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix"]},{"code":"AlgorithmTechnique","title":"演算法技巧","contents":["AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling"]},{"code":"BasicDynamicProgramming","title":"基礎動態規劃","contents":["BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack_and_rolling"]},{"code":"DataStructure","title":"資料結構","contents":["DataStructure/monotonic_queue","DataStructure/dsu"]},{"code":"BasicGraph","title":"基礎圖論","contents":["BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}],"topicGroups":[{"single":true,"title":"","topics":["Guide"]},{"single":true,"title":"","topics":["Introduction"]},{"single":true,"title":"","topics":["Implementation"]},{"single":true,"title":"","topics":["BasicAlgorithm"]},{"single":true,"title":"","topics":["BasicDataStructure"]},{"single":true,"title":"","topics":["GreedyAlgorithm"]},{"single":true,"title":"","topics":["BasicMath"]},{"single":true,"title":"","topics":["AlgorithmTechnique"]},{"single":true,"title":"","topics":["BasicDynamicProgramming"]},{"single":true,"title":"","topics":["DataStructure"]},{"single":true,"title":"","topics":["BasicGraph"]}],"chapters":[{"code":"I","title":"Chapter I. 初來乍到","contents":["Guide/learning","Guide/chapters","Guide/problems","Guide/math_symbol","Guide/language","Guide/qa","Introduction/competitive_programming","Introduction/contests_type","Introduction/tw_contests","Introduction/online_judge","Introduction/resources"]},{"code":"II","title":"Chapter II. 新手上路","contents":["Implementation/basic_knowledge","Implementation/input","Implementation/reference","Implementation/compiler","Implementation/error_message","Implementation/variable","Implementation/buglist","BasicAlgorithm/intro","BasicAlgorithm/complexity","BasicAlgorithm/sorting","BasicAlgorithm/algorithm_numeric","BasicAlgorithm/enumerate","BasicAlgorithm/searching","BasicAlgorithm/math_in_school","GreedyAlgorithm/intuitive_greedy","BasicDataStructure/intro","BasicDataStructure/vector","BasicDataStructure/stack_queue_deque","BasicDataStructure/linked_list"]},{"code":"III","title":"Chapter III. 漸入佳境","contents":["Introduction/tactics","Implementation/rngbased","Implementation/structure_binding","Implementation/float_error","Implementation/pseudo_pointer","BasicAlgorithm/recursion","BasicAlgorithm/partial_sum","BasicAlgorithm/two_pointers","BasicAlgorithm/binary_search_answer","BasicDataStructure/binary_tree","BasicDataStructure/heap","BasicDataStructure/set_map","BasicDataStructure/unordered","BasicDataStructure/iterator","GreedyAlgorithm/unintuitive_greedy","GreedyAlgorithm/greedy_with_ds","BasicMath/basicalgo","BasicMath/number_theory","BasicMath/combinatorics","BasicMath/matrix","AlgorithmTechnique/dfs","AlgorithmTechnique/bfs","AlgorithmTechnique/discretization","AlgorithmTechnique/dc","AlgorithmTechnique/doubling","BasicDynamicProgramming/concept","BasicDynamicProgramming/subproblem","BasicDynamicProgramming/top_down_and_bottom_up","BasicDynamicProgramming/state_and_transition","BasicDynamicProgramming/multidimensional","BasicDynamicProgramming/knapsack_and_rolling","DataStructure/monotonic_queue","DataStructure/dsu","BasicGraph/graph_concepts","BasicGraph/bipartite_graph","BasicGraph/basic_tree","BasicGraph/dfs_order","BasicGraph/topological_sort","BasicGraph/shortest_path","BasicGraph/mst","BasicGraph/lca"]}]},"content":[["guide/content/Implementation/input/input.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Info, Problem, Refcode} = _components;\n  if (!Info) _missingMdxReference(\"Info\", true);\n  if (!Problem) _missingMdxReference(\"Problem\", true);\n  if (!Refcode) _missingMdxReference(\"Refcode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      refId: \"簡介\",\n      children: \"簡介\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在程式競賽中，從「標準輸入（Standard Input）」讀取資料後再將結果寫到「標準輸出（Standard Output）」是最為常見的一種實現解題的方式，照著格式輸出倒還簡單，但輸入的格式可能就有一些需要注意的地方了，以下我們會簡單介紹幾種常見的輸入類型，並講述大多選手會如何應對。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"$T$ 筆測資型\",\n      children: \"$T$ 筆測資型\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"有時候為了減少測試資料檔案數量，出題者會直接在單一測資檔內塞入多組測資，並用一個變數 $T$ 來表示測資數量。知名競程網站 \", _jsx(_components.a, {\n        href: \"https://codeforces.com/\",\n        children: \"Codeforces\"\n      }), \" 常在比賽的前幾題使用這樣的輸入格式。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"該類型的題目通常會要你輸入一個 $T$ 後，再用一個迴圈執行 $T$ 次讀取真正用來解題的輸入，而通常我們會用這樣的方式來處理：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int t;\\ncin >> t;\\nwhile (t--) {\\n    // do something\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"直接寫成 \", _jsx(_components.code, {\n        children: \"t--\"\n      }), \" 讓迴圈變得非常簡潔，原理是利用 \", _jsx(_components.code, {\n        children: \"--\"\n      }), \" 會「對變數減一、但回傳減一前的值」，也因此如果 \", _jsx(_components.code, {\n        children: \"t\"\n      }), \" 輸入進來是 $1$ 的話，迴圈的判斷的第一次會讀到 $1$，第二次才會讀到已經被減一的 $0$ 進而終止，也就恰好執行了一次。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"另外，有一個好習慣是直接寫一個函式把解題的部分獨立出來，例如：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"while (t--) {\\n    solve();\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這樣的好處是如果要在 \", _jsx(_components.code, {\n        children: \"solve()\"\n      }), \" 的過程中宣告一個名字也是 \", _jsx(_components.code, {\n        children: \"t\"\n      }), \" 的變數，就不會和外面的 \", _jsx(_components.code, {\n        children: \"t\"\n      }), \" 撞名了。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"輸入到 EOF 型\",\n      children: \"輸入到 EOF 型\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在比較古老的題目中，有些題目會要求選手輸入到「EOF」，這個 EOF 的全名是「End of File」，意思是檔案結尾。讀者可以想像輸入是從一個檔案讀取裡面的資料，那如果我們把資料讀完了，卻還繼續輸入的話，系統就會發出一個信號告訴程式說「已經讀完了！」，而這個信號就是我們的「EOF」。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一旦收到 EOF，程式就會採取相應的對策，若是以 C++ 的 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 為例的話，他會在讀到 EOF 時讓判斷式可以判斷其為 \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" 好讓迴圈停止，讓我們直接看程式碼為例：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int n;\\nwhile (cin >> n) {\\n    // do something\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在上述的程式碼裡面，我們直接寫上 \", _jsx(_components.code, {\n        children: \"while (cin >> n)\"\n      }), \" 來不斷輸入值到 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 裡面，例如輸入 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 後再輸入 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 個數字的題目裡，因為 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 已經在判斷式裡面輸入完成，我們就可以接著在迴圈內部直接讀取後面的 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 個數字就好。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"而讀到 EOF 後，\", _jsx(_components.code, {\n        children: \"cin >> n\"\n      }), \" 就會直接在判斷式裡面轉為 \", _jsx(_components.code, {\n        children: \"false\"\n      }), \"，並終止程式。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不過好像有個問題──自己測試的時候要怎麼輸入 EOF 呢？我們平常在終端機介面做測試輸入時，看上去是沒有所謂的「檔案結尾」的，也因此我們勢必得輸入些什麼來告訴程式「現在正是檔案結尾」。當然，不是直接輸入「EOF」三個字元這種東西（要是輸入正好就是 EOF 怎麼辦？），不過其實也相當容易，根據作業系統的差別，以下提供在常見作業系統下輸入 EOF 的方法：\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"作業系統\"\n          }), _jsx(_components.th, {\n            children: \"輸入 EOF 的方法\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Windows\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"Ctrl + Z\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"macOS\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"Ctrl + D\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Linux\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"Ctrl + D\"\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"只要相對的按鍵按下去，就可以製造出 EOF 的效果囉！讀者可以自己試試看。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"輸入到 0 型\",\n      children: \"輸入到 0 型\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這個同樣是一些古老的題目會有的格式，但相對 EOF 單純一點，就是直接在結束時輸入一個 \", _jsx(_components.code, {\n        children: \"0\"\n      }), \" 以示終止。這樣的形式不一定會以 \", _jsx(_components.code, {\n        children: \"0\"\n      }), \" 出現，也可能是 \", _jsx(_components.code, {\n        children: \"-1\"\n      }), \" 等。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"遇到這種格式，我們就可以這樣寫：\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"int n;\\nwhile (cin >> n && (n != 0)) {\\n    // do something\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這裡主要仰賴的就是後面的 \", _jsx(_components.code, {\n        children: \"n != 0\"\n      }), \" 這個判斷式，括號可加可不加。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"另外，其實還可以更省略的改成\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"while (cin >> n && n) {\\n    // do something\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"這是因為 \", _jsx(_components.code, {\n        children: \"0\"\n      }), \" 轉成布林值就是 \", _jsx(_components.code, {\n        children: \"false\"\n      }), \"，所以讀到 \", _jsx(_components.code, {\n        children: \"0\"\n      }), \" 自然就會停下來了。但如果是 \", _jsx(_components.code, {\n        children: \"-1\"\n      }), \" 就不行啦，所以還千萬要小心不要顧著寫短而搞錯了。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"不告訴你一行有幾個變數\",\n      children: \"不告訴你一行有幾個變數\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有些題目會很過份的要你自己處理一行有幾個數字，例如輸入\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"plaintext\",\n      lineno: \"false\",\n      code: \"3 1 4 1 5 9\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"要你把這若干個數字存到陣列裡，這時候可能一行的數字量是不一定的，我們也就沒辦法知道要輸入幾次才能停下來。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一個簡單的做法是使用 C++ 內建的 \", _jsx(_components.code, {\n        children: \"std::stringstream\"\n      }), \"，來單獨轉換一整行變成一個輸入，具體可以這樣做使用：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"#include <iostream>\\n#include <sstream>\\n#include <string>\\nusing namespace std;\\n\\nint main() {\\n    int n = 0, arr[100] = {};\\n    {\\n        string line;\\n        getline(cin, line);\\n        stringstream ss(line);\\n        int x;\\n        while (ss >> x)\\n            arr[++n] = x;\\n    }\\n}\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"要使用 \", _jsx(_components.code, {\n        children: \"stringstream\"\n      }), \"，首先要先 \", _jsx(_components.code, {\n        children: \"#include <sstream>\"\n      }), \"。\", _jsx(_components.code, {\n        children: \"stringstream\"\n      }), \" 在做的事情可以想成就是把字串變成一種仿造的輸入輸出系統，而在這裡我們就是直接把他當成一個輸入來用，並直接把原本輸入的 \", _jsx(_components.code, {\n        children: \"line\"\n      }), \" 當成輸入檔在第 11 行餵給 \", _jsx(_components.code, {\n        children: \"stringstream\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所以既然已經變成一個輸入系統了，就可以正常使用我們讀到 EOF 的方式來讀輸入啦！也就是我們 12 到 14 行在做的事情。注意到我們這裡在輸入時同時也巧妙的維護 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 的數值，所以輸入完畢後，\", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 自然就是數字個數，也同時讓 \", _jsx(_components.code, {\n        children: \"arr[1]\"\n      }), \" 到 \", _jsx(_components.code, {\n        children: \"arr[n]\"\n      }), \" 是這 \", _jsx(_components.code, {\n        children: \"n\"\n      }), \" 個數字了。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"不告訴你一行有幾個變數-有關於讀取一整行\",\n      children: \"有關於讀取一整行\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"至於最前面的 \", _jsx(_components.code, {\n        children: \"getline\"\n      }), \" 又是什麼呢？這是因為一般輸入數字的時候，讀到空格 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 就會停下來了，所以我們需要調用一個額外能讀取一整行的函式，也就是第 10 行的 \", _jsx(_components.code, {\n        children: \"getline(cin, line)\"\n      }), \"，就是從 \", _jsx(_components.code, {\n        children: \"cin\"\n      }), \" 不斷輸入、直到遇見一個換行後，再將目前讀到的所有字元存進 \", _jsx(_components.code, {\n        children: \"line\"\n      }), \" 這個變數的意思，注意到這裡並不會一起把換行字元存進 \", _jsx(_components.code, {\n        children: \"line\"\n      }), \" 裡。\"]\n    }), \"\\n\", _jsxs(Info, {\n      type: \"warning\",\n      children: [_jsxs(_components.p, {\n        children: [\"一般的 \", _jsx(_components.code, {\n          children: \"cin\"\n        }), \" 讀到空白或換行後會直接停下來，而不會刻意把後面的空白或換行讀取掉，但 \", _jsx(_components.code, {\n          children: \"getline\"\n        }), \" 會這麼做。這就會出現一種狀況像當輸入是\"]\n      }), _jsx(Refcode, {\n        lang: \"plaintext\",\n        lineno: \"false\",\n        code: \"1\\n1 2 3 4 5\",\n        startFrom: \"1\"\n      }), _jsxs(_components.p, {\n        children: [\"時，若先執行一行 \", _jsx(_components.code, {\n          children: \"cin >> x\"\n        }), \" 的話，在第一行的 \", _jsx(_components.code, {\n          children: \"1\"\n        }), \" 後面的「換行字元」還會留著，這時候如果再直接執行 \", _jsx(_components.code, {\n          children: \"getline(cin, line)\"\n        }), \"，\", _jsx(_components.code, {\n          children: \"getline\"\n        }), \" 就會直接看到換行字元，並直接停下來存空的東西進去 \", _jsx(_components.code, {\n          children: \"line\"\n        }), \" 裡，造成問題。\"]\n      }), _jsx(_components.p, {\n        children: \"想要正確的讀到第二行的話，可以這麼寫：\"\n      }), _jsx(Refcode, {\n        lang: \"cpp\",\n        lineno: \"true\",\n        code: \"int x;\\nstring line;\\ncin >> x >> ws;\\ngetline(cin, line);\",\n        startFrom: \"1\"\n      }), _jsxs(_components.p, {\n        children: [\"這裡 \", _jsx(_components.code, {\n          children: \"ws\"\n        }), \" 是 \", _jsx(_components.code, {\n          children: \"cin\"\n        }), \" 等輸入工具專用的特殊變數，寫出 \", _jsx(_components.code, {\n          children: \"cin >> ws\"\n        }), \" 時，\", _jsx(_components.code, {\n          children: \"cin\"\n        }), \" 就會不斷「讀掉空白字元」直到遇到一個非空白字元為止，也因此他會把上面 \", _jsx(_components.code, {\n          children: \"1\"\n        }), \" 後面的換行字元讀掉後，留下第二行的開頭給後面的 \", _jsx(_components.code, {\n          children: \"getline\"\n        }), \"。\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"不告訴你一行有幾個變數-有關於多一層大括號\",\n      children: \"有關於多一層大括號\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"可以注意到上面的程式碼刻意的包了一層大括號形成 8 到 15 行的區域，這麼做是因為在輸入完畢後，\", _jsx(_components.code, {\n        children: \"stringstream\"\n      }), \" 跟其相關的東西都再也用不到了，為了避免未來混用或撞名等問題，乾脆故意把他們寫成一個區域，這樣在 16 行以後就再也不會看到他們了。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      refId: \"不告訴你一行有幾個變數-如果中間不是空格\",\n      children: \"如果中間不是空格\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果輸入長成這個樣子\"\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"plaintext\",\n      lineno: \"false\",\n      code: \"3,1,4,1,5,9\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"那就不能直接轉成 \", _jsx(_components.code, {\n        children: \"stringstream\"\n      }), \" 了，因為轉過去後還是只會讀到一樣的東西。但有一個偷吃步的方法可以解決這件事，那就是直接把這些逗號改成空格：\"]\n    }), \"\\n\", _jsx(Refcode, {\n      lang: \"cpp\",\n      lineno: \"true\",\n      code: \"for (int i = 0; i < int(line.size()); ++i)\\n    if (line[i] == ',')\\n        line[i] = ' ';\",\n      startFrom: \"1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"轉完之後再比照前面的程式碼把 \", _jsx(_components.code, {\n        children: \"line\"\n      }), \" 餵給 \", _jsx(_components.code, {\n        children: \"stringstream\"\n      }), \" 就好了，是不是很單純呢？\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      refId: \"習題\",\n      children: \"習題\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"這裡提供一些需要處理輸入格式的習題給讀者熟悉上面的內容。\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=d069\",\n      src: \"ZeroJudge d069\",\n      name: \"格瑞哥里的煩惱 (t 行版)\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/ZeroJudge/d069/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d069/description.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=d071\",\n      src: \"ZeroJudge d071\",\n      name: \"格瑞哥里的煩惱 (EOF 版)\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/ZeroJudge/d071/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d071/description.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=d070\",\n      src: \"ZeroJudge d070\",\n      name: \"格瑞哥里的煩惱 (0 尾版)\",\n      expanded: \"false\",\n      difficulty: \"1\",\n      descriptionMdx: \"guide/problems/ZeroJudge/d070/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/d070/description.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=e997\",\n      src: \"ZeroJudge e997\",\n      name: \"升旗典禮抽背課文\",\n      expanded: \"false\",\n      difficulty: \"2\",\n      descriptionMdx: \"guide/problems/ZeroJudge/e997/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/e997/description.mdx\"\n    }), \"\\n\", _jsx(Problem, {\n      url: \"https://zerojudge.tw/ShowProblem?problemid=c531\",\n      src: \"ZeroJudge c531\",\n      name: \"基礎排序 #1-1 (偶數排序)\",\n      expanded: \"false\",\n      difficulty: \"4\",\n      descriptionMdx: \"guide/problems/ZeroJudge/c531/description.mdx\",\n      importMdx: \"guide/problems/ZeroJudge/c531/description.mdx\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d069/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"輸入一個整數，判斷是不是閏年。以 $t$ 筆測資作為輸入格式。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d071/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"輸入一個整數，判斷是不是閏年。以輸入到 EOF 作為輸入格式。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/d070/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"輸入一個整數，判斷是不是閏年。以輸入到 $0$ 為止作為輸入格式。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/e997/description.mdx",{"compiledSource":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"首行輸入若干個以空格隔開的字串，代表由左至右的學生姓名，次行再輸入一個數字 $n$，代表要輸出從右邊數過來第 $n$ 個姓名。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],["guide/problems/ZeroJudge/c531/description.mdx",{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"每行輸入一串以逗號分格的數字序列，並單獨將輸入中的「偶數」們排序後以同樣的格式輸出。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"輸入多行至 EOF 停止。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"sections":[{"text":"簡介","depth":1,"code":"簡介"},{"text":"$T$ 筆測資型","depth":1,"code":"$T$ 筆測資型"},{"text":"輸入到 EOF 型","depth":1,"code":"輸入到 EOF 型"},{"text":"輸入到 0 型","depth":1,"code":"輸入到 0 型"},{"text":"不告訴你一行有幾個變數","depth":1,"code":"不告訴你一行有幾個變數"},{"text":"有關於讀取一整行","depth":2,"code":"不告訴你一行有幾個變數-有關於讀取一整行"},{"text":"有關於多一層大括號","depth":2,"code":"不告訴你一行有幾個變數-有關於多一層大括號"},{"text":"如果中間不是空格","depth":2,"code":"不告訴你一行有幾個變數-如果中間不是空格"},{"text":"習題","depth":1,"code":"習題"}],"gaId":"G-XCS0L6MZE3"}},"__N_SSG":true}